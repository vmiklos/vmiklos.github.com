= Dev toolbox

== $$C++$$

- Indexing, code completion: https://ctags.io/[ctags] and
  http://valloric.github.io/YouCompleteMe/[YouCompleteMe]
- Testing: https://freedesktop.org/wiki/Software/cppunit/[cppunit] and
  https://github.com/google/googletest[googletest]
- Documenting: http://www.doxygen.nl/[doxygen]
- Code formatting: https://clang.llvm.org/docs/ClangFormat.html[clang-format]
- Static analysis: http://clang.llvm.org/extra/clang-tidy/[clang-tidy] and
  https://include-what-you-use.org/[IWYU]
- Dynamic analysis: http://valgrind.org/[valgrind] and
  https://github.com/google/sanitizers[sanitizers]
- Build system: https://www.gnu.org/software/automake/[automake] and
  https://cmake.org/[cmake]

More details:

== $$C++11$$

- http://llvm.org/docs/CodingStandards.html#supported-c-11-language-and-library-features[LLVM
  docs]

- Features that I saw working with MSVC 2012, GCC 4.8 (ideally >= 4.6) and
  Clang 3.4 (ideally >=3.1):

  * Range-based for-loop
  * Lambdas (but not lambdas with default arguments)
  * `auto` type deduction
  * Strongly-typed and forward declarable enums

== $$C++17$$

Features that I saw working in LibreOffice:

- http://cgit.freedesktop.org/libreoffice/core/commit/?id=dac7be50cff94e0c34cdca5ac7e35c19685c40c1[std::string_view]
- http://cgit.freedesktop.org/libreoffice/core/commit/?id=23e32f46b169bf1ec69266c925dabf7c93ba8109[structured
  bindings]
- http://cgit.freedesktop.org/libreoffice/core/commit/?id=66ef8ca217680095d8aaae025d82c2cbcd8ec1d2[inline
  variables]
- http://cgit.freedesktop.org/libreoffice/core/commit/?id=6e614489dcf70a812e298e1d84864312d9ac9d23[fallthrough]
- http://cgit.freedesktop.org/libreoffice/core/commit/?id=a061abd3949f933e93c84f9f67f0700055a054f7[nodiscard]
- http://cgit.freedesktop.org/libreoffice/core/commit/?id=5206992e6e9b22b48cea0a4a7626ee576c66492e[class
  template argument deduction]

- deeplinks: https://wg21.link/[wg21.link]
- html deeplinks: http://eel.is/c++draft/vector.bool[eel.is]

== Rust

- Indexing, code completion: https://github.com/dan-t/rusty-tags[rusty-tags]
  and http://valloric.github.io/YouCompleteMe/[YouCompleteMe]
- Testing: https://doc.rust-lang.org/cargo/guide/tests.html[cargo-test]
- Documenting: https://doc.rust-lang.org/rustdoc/[rustdoc]
- Code formatting: https://github.com/rust-lang/rustfmt[rustfmt]
- Static analysis: https://github.com/rust-lang/rust-clippy[rust-clippy]
- Dynamic analysis: https://creativcoder.github.io/post/checking_memory_leaks_in_rust_ffi/[valgrind] and
  https://github.com/japaric/rust-san[sanitizers] (though usually neither of these are needed)
- Build system:
  https://doc.rust-lang.org/cargo/reference/build-scripts.html[cargo-build]

// vim: ft=asciidoc
