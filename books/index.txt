= Books

== Software engineering

- Software engineering in general:

  * http://books.google.com/books?id=5wBQEp6ruIAC[Andrew Hunt, David Thomas: The Pragmatic Programmer]
  * http://books.google.com/books?id=CQlRAAAAMAAJ[Michael C. Feathers: Working Effectively with Legacy Code]
// Notes:
// - not a unit test if: 1) talks to a db 2) network traffic 3) filesystem activity 4) special env needed
// - wrapper around 3rd-party library is good, so 1) migration is easier later 2) testing is easier
// - parameterize ctor: have 2 ctors, one that creates objects and one that allows passing in fakes
// - interface naming: Log -> Recorder
// - supersede instance variable -> works around the "can't call virt method from ctor" problem

- $$C++ Programming$$:

  * http://books.google.com/books?id=X5wZAQAAIAAJ[$$Scott Meyers: Effective C++$$]
  * http://books.google.com/books?id=azvE8V0c-mYC[$$Scott Meyers: More Effective C++$$]
  * http://books.google.com/books?id=RPnWe6QKnCcC[Scott Meyers: Effective STL]
  * http://books.google.com/books?id=ZDhIBQAAQBAJ[$$Scott Meyers: Effective Modern C++$$]
  * http://books.google.com/books?id=EttPPgAACAAJ[$$Anthony Williams: C++ Concurrency in Action$$]
  * https://cliutils.gitlab.io/modern-cmake/[Modern CMake]

- Vimscript Programming:

  * http://learnvimscriptthehardway.stevelosh.com/[Steve Losh: Learn Vimscript the Hard Way]

- JavaScript Programming:

  * http://books.google.com/books?id=UIv0rQEACAAJ[Marijn Haverbeke: Eloquent JavaScript]

- Rust Programming

  * https://doc.rust-lang.org/book/2018-edition/[The Rust Programming language
    (2018 Edition)]

// Notes:
// - chapter 4: rust uses something like C++'s std::unique_ptr, i.e. it moves
//   ownership on assignment + compile-time check for use-after-free
//   - it also has references: can have at most 1 mutable and several const
//     refs to avoid races + compile-time check for this
// - chapter 6: `#[derive(Debug)]` and `{:?}` can pretty-print an enum
//   automatically
// - trait: Copy (value semantics), Drop (kind of an interface)
// - chapter 13:
//   - let v2: Vec<_> = v1.iter().map(|x| x + 1).collect();
//   - let v2: Vec<_> = v1.into_iter().filter(|x| x < 42).collect();

- Objective-C Programming

  * http://andrewd.ces.clemson.edu/courses/cpsc102/notes/ObjC.pdf[The Objective-C Programming Language]

- Go Programming

  * https://www.gopl.io/[The Go Programming Language]

- Android programming

  * https://www.oreilly.com/library/view/professional-android-4th/9781118949528/[Professional
    Android, 4th Edition] (2018)

  * https://books.google.hu/books?id=qtcIkAEACAAJ[Dmitry Jemerov, Svetlana
    Isakova: Kotlin in Action] (2017)

// vim: ft=asciidoc
