= Books

== Software engineering

- Software engineering in general:

  * http://books.google.com/books?id=5wBQEp6ruIAC[Andrew Hunt, David Thomas: The Pragmatic Programmer]
  * http://books.google.com/books?id=CQlRAAAAMAAJ[Michael C. Feathers: Working Effectively with Legacy Code]
// Notes:
// - not a unit test if: 1) talks to a db 2) network traffic 3) filesystem activity 4) special env needed
// - wrapper around 3rd-party library is good, so 1) migration is easier later 2) testing is easier
// - parameterize ctor: have 2 ctors, one that creates objects and one that allows passing in fakes
// - interface naming: Log -> Recorder
// - supersede instance variable -> works around the "can't call virt method from ctor" problem

- $$C++ Programming$$:

  * http://books.google.com/books?id=X5wZAQAAIAAJ[$$Scott Meyers: Effective C++$$]
  * http://books.google.com/books?id=azvE8V0c-mYC[$$Scott Meyers: More Effective C++$$]
  * http://books.google.com/books?id=RPnWe6QKnCcC[Scott Meyers: Effective STL]
  * http://books.google.com/books?id=ZDhIBQAAQBAJ[$$Scott Meyers: Effective Modern C++$$]
  * http://books.google.com/books?id=EttPPgAACAAJ[$$Anthony Williams: C++ Concurrency in Action$$]
  * https://cliutils.gitlab.io/modern-cmake/[Modern CMake]

- Vimscript Programming:

  * http://learnvimscriptthehardway.stevelosh.com/[Steve Losh: Learn Vimscript the Hard Way]

- JavaScript Programming:

  * http://books.google.com/books?id=UIv0rQEACAAJ[Marijn Haverbeke: Eloquent JavaScript]

//- Rust Programming
//
//  * https://doc.rust-lang.org/book/2018-edition/[The Rust Programming language
//    (2018 Edition)]

// vim: ft=asciidoc
