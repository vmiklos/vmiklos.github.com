title: My hack week at Collabora: btLr text direction in Writer
author: Miklos
tags: en, libreoffice
pubdate: 2019-02-21T15:19:04Z
<<<

As mentioned in my https://vmiklos.hu/blog/hackweek-2016.html[previous] such
report, a hack week is when we are allowed to hack on anything we want in
LibreOffice for a few days at https://www.collaboraoffice.com/[Collabora]. I
used this time to implement core support for the btLr text direction in
Writer.

== Motivation

If you work with tables in Word, it's very easy to create this writing
direction: the context menu in a table cell has a menu item to set the
direction of the text, where you can rotate the text by 90 degrees
counter-clockwise or clockwise. The counter-clockwise btLr direction is the
problematic one. Support for tbRl was fine already, since that is needed
typically for Chinese/Japanese scripts as well.

== Results so far

Here is how the baseline, the current and the reference rendering of btLr text looks like:

++++
<div style="text-align: center">
<img src="https://lh3.googleusercontent.com/o5t6-JQeeNaZpx0YURMvS6xUJv7L4KbkbKnn6VPQ0yzULxHFI15ufkwaw_m0FVY7B2tv8gOnTw1CEY2Uxq6BFTgXHlcorXS52J8X1-mNjsyHKYDmoNG-MQ9X1LtdUWmrLl_W3b2ifQ=w640" style="max-width: 100%;"/>
<p>btlr-cell.docx, baseline</p>
</div>
++++

++++
<div style="text-align: center">
<img src="https://lh3.googleusercontent.com/Y8jXvq7TFyNoKVjwWd_QvJNJaOySZdKZE_HqqBaTwGoi_rExCee3eDAHx4AS49E7d7bcjG8SEgxnXOmdKFXaJx0MzmadungQ7D0SVqdSqC2trMC9InsHdKUTq1iwu5p8bDwUfIizng=w640" style="max-width: 100%;"/>
<p>btlr-cell.docx, current</p>
</div>
++++

++++
<div style="text-align: center">
<img src="https://lh3.googleusercontent.com/KYSBaOiAMdy_U8shsb4zoS8J5uyZzwkFPZY4qIKTrHKlo-M-pCdiHHBUxZ9OmQ-uv_QkBiktXeprTQD6gANDvzDVi8JWs4-Ng2RL-uoMcQCrQNL6Hk7tjXSJBaaqxc2skfZzmepkqA=w640" style="max-width: 100%;"/>
<p>btlr-cell.docx, reference</p>
</div>
++++

You can see how the second paragraph in the cell was missing from the rendered
result and now we basically pixel-by-pixel match the reference.

== How is this implemented?

If you would like to know a bit more about how this works, continue reading... :-)

The
http://cgit.freedesktop.org/libreoffice/core/commit/?id=db346dde6179e7414289681d91b153a6ed259d05[document
model] and
http://cgit.freedesktop.org/libreoffice/core/commit/?id=052b5d375307245223e694bb835d86966c370d3b[UNO
API] were reasonably straightforward to implement, but the layout was much
more challenging. Writer already supported 3 writing directions:

- typically used for Latin (left to right, top to bottom)
- Chinese/Japanese (top to bottom, right to left)
- Mongolian (top to bottom, left to right) text.

This new one is also a vertical direction, also left to right, but bottom to
top. The
http://cgit.freedesktop.org/libreoffice/core/commit/?id=e8b9572bf89f55463f2c879a401ed62efc165d95[initial
layout] contained code to read the new enumerator from doc model, extend the
SwFrame class to handle this new bottom to top mode, some handling of
switching between horizontal/vertical mode and at the end mapping from Writer
layout's direction to VCL's "900" font orientation. There are more things to
handle in layout, but this was good enough to look at other areas as well.

The
http://cgit.freedesktop.org/libreoffice/core/commit/?id=8af98ac8bf0ac8795999ecbf061d3c094f7c3be4[ODF
filter] required updating, which was a bit challenging as it was necessary to
write different attribute names depending on which enumerator is used from an
emumeration, and we don't have good support for this. Once the filter code was
in place, I could write some
http://cgit.freedesktop.org/libreoffice/core/commit/?id=bef3818dbedba467a257e2573e298d98062be37b[layout-level
tests] as well.

Since we have .ui files for UI descriptions, adding
http://cgit.freedesktop.org/libreoffice/core/commit/?id=081b753d4cb4f4a25073ca7de12a7bdaa9fc2be4[UI
support] was really easy.

Time came to step away from coding for a moment and write up paperwork to
https://issues.oasis-open.org/browse/OFFICE-4030[propose] this feature to be
part of the next ODF version (thanks to Andras for the help there!).

Finally I went back to layout, and improved things a bit more: after
http://cgit.freedesktop.org/libreoffice/core/commit/?id=a0bb480364c80192111ecab3501d63584e651ea3[fixing
baseline offsets], the positioning of the text was exactly matching what Word
does. How do I know? I used this little script:

----
gs -dNOPROMPT -dBATCH -sDEVICE=jpeg -r75 -dNOPAUSE -sOutputFile=btlr.jpg btlr.pdf
gs -dNOPROMPT -dBATCH -sDEVICE=jpeg -r75 -dNOPAUSE -sOutputFile=btlr-word.jpg btlr-word.pdf
composite -compose difference btlr-word.jpg btlr.jpg out.jpg
----

Which allows seeing the differences between our and Word's PDF output.
Additional work was needed to handle
http://cgit.freedesktop.org/libreoffice/core/commit/?id=835d054434d0000a5741a5bfa5f577e855594c40[multiple
paragraphs] in a table cell. At this stage I was happy enough with the
rendering result, so finally pulled the trigger and replaced the old DOCX
filter hack (using character-level rotation) with
http://cgit.freedesktop.org/libreoffice/core/commit/?id=8fdbda18b593e7014e44a0fd590bbf98d83258b7[simple
DOCX filter mapping] from OOXML's btLr direction to Writer's btLr direction --
i.e. what was already done for the tbRl case.

== Future work

The feature works good enough already so that this new core feature can be
used by the DOCX filter by default, but there are still a few rough edges:

- the shell code (cursor travelling, selection painting, etc) only has
  http://cgit.freedesktop.org/libreoffice/core/commit/?id=61bb90aac5038b5ff051668f7ae86eb61658e4f3[partial
  support] for this new direction

- RTF and DOC filters are not yet updated

- the ODF proposal has a list of contexts other than table cells where the new
  writing direction could be used, which lack UI/filter support/etc at the moment.

All this is available in master (towards LibreOffice 6.3), so you can grab a
http://dev-builds.libreoffice.org/daily/master/[daily build] and try it out
right now. :-)

// vim: ft=asciidoc
