<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking - Tags: en</title>
        <description></description>
        <link>http://vmiklos.hu/blog/</link>
        <item>
            <title>Tiled editing: from input handling to selections</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="http://vmiklos.hu/blog/tiled-editing-part-2.html"&gt;from a living document to
input handling&lt;/a&gt;, I wrote about how we handle touch and on-screen keyboard
events in the LibreOffice Android app. A next step in this
&lt;a href="http://blog.documentfoundation.org/2015/01/27/the-document-foundation-announces-the-results-of-the-android-tender/"&gt;TDF-funded
project&lt;/a&gt; is to provide more UI elements which are specific to touch devices:
selections is one of them.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here are the problems we had to solve to get this working:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Long push is not an event core would recognize.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If you use the mouse and have a selection in Writer, it&amp;#8217;s only possible to
  extend the end of it. If you use the keyboard, then it&amp;#8217;s possible to shrink
  the end of it, but still no adjustment of the start. On touch devices, it&amp;#8217;s
  natural to have selection handles at the start and end of the selection and be
  able to adjust both, in both directions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Additionally, when the user drags the selection handles, the expected
  behavior is that the position of the selection and the handle are never the
  same: the handle is placed below the selection position and when you drag the
  handle, the new selection position is above the handle&amp;#8230; ;-)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Long push is reasonable to map to double mouse click, as in both cases e.g. in
Writer the user expects to have a &lt;em&gt;select word&lt;/em&gt; action. But for the adjustment
of selections, we really had to define a new API
(&lt;code&gt;lok::Document::setTextSelection()&lt;/code&gt;) to allow setting the start or end of the
selection to a new logical (in document coordinates, not paragraph / character
indexes) point.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you are interested how this looks like, here is a demo:&lt;/p&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/dmZtxA2HD5o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An other direction we&amp;#8217;re working towards is to have the same features in other
applications as well: Impress and Calc. Perhaps not so surprisingly, we hit
similar problems in these applications as well that we had to solve in Writer.
The typical problems are:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
LibreOffice assumes a given portion of the document is visible (visual
  area), but the Android view is independent from what LO thinks is visible.
  Example: LO thinks a table is not visible, so it doesn&amp;#8217;t send the selection
  events for the text inside the table, even if it&amp;#8217;s in fact visible on the
  Android app.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Instead of calling Invalidate() and waiting for a timer to call Paint(), at
  some places direct Paint() is performed, so the tile invalidation
  notification triggered by Invalidate() is missing &amp;#8594; lack of content on
  Android.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
We render each tile into a VirtualDevice&amp;#8201;&amp;#8212;&amp;#8201;kind of an off-screen rendering
 &amp;#8201;&amp;#8212;&amp;#8201;and at some places LO assumed that certain content like the actively edited
  shape&amp;#8217;s text is not interesting, as it&amp;#8217;s not interesting "during printing".
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
LO&amp;#8217;s mouse events are in pixels, and then this is translated to mm100
  (hunderd of milimeters) or twips in core. So counting in pixels is the
  common language, while the Android app counts everything in pixels, and
  doesn&amp;#8217;t want to care about what would be visible at what pixel on the screen,
  if LO would run in desktop mode. So we had to make sure that we can pass in
  event coordinates in twips, and get invalidation coordinates in twips, even if
  previously it was a mix of mm100, twips and pixels.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how Impress looks like, with working tile invalidation, touch and
keyboard handling:&lt;/p&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/P2cF8zsNnrg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Calc is lagging a bit behind, but it also has working tile invalidation and
keyboard handling:&lt;/p&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/kQDRpoDkb0s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it for now&amp;#8201;&amp;#8212;&amp;#8201;as usual the commits of me and
&lt;a href="http://tomazvajngerl.blogspot.com/"&gt;Tomaž Vajngerl&lt;/a&gt; are in master (a few of
them is only in feature/tiled-editing for now), so you can try this right now,
or wait till the next Tuesday and get the
&lt;a href="http://dev-builds.libreoffice.org/daily/master/Android-ARM@24-Bytemark-Hosting/current/"&gt;Android
daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/tiled-editing-part-3.html</link>
            <pubDate>Fri, 27 Feb 2015 12:14:55 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/tiled-editing-part-3.html</guid>
        </item>
        <item>
            <title>Tiled editing: from a living document to input handling</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="http://vmiklos.hu/blog/tiled-editing-part-1.html"&gt;from viewing only to a
living document&lt;/a&gt;, I wrote about how tile invalidation can handle updates in
the Android app in case what should be displayed on the screen changes. A next
step in this
&lt;a href="http://blog.documentfoundation.org/2015/01/27/the-document-foundation-announces-the-results-of-the-android-tender/"&gt;TDF-funded
project&lt;/a&gt; is to handle more than blinking text: keyboard and mouse/touch events
from the user.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First let me enumerate over the issues we had to face:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Gtk, Android and LibreOffice&amp;#8217;s VCL use different key codes for the same
  physical keys. We solved this by mapping the special keys manually on the
  Gtk/Android side (using the C++ and Java UNO binding), and for the rest,
  we simply use the unicode representation of the keys.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Special keys: while "return" was easy to map, getting "backspace" to work
  was more challenging. It worked fine on the Gtk side, but on Android we had
  to make sure that the whole sfx2 dispatching framework works properly, only
  then could map the backspace key to the correct UNO command, which is
  &lt;code&gt;.uno:SwBackspace&lt;/code&gt; in case of Writer.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Mouse handling: VCL sends pixel coordinates to the editing windows, they
  then calculate the offset of the editing area (think about toolbars and
  menus that have to be excluded), and then converts the pixel values to
  document coordinates. In case of tiled editing, we always work with document
  coordinates in logical units (twips), so we had to add the possibility to send
  the coordinates in document ones. This allows core not knowing where the user
  exactly is (in case the tiles are already ready, swiping can be handled
  without any LOK calls), and also allows Android not knowing the implementation
  details of the desktop app (where menus and toolbars would be).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Cursor caret overlay: we wanted to be sure that it&amp;#8217;s not necessary to
  re-render the affected tiles each time the cursor blinks, so we added a LOK
  API to send the rectangle (its width is nearly zero) of the cursor to Android,
  and then it can handle the blinking cursor itself in a transparent overlay.
  This overlay will be useful for presenting selections as well.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual the commits of me and &lt;a href="http://tomazvajngerl.blogspot.com/"&gt;Tomaž
Vajngerl&lt;/a&gt; are in master, so you can try this right now, or wait till tomorrow
and get the
&lt;a href="http://dev-builds.libreoffice.org/daily/master/Android-ARM@24-Bytemark-Hosting/current/"&gt;Android
daily build&lt;/a&gt;. However, if you are just interested how this looks like, here are some demos:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Keyboard handling in gtktiledviewer:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/Hi9N9IumMZY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Same on Android, including newlines and backspace handling:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/4CJbu_QNUh0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Mouse handling in gtktiledviewer:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/4jH_Ek1p1OA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Same on Android, including the transparent selection overlay that can
  efficiently blink the cursor:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/frQWyjjsl3I" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it for now&amp;#8201;&amp;#8212;&amp;#8201;next on our list are selections, so you can delete and
overwrite more easily. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/tiled-editing-part-2.html</link>
            <pubDate>Mon, 09 Feb 2015 09:54:48 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/tiled-editing-part-2.html</guid>
        </item>
        <item>
            <title>LibreOffice on Android FOSDEM talk</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh4.googleusercontent.com/-3Z-6BCCwldk/VNEQnkMAl8I/AAAAAAAAFO8/m-5535Gu_IM/s400/"/&gt;
&lt;p&gt;(via &lt;a href="https://twitter.com/LOfCollabora/status/561521715550113793"&gt;LOfCollabora&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Today is my last day in Brussels where I
gave a &lt;a href="https://fosdem.org/2015/schedule/event/editors_texboxes_writer/"&gt;TextBoxes: complex shapes with complex content&lt;/a&gt; and a &lt;a href="https://fosdem.org/2015/schedule/event/editors_libreoffice_android/"&gt;LibreOffice on Android&lt;/a&gt; talk
at FOSDEM 2015, in the
&lt;a href="https://fosdem.org/2015/schedule/track/open_document_editors/"&gt;Open document
editors devroom&lt;/a&gt;. The devroom was well-crowded, with about 100 users in the
rows of the audience&amp;#8201;&amp;#8212;&amp;#8201;proof pictures above and below. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh3.googleusercontent.com/-sR6rLYO-TWA/VNEQngonBHI/AAAAAAAAFPE/b6wHnfcQ49s/s400/"/&gt;
&lt;p&gt;(via &lt;a href="https://twitter.com/deneb_alpha/status/561559104536477698"&gt;deneb_alpha&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We also had a
&lt;a href="https://wiki.documentfoundation.org/Hackfest/FOSDEM2015"&gt;Hackfest&lt;/a&gt; with about
20 hackers attending, (again) kindly hosted by
&lt;a href="http://www.betacowork.com/"&gt;Betacowork&lt;/a&gt; on Monday and Tuesday:&lt;/p&gt;&lt;/div&gt;
&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh5.googleusercontent.com/-yjkNg7omYrI/VNEQnjxF4JI/AAAAAAAAFPA/rO_EtimqYMg/s800/"/&gt;
&lt;p&gt;(via &lt;a href="https://twitter.com/floeff/status/562598533577322496"&gt;floeff&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There were a few topics I hacked on:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=88583"&gt;tdf#88583&lt;/a&gt;: a fallout from the Writer fillattributes work introduced in
  LibreOffice 4.4
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=68183"&gt;tdf#68183&lt;/a&gt;: a small new feature missing since the RSID GSoC project ended
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
build on HiDPI screens should now
  &lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=1ade66e7e70ce13c419f1ffff5222dcedec281bd"&gt;no longer fail&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=88811"&gt;tdf#88811&lt;/a&gt;: an RTF regression fix, so that now the
  &lt;a href="https://bugs.documentfoundation.org/buglist.cgi?keywords=regression&amp;amp;keywords_type=allwords&amp;amp;status_whiteboard_type=allwordssubstr&amp;amp;query_format=advanced&amp;amp;status_whiteboard=rtf_filter&amp;amp;resolution=---"&gt;counter&lt;/a&gt; is down to zero again
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
we no longer produce invalid ODF output when writing
  &lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=f1f6b6db730ae67a427c7974b59a5e19ab571984"&gt;character borders&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A full list of achievements is
&lt;a href="https://wiki.documentfoundation.org/Hackfest/FOSDEM2015#Achievements"&gt;available&lt;/a&gt;, if
you were at the hackfest and you did not contribute to that section, please
write a line about what did you hack on. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Quite some other slides are now available on
&lt;a href="http://planet.documentfoundation.org/"&gt;Planet&lt;/a&gt;, don&amp;#8217;t miss them. Mines are
&lt;a href="https://speakerdeck.com/vmiklos/textboxes-in-libreoffice-writer"&gt;also&lt;/a&gt;
&lt;a href="https://speakerdeck.com/vmiklos/libreoffice-on-android"&gt;uploaded&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/fosdem2015.html</link>
            <pubDate>Wed, 04 Feb 2015 10:44:00 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/fosdem2015.html</guid>
        </item>
        <item>
            <title>Tiled editing: from viewing only to a living document</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;As it has been announced
&lt;a href="http://blog.documentfoundation.org/2015/01/21/libreoffice-viewer-for-android/"&gt;last
week&lt;/a&gt;, an Android port of LibreOffice in the form of a viewer app is now
available for download.  What&amp;#8217;s next?
&lt;a href="http://blog.documentfoundation.org/2015/01/27/the-document-foundation-announces-the-results-of-the-android-tender/"&gt;Editing&lt;/a&gt;,
naturally.  First, thanks again to The Document Foundation&amp;#8201;&amp;#8212;&amp;#8201;and all the
&lt;a href="http://donate.libreoffice.org/"&gt;donors&lt;/a&gt; who made this (ongoing) work possible.
In this post I would like to explain what did we do with
&lt;a href="http://tomazvajngerl.blogspot.com/"&gt;Tomaž Vajngerl&lt;/a&gt; at Collabora so far in that
direction.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you ever touched the Android port of LibreOffice, you probably noticed that
sadly developing for Android is much harder compared to Linux (desktop). On
Linux, if you just touch a single module, it&amp;#8217;s possible to rebuild just that
module in a few seconds, and then you can run soffice again with your
modifications included. On Android, this is much harder:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
due to a limitation of the Android linker, we link all the native code into
  a single shared object, that has to be re-linked after each native code
  modification
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the native + the Java code has to be packed into a .apk archive
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the .apk archive has to be uploaded to the device (or emulator) and
  installed there
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;and only then can you test your changes. To partly sidestep from this problem,
we split the "Android editing" into two:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
tiled editing: this can be tested on Linux using the gtktiledviewer test
  application (and ideally any core problem can be seen here already)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Android LibreOfficeKit client: replacing gtktiledviewer with the real
  Android client code, and this time testing it on the device
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;One problem with this approach was that while Android properly rendered small
tiles of 256x256 pixels, gtktiledviewer rendered a single huge tile. This
means that in case part of the document changes and we need to re-draw it, we
always repainted the whole document in gtktiledviewer, while we only repainted
the necessary parts on Android. Guess what, if the area to be repainted is
wrong, it&amp;#8217;ll be visible on Android but not on gtktiledviewer. So the first
task we solved was to let gtktiledviewer also render small tiles. For
debugging purposes, small red rectangles are painted at the top left corners
of each rectangle, so the size and position of the tiles can be seen easily:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-VvQFF-Kg270/VMYqe9G76-I/AAAAAAAAFL4/Fnh9_ig03Ww/s0/"&gt;
&lt;img src="https://lh5.googleusercontent.com/-VvQFF-Kg270/VMYqe9G76-I/AAAAAAAAFL4/Fnh9_ig03Ww/s420/" alt="https://lh5.googleusercontent.com/-VvQFF-Kg270/VMYqe9G76-I/AAAAAAAAFL4/Fnh9_ig03Ww/s420/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The next step was to somehow start work on real editing&amp;#8201;&amp;#8212;&amp;#8201;but where to start? We identified two critical building blocks:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
there should be some way for the user to provide input (e.g. press a key on
  the software keyboard)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
once the document changed, the application has to redraw the changed part of
  the view
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To avoid solving two problems at the same time, we first went after the
second. One use case that only requires the update of the view is blinking
text. Even if no touch or key events are available, a blinking text wants to
update the view using a timer, so it&amp;#8217;s a good testcase. It&amp;#8217;s now possible for
LibreOfficeKit clients to register a notification callback, and using that,
LibreOffice can notify clients if part of the view has to be redrawn. Here is
how it looks using gtktiledviewer:&lt;/p&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/rgv76GPlMRU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This demonstrates that the LibreOfficeKit implementation in LibreOffice core
and also the gtktiledviewer client code handle correctly tile invalidations.
Once that was done, we could also implement a similar client code in the
Android app&amp;#8201;&amp;#8212;&amp;#8201;it looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/EkGpCrGlhiY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it for now&amp;#8201;&amp;#8212;&amp;#8201;next on our list is adding support for input handling, so
it&amp;#8217;s possible to type in some text. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/tiled-editing-part-1.html</link>
            <pubDate>Tue, 27 Jan 2015 11:02:48 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/tiled-editing-part-1.html</guid>
        </item>
        <item>
            <title>Perfect WW8 comment import</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;TL;DR: Import of annotated text ranges from binary DOC format was a problem
for quite some time, now it should be as good as it always was in the
ODT/DOCX/RTF filter.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Longer version: the import of annotation marks from binary DOC was never
perfect. My
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=7907cc0ef9751d553014bd3bab49be9e7fc31bca"&gt;initial
implementation&lt;/a&gt; had a somewhat hidden, but important shortcoming, in the form
of a "Don&amp;#8217;t support ranges affecting multiple SwTxtNode for now." comment. The
underlying problem was that annotation marks have a start and end position,
and this is described as an offset into the piece table (so the unit was a
character position, CP) in the binary DOC format, while in Writer, we work
with document model positions (text node and content indexes, SwPosition), and it isn&amp;#8217;t
trivial to map between these two.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://zolnaitamas.blogspot.com/"&gt;Tamás&lt;/a&gt; somewhat
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=f2945255df273404ee2457dcf761cb8f334b732b"&gt;improved&lt;/a&gt;
this homegrown CP &amp;#8594; SwPosition mapping code, but was still far from perfect. Here is an example. This is how &lt;a href="http://people.freedesktop.org/~vmiklos/2015/perfect-ww8-comment-import.doc"&gt;this demo document&lt;/a&gt; looks like now in LibreOffice Writer:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-SYW-7l2Otpo/VMQDQ-Fme1I/AAAAAAAAFLg/nkGHlfIV85Y/s0/"&gt;
&lt;img src="https://lh6.googleusercontent.com/-SYW-7l2Otpo/VMQDQ-Fme1I/AAAAAAAAFLg/nkGHlfIV85Y/s800/" alt="https://lh6.googleusercontent.com/-SYW-7l2Otpo/VMQDQ-Fme1I/AAAAAAAAFLg/nkGHlfIV85Y/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And this is how it looked like before the end of last year:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-geD82nPpzC4/VMQDQ9souvI/AAAAAAAAFLk/Mhuqrib2DEs/s0/"&gt;
&lt;img src="https://lh4.googleusercontent.com/-geD82nPpzC4/VMQDQ9souvI/AAAAAAAAFLk/Mhuqrib2DEs/s800/" alt="https://lh4.googleusercontent.com/-geD82nPpzC4/VMQDQ9souvI/AAAAAAAAFLk/Mhuqrib2DEs/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Notice how "Start" is commented and it wasn&amp;#8217;t before. Which one is correct? Here is the reference:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-L_LmD_wIZks/VMQDQ76Jn3I/AAAAAAAAFLo/mMHr5h5p4oM/s0/"&gt;
&lt;img src="https://lh5.googleusercontent.com/-L_LmD_wIZks/VMQDQ76Jn3I/AAAAAAAAFLo/mMHr5h5p4oM/s800/" alt="https://lh5.googleusercontent.com/-L_LmD_wIZks/VMQDQ76Jn3I/AAAAAAAAFLo/mMHr5h5p4oM/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The reason is that the document has fields and tables, and the homegrown CP &amp;#8594;
SwPosition mapping did not handle this. A much better approach is to handle
the mapping as we do it for bookmarks: even if at the end annotation marks and
bookmarks are entires in &lt;code&gt;sw::mark::MarkManager&lt;/code&gt;, it&amp;#8217;s possible to set the
start position as a character attribute during import (since mapping the
&lt;em&gt;current&lt;/em&gt; CP to the current SwPosition is easy) and when we know both the
start and end, delete the character attribute and turn it into a mark manager
entry. That&amp;#8217;s exactly what I&amp;#8217;ve done. The first screenshot is the result of 3
changes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=271722d923610d128a358528e64d7233641ea0dc"&gt;add
  a annotationmark-start character attribute&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=677fdd4fa235466649911042577bc4980d42deb6"&gt;tokenize
  the annitationmark start and end structures from binary DOC&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=0ec0ec267986644084baaa5bda5ba917dc5744df"&gt;handle
  annotation marks via the character attribute added in the first change&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hopefully this makes LibreOffice not only
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=b1cd83c625a2afeb9da43cc9745d79c01963c797"&gt;avoid
crashing&lt;/a&gt; on such complex annotated contents, but also puts an end to the
long story of "annotation marks from binary DOC" problems.&lt;/p&gt;&lt;/div&gt;
&lt;div class="admonitionblock"&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;Just like how C++11 perfect forwarding isn&amp;#8217;t perfect&amp;#8201;&amp;#8212;&amp;#8201;if you think
it is, see "Familiarize yourself with perfect forwarding failure cases." in
&lt;a href="http://scottmeyers.blogspot.hu/2014/08/near-final-draft-of-effective-modern-c.html"&gt;this
post of Scoot&lt;/a&gt;&amp;#8201;&amp;#8212;&amp;#8201;the above changes may still not result in a truly perfect
import result of DOC annotation marks. But I think the #1 problem in this area
is now solved. :-)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/perfect-ww8-comment-import.html</link>
            <pubDate>Sat, 24 Jan 2015 22:14:50 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/perfect-ww8-comment-import.html</guid>
        </item>
        <item>
            <title>Export validation as a new year's resolution</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;TL;DR: If you touch the ODF and/or OOXML filters in LibreOffice, please use
the &lt;code&gt;--with-export-validation&lt;/code&gt; configure option after you ran the
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=dev-tools.git;a=blob;f=export-validation/setup.sh;hb=HEAD"&gt;setup.sh&lt;/a&gt;
script.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://mmohrhard.wordpress.com/"&gt;Markus Mohrhard&lt;/a&gt; did an excellent job with
adding the &lt;code&gt;--with-export-validation&lt;/code&gt; build switch to LibreOffice. It does the
following:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
it validates every Calc and Impress zipped XML document (both ODF and
  OOXML) produced during the build by export filters
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
it does the same for Writer, except there only a subset of documents are
  validated
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;One remaining &lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=84600"&gt;problem&lt;/a&gt; was
that it required setting up both
&lt;a href="http://incubator.apache.org/odftoolkit/conformance/ODFValidator.html"&gt;odfvalidator&lt;/a&gt;
and &lt;a href="https://code.google.com/p/officeotron/"&gt;officeotron&lt;/a&gt;, neither of them are
standard GNU projects but Java beasts. So even if I and a number of other
developers do use this option, it happens from time to time that we need to
fix new validation regressions, as others don&amp;#8217;t see the problem; and even if
we point it out, it&amp;#8217;s hard to reproduce for the author of the problematic
commit.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This has just changed, all you need is to get &lt;code&gt;export-validation/setup.sh&lt;/code&gt;
from &lt;a href="https://gerrit.libreoffice.org/gitweb?p=dev-tools.git"&gt;dev-tools.git&lt;/a&gt;, and run it like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;./setup.sh ~/svn /opt/lo/bin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I.e. the first parameter is a working directory and the second is a directory
that&amp;#8217;s writable by you and is already in your path. And then wait a bit&amp;#8230; ODF
validator uses maven as a build system, so how much you have to wait depends
on how much of the maven dependencies you already have in your local cache&amp;#8230;
it&amp;#8217;s typically 5 to 15 minutes.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Once it&amp;#8217;s done, you can add &lt;code&gt;--with-export-validation&lt;/code&gt; to your autogen.input
and then toplevel &lt;code&gt;make&lt;/code&gt; will invoke odfvalidator and officeotron for the
above mentioned documents.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The new year is here, if you don&amp;#8217;t have a new year&amp;#8217;s resolution yet&amp;#8201;&amp;#8212;&amp;#8201;or if
you hate those, but you&amp;#8217;re willing to adopt a new habit from time to time&amp;#8201;&amp;#8212;&amp;#8201;then please consider &lt;code&gt;--with-export-validation&lt;/code&gt;, so that such regressions can
be detected before you publish your changes. Thanks! ;-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/export-validation.html</link>
            <pubDate>Sat, 10 Jan 2015 13:07:42 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/export-validation.html</guid>
        </item>
        <item>
            <title>Fixing the cloud problem</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-0aWZ5rvDWI4/VJ3tCCh9wcI/AAAAAAAAFHA/A1P8Un5ksrw/s0/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-0aWZ5rvDWI4/VJ3tCCh9wcI/AAAAAAAAFHA/A1P8Un5ksrw/s400/" alt="https://lh3.googleusercontent.com/-0aWZ5rvDWI4/VJ3tCCh9wcI/AAAAAAAAFHA/A1P8Un5ksrw/s400/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;TL;DR: see above -- a number of preset shapes are now rendered correctly at
any scale factors, where previously rendering problems occurred.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=87448"&gt;fdo#87448&lt;/a&gt; has a reproducer
document that shows rendering errors with the scaled cloud preset shape
definition. At first I thought that the OOXML spec has wrong definition for
this shape type, but that turned out to be not the case. What was a problem is
our implementation of the drawingML arcTo command. This implementation defines
how we render such arcs as polygons when the shape is to be painted, and given
that LibreOffice has native support for the drawingML arcTo / ODF G command,
this implementation is invoked during rendering, it&amp;#8217;s not an import/export
problem.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The rendering result looked like this before:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-tYg4cifemAs/VJ3tCEHtf9I/AAAAAAAAFG8/WzioMo1AkMA/s0/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-tYg4cifemAs/VJ3tCEHtf9I/AAAAAAAAFG8/WzioMo1AkMA/s400/" alt="https://lh3.googleusercontent.com/-tYg4cifemAs/VJ3tCEHtf9I/AAAAAAAAFG8/WzioMo1AkMA/s400/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The cloud is drawn using a set of moveTo and arcTo commands. MoveTo is easier,
as it uses explicit coordinates, but arcTo is more complex. It has 4
parameters: the height and width of a "circle", and the start / end angle of
an arc on that circle. (Of course if height and width do not equal, than
that&amp;#8217;s no longer a circle&amp;#8230; ;-) ) The problem is that due to this, the
distance vector between the arc&amp;#8217;s start and end points is implicit&amp;#8201;&amp;#8212;&amp;#8201;so if
something is miscalculated, errors are nicely added to each other as more and
more arcs are drawn. This is especially a problem if you later return to the
end of an earlier arc using moveTo: if arcTo has some problem, then it&amp;#8217;ll be
clearly visible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=20f8006e21943b08f1f152e4a0359c9ebe4786f2"&gt;fixing
UNO ARCANGLETO&lt;/a&gt; to only take care of scaling / translation only after counting
the actual arc, we started to produce correct end points for the arcs and
shapes started to appear correctly at any scale factor, yay! :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;One remaining problem was how to test this from cppunit, in the above commit I
exported the shape to a metafile, and then I could use Tomaž's excellent
MetafileXmlDump to assert that the end of an arc (implicit location) and the
parameters of a moveTo command (explicit location) equal&amp;#8201;&amp;#8212;&amp;#8201;when they do not,
that&amp;#8217;s what your eyes call a "rendering problem".&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/cloud.html</link>
            <pubDate>Sat, 27 Dec 2014 12:21:56 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/cloud.html</guid>
        </item>
        <item>
            <title>Document Liberation Project hacking experience</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;As someone who usually hacks on LibreOffice, external import filters produced
by the Document Liberation Project cut both ways: they are great, as they deal
with obscure formats and we get them for free, OTOH hacking such code is more
complex than the usual LO code. I recently contributed a few patches to
&lt;a href="http://cgit.freedesktop.org/libreoffice/libvisio/commit/?id=2060d364bc0f7df97b864bf01fc5a27da12061c3"&gt;libvisio&lt;/a&gt;
and
&lt;a href="http://sourceforge.net/p/libwpd/libodfgen/ci/fb43d79e12ce132fc127cc0481ff5a6bdbcd1afe/"&gt;libodfgen&lt;/a&gt;,
but before I was able to do actual code changes, I had to set up a number of
repositories and configure them to talk to each other&amp;#8201;&amp;#8212;&amp;#8201;this post describes one
possible setup that suited my needs.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_building_blocks"&gt;Building blocks&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;DLP&amp;#8217;s central project is librevenge and everything builds on top of that,
either by calling it or called by it. In case the task is to turn VSDX files
into ODG ones, it looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-cxQ9QnWmyAo/VHoyKdHXSAI/AAAAAAAAFAY/Rqqr8xPorNM/s0/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-cxQ9QnWmyAo/VHoyKdHXSAI/AAAAAAAAFAY/Rqqr8xPorNM/s400/" alt="https://lh3.googleusercontent.com/-cxQ9QnWmyAo/VHoyKdHXSAI/AAAAAAAAFAY/Rqqr8xPorNM/s400/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;libvisio can build a librevenge document model from Visio files (more on the
various librevenge-based libraries
&lt;a href="http://davetardon.wordpress.com/2014/05/06/writing-import-libraries-with-librevenge-part-i-getting-started/"&gt;here&lt;/a&gt;),
libodfgen can generate ODF output from such document models (one other
possibility would be e.g.
&lt;a href="http://sourceforge.net/projects/libepubgen/"&gt;libepubgen&lt;/a&gt;), and the
writerperfect module provides kind of a controller for the remaining modules,
e.g. for our purpose, a vsd2odg binary.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_alternatives_considered"&gt;Alternatives considered&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;One possibility is to build LibreOffice, use &lt;code&gt;--with-system-libvisio&lt;/code&gt; and
similar switches, then clone the repos, install them system-wide (possibly
with your modifications), and then you can test your changes just with
building the various libs, without changing your LO build (more
&lt;a href="http://fridrich.blogspot.hu/2012/01/fosdem-2012-how-to-make-best-of-it-and.html"&gt;here&lt;/a&gt;).
The drawback is that this way you pollute your system with unstable versions
of those libs.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An other possibility is to build LibreOffice as usual, and then use the
&lt;a href="https://wiki.documentfoundation.org/Development/Patching_External_Libraries"&gt;external
libraries patching mechanism&lt;/a&gt; to hack on the code. The drawback is that you
have to work without git on the code, and also you can only work with a
released version.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_the_pkg_config_approach"&gt;The pkg-config approach&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So here is what I did to avoid the above mentioned drawbacks: all DLP projects
use pkg-config to find the required libraries, so you can configure them in a
way that allows building as a user, avoid installing them at all, and still
execute vsd2odg using the libs with your changes. Here is how to do it:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
librevenge:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;code&gt;git clone git://git.code.sf.net/p/libwpd/librevenge&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cd librevenge&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./autogen.sh&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./configure --enable-debug&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
libvisio:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;code&gt;git clone git://gerrit.libreoffice.org/libvisio&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cd libvisio&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./autogen.sh&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./configure REVENGE_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-0.0" REVENGE_GENERATORS_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_GENERATORS_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-generators-0.0" REVENGE_STREAM_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_STREAM_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-stream-0.0" --enable-debug --enable-werror&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
libodfgen:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;code&gt;git clone git://git.code.sf.net/p/libwpd/libodfgen&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cd libodfgen&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./autogen.sh&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./configure REVENGE_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-0.0" REVENGE_STREAM_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_STREAM_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-stream-0.0" --enable-debug&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
writerperfect:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;code&gt;git clone git://git.code.sf.net/p/libwpd/writerperfect&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cd writerperfect&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./autogen.sh&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;./configure REVENGE_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-0.0" REVENGE_STREAM_CFLAGS="-I/home/vmiklos/git/libreoffice/librevenge/inc" REVENGE_STREAM_LIBS="-L/home/vmiklos/git/libreoffice/librevenge/src/lib/.libs/ -lrevenge-stream-0.0" ODFGEN_CFLAGS="-I/home/vmiklos/git/libreoffice/libodfgen/inc" ODFGEN_LIBS="-L/home/vmiklos/git/libreoffice/libodfgen/src/.libs -lodfgen-0.1 -lrevenge-0.0 -lrevenge-stream-0.0" VISIO_CFLAGS="-I/home/vmiklos/git/libreoffice/libvisio/inc" VISIO_LIBS="-L/home/vmiklos/git/libreoffice/libvisio/src/lib/.libs -lvisio-0.1 -lrevenge-0.0" --enable-debug --with-libvisio&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Of course, replace &lt;code&gt;/home/vmiklos/git/libreoffice/&lt;/code&gt; with any other directory
you like, just be consistent. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now you can hack on any of these libraries, you just need to build your
changes, and then vsd2odg will produce a flat ODG that you can quickly test
with any ODF processor, like LibreOffice. One remaining trick (in case you&amp;#8217;re
not an autotools expert) is that vsd2odg is a libtool shell script, not a
binary. If you still want to run the underlying binary in gdb, here is how you
can do that:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;code&gt;libtool --mode=execute gdb --args vsd2odg /home/vmiklos/git/libreoffice/test.vsdx&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In case the above considered two alternatives are not sufficient for your
purposes, then I hope you find this setup useful. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/libvisio-setup.html</link>
            <pubDate>Sat, 29 Nov 2014 22:28:35 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/libvisio-setup.html</guid>
        </item>
        <item>
            <title>The yellow border around the pig</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-IhaYMXbDVyo/VEufBghNiHI/AAAAAAAAE4g/8n2DuQ_Edeo/s0/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-IhaYMXbDVyo/VEufBghNiHI/AAAAAAAAE4g/8n2DuQ_Edeo/s400/" alt="https://lh3.googleusercontent.com/-IhaYMXbDVyo/VEufBghNiHI/AAAAAAAAE4g/8n2DuQ_Edeo/s400/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It turns out LibreOffice&amp;#8217;s RTF and DOCX import filter ignored borders around Writer
pictures. Given that this
&lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=85179"&gt;worked&lt;/a&gt; in the RTF case in
the past, it&amp;#8217;s a bit amusing that now the very same commit implements a new
feature for the DOCX case and at the same time fixes a regression in the RTF
filter. Code sharing FTW! :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/yellow-pig.html</link>
            <pubDate>Sat, 25 Oct 2014 15:10:38 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/yellow-pig.html</guid>
        </item>
        <item>
            <title>UPC vs port forwarding</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/UPC_Broadband"&gt;UPC&lt;/a&gt; traditionally had a setup
consisting of a cable modem providing internet access to a single computer,
and then it was up to the users if they use that access to really connect to a
computer or to a router, providing wireless access and so on.  It seems, these
days they are more after actually &lt;em&gt;encouraging&lt;/em&gt; people to use their
subscription on multiple devices&amp;#8201;&amp;#8212;&amp;#8201;possibly that way it&amp;#8217;s easier to sell
larger packages (like 60 MBit/s download rate instead of 30 MBit/s, etc).  One
fallout from this move is that they started to replace modems with a
combination of modems and routers, in this case this is an
&lt;a href="http://www.ubeeinteractive.com/products/cable/evw3226"&gt;Ubee EVW3226&lt;/a&gt;, with the
brand removed. I wanted to try out if this new device could replace my
previous router or not&amp;#8201;&amp;#8212;&amp;#8201;so far it seems to be good enough, though there was
one pitfall, hence this post.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It&amp;#8217;s possible to define a range of IP addresses to be used for DHCP purposes,
though you can&amp;#8217;t serve fixed IP addresses based on the MAC address of the
clients. Given that my home network isn&amp;#8217;t that large, I can tolerate that: as
long as there is a range that can be safely used for fixed addresses, I can
configure that manually.  It&amp;#8217;s also possible to do port forwarding, e.g.
redirecting the incoming ssh traffic to a given address&amp;#8201;&amp;#8212;&amp;#8201;except you can&amp;#8217;t do
both at the same time: you can&amp;#8217;t redirect traffic to an address that&amp;#8217;s not
known (served via DHCP) to the router. Which is a shame, the #1 use case for
port forwarding is to redirect traffic to a home-server that will then also
have a fixed IP internally&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So here is a hack that allowed me to still do this: set the start of the range
of the DHCP served IP&amp;#8217;s exactly to the address of the (to be used in future
as) fixed address, e.g. 192.168.0.5. Connect with one client, so that the
address will be &lt;em&gt;known&lt;/em&gt; to the router. Then add the port-forwarding rule,
finally set the DHCP range back to its original value (in my case I use
192.168.0.1..99 for fixed addresses and 100+ for dynamic purposes). It&amp;#8217;s a
stupid trick, but it works&amp;#8230; ;-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/upc-port-forward.html</link>
            <pubDate>Sat, 20 Sep 2014 20:56:33 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/upc-port-forward.html</guid>
        </item>
    </channel>
</rss>
