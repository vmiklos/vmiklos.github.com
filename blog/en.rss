<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking - Tags: en</title>
        <description></description>
        <link>http://vmiklos.hu/blog/</link>
        <item>
            <title>Open Day 2 @ Budapest</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-vClQMoV-Dpw/UibUctNhLEI/AAAAAAAADYc/jQPwTz2h8rE/w720-h405-no/1236201_661759937175752_32439322_n.jpg"&gt;
&lt;img src="https://lh5.googleusercontent.com/-vClQMoV-Dpw/UibUctNhLEI/AAAAAAAADYc/jQPwTz2h8rE/s400/1236201_661759937175752_32439322_n.jpg" alt="https://lh5.googleusercontent.com/-vClQMoV-Dpw/UibUctNhLEI/AAAAAAAADYc/jQPwTz2h8rE/s400/1236201_661759937175752_32439322_n.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On Monday, KAMI once again &lt;a href="http://nyiltnap2.eventbrite.com/"&gt;organized&lt;/a&gt; an event
called "Open Day 2" here at Budapest, to promote free software like Mozilla
projects and LibreOffice. I was also invited as a speaker, giving overview of
what happened in LibreOffice-land during the past few months. My slides are
&lt;a href="https://speakerdeck.com/vmiklos"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks for nice evening, it was good to talk again to other free software
contributors like our Hungarian Firefox and LibreOffice translator, etc. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/open-day-2.html</link>
            <pubDate>Wed, 04 Sep 2013 08:48:26 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/open-day-2.html</guid>
        </item>
        <item>
            <title>OOXML floating table improvements in LibreOffice Writer 4.2</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;m posting here a few screenshots showing improvements I&amp;#8217;ve recently
implemented in our DOCX import and export filter, done in the 4.2 development
cycle. Note that final 4.2 is still far from being released, so this is not a
complete list. :-) In each case I&amp;#8217;m providing a screenshot showing how it looks
&lt;em&gt;now&lt;/em&gt; on 4.2, how it looked &lt;em&gt;before&lt;/em&gt; and the &lt;em&gt;reference&lt;/em&gt; layout. Click on the
images to get a larger image:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with paragraph shadow (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlexport/data/para-shadow.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-RhO6JT8FoJA/UiOTmbPGDpI/AAAAAAAADWk/QV86bPIGdqU/s890/para-shadow-new.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/-RhO6JT8FoJA/UiOTmbPGDpI/AAAAAAAADWk/QV86bPIGdqU/s400/para-shadow-new.png" alt="https://lh3.googleusercontent.com/-RhO6JT8FoJA/UiOTmbPGDpI/AAAAAAAADWk/QV86bPIGdqU/s400/para-shadow-new.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-VwBuUQ2NPfY/UiOTmjHm8fI/AAAAAAAADWw/vuGNooOT3NA/s890/para-shadow-old.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-VwBuUQ2NPfY/UiOTmjHm8fI/AAAAAAAADWw/vuGNooOT3NA/s400/para-shadow-old.png" alt="https://lh4.googleusercontent.com/-VwBuUQ2NPfY/UiOTmjHm8fI/AAAAAAAADWw/vuGNooOT3NA/s400/para-shadow-old.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-_2HFes-of6Q/UiOTmh_3OAI/AAAAAAAADWo/Idou9CvREPM/s646/para-shadow-reference.png"&gt;
&lt;img src="https://lh5.googleusercontent.com/-_2HFes-of6Q/UiOTmh_3OAI/AAAAAAAADWo/Idou9CvREPM/s400/para-shadow-reference.png" alt="https://lh5.googleusercontent.com/-_2HFes-of6Q/UiOTmh_3OAI/AAAAAAAADWo/Idou9CvREPM/s400/para-shadow-reference.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;OK, this has nothing to do with floating tables. But I promise the rest is all related to that. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with floating table (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlexport/data/table-floating.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-vqwNUVppu1U/UiOTolPyUhI/AAAAAAAADX0/OqKonLHsBTE/s890/table-floating-new.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-vqwNUVppu1U/UiOTolPyUhI/AAAAAAAADX0/OqKonLHsBTE/s400/table-floating-new.png" alt="https://lh4.googleusercontent.com/-vqwNUVppu1U/UiOTolPyUhI/AAAAAAAADX0/OqKonLHsBTE/s400/table-floating-new.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-VWKnAf98KUI/UiOTo3ptPoI/AAAAAAAADXs/w71fqHxDdt4/s890/table-floating-old.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-VWKnAf98KUI/UiOTo3ptPoI/AAAAAAAADXs/w71fqHxDdt4/s400/table-floating-old.png" alt="https://lh4.googleusercontent.com/-VWKnAf98KUI/UiOTo3ptPoI/AAAAAAAADXs/w71fqHxDdt4/s400/table-floating-old.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-nIjJh5m5aoM/UiOTpCHWqZI/AAAAAAAADXw/11JLrKyu2AA/s646/table-floating-reference.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-nIjJh5m5aoM/UiOTpCHWqZI/AAAAAAAADXw/11JLrKyu2AA/s400/table-floating-reference.png" alt="https://lh6.googleusercontent.com/-nIjJh5m5aoM/UiOTpCHWqZI/AAAAAAAADXw/11JLrKyu2AA/s400/table-floating-reference.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with floating table and special margins (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlexport/data/table-floating-margins.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-cQrbF3idIGw/UiOTmy5CwRI/AAAAAAAADXg/t8aOc7-EFH4/s890/table-floating-margins-new.png"&gt;
&lt;img src="https://lh5.googleusercontent.com/-cQrbF3idIGw/UiOTmy5CwRI/AAAAAAAADXg/t8aOc7-EFH4/s400/table-floating-margins-new.png" alt="https://lh5.googleusercontent.com/-cQrbF3idIGw/UiOTmy5CwRI/AAAAAAAADXg/t8aOc7-EFH4/s400/table-floating-margins-new.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-Oj5zi3rL4y4/UiOTnJnSn7I/AAAAAAAADW4/p22Zn5aFDYg/s890/table-floating-margins-old.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-Oj5zi3rL4y4/UiOTnJnSn7I/AAAAAAAADW4/p22Zn5aFDYg/s400/table-floating-margins-old.png" alt="https://lh6.googleusercontent.com/-Oj5zi3rL4y4/UiOTnJnSn7I/AAAAAAAADW4/p22Zn5aFDYg/s400/table-floating-margins-old.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-fD_jwONtFdA/UiOTnM-0EpI/AAAAAAAADXA/rIQdIUOWwxo/s646/table-floating-margins-reference.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-fD_jwONtFdA/UiOTnM-0EpI/AAAAAAAADXA/rIQdIUOWwxo/s400/table-floating-margins-reference.png" alt="https://lh4.googleusercontent.com/-fD_jwONtFdA/UiOTnM-0EpI/AAAAAAAADXA/rIQdIUOWwxo/s400/table-floating-margins-reference.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
the same document after roundtrip (load, save and load again):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-lLKfUNXLDgU/UiOTnpr4vRI/AAAAAAAADXM/q3Fcd5AiDTU/s890/table-floating-margins-roundtrip-new.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-lLKfUNXLDgU/UiOTnpr4vRI/AAAAAAAADXM/q3Fcd5AiDTU/s400/table-floating-margins-roundtrip-new.png" alt="https://lh6.googleusercontent.com/-lLKfUNXLDgU/UiOTnpr4vRI/AAAAAAAADXM/q3Fcd5AiDTU/s400/table-floating-margins-roundtrip-new.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-EigIZsr3WqE/UiOTn78PmEI/AAAAAAAADXU/eaeWSEij59E/s890/table-floating-margins-roundtrip-old.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-EigIZsr3WqE/UiOTn78PmEI/AAAAAAAADXU/eaeWSEij59E/s400/table-floating-margins-roundtrip-old.png" alt="https://lh6.googleusercontent.com/-EigIZsr3WqE/UiOTn78PmEI/AAAAAAAADXU/eaeWSEij59E/s400/table-floating-margins-roundtrip-old.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-neGqO1p_Cyw/UiOToZQt7hI/AAAAAAAADXY/_PJbf3WoCwI/s646/table-floating-margins-roundtrip-reference.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-neGqO1p_Cyw/UiOToZQt7hI/AAAAAAAADXY/_PJbf3WoCwI/s400/table-floating-margins-roundtrip-reference.png" alt="https://lh6.googleusercontent.com/-neGqO1p_Cyw/UiOToZQt7hI/AAAAAAAADXY/_PJbf3WoCwI/s400/table-floating-margins-roundtrip-reference.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you want to try these out yourself, get a
&lt;a href="http://dev-builds.libreoffice.org/daily/"&gt;daily build&lt;/a&gt; and play with it! :-) If
something goes wrong, report it to us in the
&lt;a href="https://www.libreoffice.org/get-help/bug/"&gt;Bugzilla&lt;/a&gt;, so we can try fix it
before 4.2 gets branched off. And remember, there are lots more improvements
&lt;a href="http://wiki.documentfoundation.org/ReleaseNotes/4.2"&gt;coming&lt;/a&gt; in LibreOffice 4.2
(even if some of them is not yet documented), stay tuned! ;-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/lo-floattable-ooxml-improvements.html</link>
            <pubDate>Sun, 01 Sep 2013 21:38:42 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/lo-floattable-ooxml-improvements.html</guid>
        </item>
        <item>
            <title>Using a git push tree</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;I just checked, I created my git &lt;em&gt;push tree&lt;/em&gt; more than a year ago, but
yesterday I was reminded that this technique isn&amp;#8217;t really documented anywhere,
so let me describe it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Some background: for the LibreOffice codebase, we decided to do all
micro-features directly on the &lt;code&gt;master&lt;/code&gt; branch. This means that we typically
rebase our local &lt;code&gt;master&lt;/code&gt; branch against &lt;code&gt;origin/master&lt;/code&gt;, then push it. The
benefit of this is that code gets wider testing quickly and the commit history
is not polluted with meaningless merge commits.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The problem: one drawback of the above situation is that after you pull, some
changes of other developers in the lower layers may trigger a full rebuild,
typically wasting about an hour of your life (or more, in case of slower
machines).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Push tree is one hack to avoid this problem. Using a push tree, you have two
separate repositories locally, you update your main one less regularly, and
when you have a commit to push, you push it from the push tree to be able to
avoid pulling in your main tree.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how to do it. To set this up:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;git clone --referece /path/to/master ssh://logerrit/core master-push&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then to use it, instead of &lt;code&gt;git pull -r &amp;amp;&amp;amp; git push&lt;/code&gt; in your &lt;code&gt;master&lt;/code&gt; tree, do these:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;cd /path/to/master
git show -s &lt;b&gt;&amp;lt;1&amp;gt;&lt;/b&gt;
cd /path/to/master-push
git pull -r
git cherry-pick $sha1 &lt;b&gt;&amp;lt;2&amp;gt;&lt;/b&gt;
git push&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="colist arabic"&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
copy the sha1 hash from the output
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
replace $sha1 with the sha1 hash you got in the previous step
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;(There is a trick here, given that master-push already references the original
tree, you can go ahead with cherry-pick directly, without fetching branches
from your &lt;code&gt;master&lt;/code&gt; tree.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And that&amp;#8217;s it, you were able to push without waiting for a long rebuild!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note: of course this technique has some drawbacks as well, so use with care.
Keep in mind the followings:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
If your local &lt;code&gt;master&lt;/code&gt; is not up-to-date enough, you&amp;#8217;ll get conflicts while
  cherry-picking. I usually update my &lt;code&gt;master&lt;/code&gt; tree once a day in the morning.
  If you have a slower machine, do it once a week in the night, or so.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Even if you don&amp;#8217;t get conflicts, there can be cases when the result of the
  cherry-pick in the push tree won&amp;#8217;t be what you want. Chances that this
  happens is pretty low if your &lt;code&gt;master&lt;/code&gt; tree is not super-old, see the previous
  note.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
An other non-technical but social reason to still update your &lt;code&gt;master&lt;/code&gt; tree
  regularly is that if everyone uses an infrequently updated &lt;code&gt;master&lt;/code&gt; tree,
  then nobody will fix breakages caused by others on &lt;code&gt;origin/master&lt;/code&gt;. So updating
  your real tree infrequently is a bit unfair to other developers.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Other than these, I can just recommend using a push tree, it helped me many
times not to loose focus in the middle of the day. (And as we all know, pushing
all your risky changes on Friday afternoon is also a bad idea. :-) )&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/push-tree.html</link>
            <pubDate>Wed, 14 Aug 2013 10:14:28 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/push-tree.html</guid>
        </item>
        <item>
            <title>OOXML improvements in LibreOffice Writer 4.1</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;See &lt;a href="http://vmiklos.hu/blog/lo-ooxml-improvements.html"&gt;here&lt;/a&gt; for a 3.6/4.0
version of this post.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;m posting here a few screenshots showing improvements in our DOCX filter,
done in the 4.1 development cycle. In each case I&amp;#8217;m providing a link to the
test document, a screenshot showing how it looked before and how it now looks
on 4.1. Click on the images to get a larger image:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with a complex groupshape: multiple shapes had text (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlimport/data/n792778.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-sYXxjhypoQ8/Uez38Xv2tmI/AAAAAAAADPI/u5Dzu0pTTXc/s912/groupshape-lo40.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-sYXxjhypoQ8/Uez38Xv2tmI/AAAAAAAADPI/u5Dzu0pTTXc/s400/groupshape-lo40.png" alt="https://lh4.googleusercontent.com/-sYXxjhypoQ8/Uez38Xv2tmI/AAAAAAAADPI/u5Dzu0pTTXc/s400/groupshape-lo40.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-SOZjbpmdvXw/Uez38brF6bI/AAAAAAAADOM/KSsbMkgSQlg/s912/groupshape-lo41.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/-SOZjbpmdvXw/Uez38brF6bI/AAAAAAAADOM/KSsbMkgSQlg/s400/groupshape-lo41.png" alt="https://lh3.googleusercontent.com/-SOZjbpmdvXw/Uez38brF6bI/AAAAAAAADOM/KSsbMkgSQlg/s400/groupshape-lo41.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with tabs over the margin (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlimport/data/n793998.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-56Vj5pUGX-I/Uez38_AGTRI/AAAAAAAADOs/aVKQ_qPbMdg/s800/tabovermargin-lo40.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-56Vj5pUGX-I/Uez38_AGTRI/AAAAAAAADOs/aVKQ_qPbMdg/s400/tabovermargin-lo40.png" alt="https://lh6.googleusercontent.com/-56Vj5pUGX-I/Uez38_AGTRI/AAAAAAAADOs/aVKQ_qPbMdg/s400/tabovermargin-lo40.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-vLbiQ55TWtQ/Uez39MNwS2I/AAAAAAAADOY/AtIVReP1_LI/s800/tabovermargin-lo41.png"&gt;
&lt;img src="https://lh5.googleusercontent.com/-vLbiQ55TWtQ/Uez39MNwS2I/AAAAAAAADOY/AtIVReP1_LI/s400/tabovermargin-lo41.png" alt="https://lh5.googleusercontent.com/-vLbiQ55TWtQ/Uez39MNwS2I/AAAAAAAADOY/AtIVReP1_LI/s400/tabovermargin-lo41.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with rotated text: content should not fit the cell size (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlimport/data/tblr-height.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-QfKy9rLa1oU/Uez39sijDtI/AAAAAAAADOk/ptcg831fH34/s700/tblr-cell-overflow-lo40.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-QfKy9rLa1oU/Uez39sijDtI/AAAAAAAADOk/ptcg831fH34/s400/tblr-cell-overflow-lo40.png" alt="https://lh6.googleusercontent.com/-QfKy9rLa1oU/Uez39sijDtI/AAAAAAAADOk/ptcg831fH34/s400/tblr-cell-overflow-lo40.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-zsjH1yutGBU/Uez39yHwi8I/AAAAAAAADOw/FtXf_8CUeRg/s700/tblr-cell-overflow-lo41.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-zsjH1yutGBU/Uez39yHwi8I/AAAAAAAADOw/FtXf_8CUeRg/s400/tblr-cell-overflow-lo41.png" alt="https://lh4.googleusercontent.com/-zsjH1yutGBU/Uez39yHwi8I/AAAAAAAADOw/FtXf_8CUeRg/s400/tblr-cell-overflow-lo41.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with numbering, where bullets are pictures (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlexport/data/i120928.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-fuMz-_o3h9Y/Uez38WN94YI/AAAAAAAADOE/4m2KvenRodM/s200/numpic-lo40.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/-fuMz-_o3h9Y/Uez38WN94YI/AAAAAAAADOE/4m2KvenRodM/s200/numpic-lo40.png" alt="https://lh3.googleusercontent.com/-fuMz-_o3h9Y/Uez38WN94YI/AAAAAAAADOE/4m2KvenRodM/s200/numpic-lo40.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-MG9E8l0FVWI/Uez382lWcHI/AAAAAAAADOU/aLNZI8GoEBI/s200/numpic-lo41.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-MG9E8l0FVWI/Uez382lWcHI/AAAAAAAADOU/aLNZI8GoEBI/s200/numpic-lo41.png" alt="https://lh6.googleusercontent.com/-MG9E8l0FVWI/Uez382lWcHI/AAAAAAAADOU/aLNZI8GoEBI/s200/numpic-lo41.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
document with watermark (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlimport/data/watermark.docx"&gt;test doc&lt;/a&gt;):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-mM-RGgEX2M8/Uez3-Gh8CMI/AAAAAAAADPA/1QqJeg4atiM/s600/watermark-lo40.png"&gt;
&lt;img src="https://lh5.googleusercontent.com/-mM-RGgEX2M8/Uez3-Gh8CMI/AAAAAAAADPA/1QqJeg4atiM/s400/watermark-lo40.png" alt="https://lh5.googleusercontent.com/-mM-RGgEX2M8/Uez3-Gh8CMI/AAAAAAAADPA/1QqJeg4atiM/s400/watermark-lo40.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-zaW8P_cvMQM/Uez3-el1Z8I/AAAAAAAADO8/yz-boOrYMLo/s600/watermark-lo41.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/-zaW8P_cvMQM/Uez3-el1Z8I/AAAAAAAADO8/yz-boOrYMLo/s400/watermark-lo41.png" alt="https://lh3.googleusercontent.com/-zaW8P_cvMQM/Uez3-el1Z8I/AAAAAAAADO8/yz-boOrYMLo/s400/watermark-lo41.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you want to try these out yourself, get a
&lt;a href="http://dev-builds.libreoffice.org/daily/"&gt;daily build&lt;/a&gt; and play with it! :) If
something goes wrong, report it to us in the
&lt;a href="https://www.libreoffice.org/get-help/bug/"&gt;Bugzilla&lt;/a&gt;, so we can try fix it in
the next 4.1 bugfix release. And remember, there are lots more improvements
&lt;a href="http://wiki.documentfoundation.org/ReleaseNotes/4.1"&gt;coming&lt;/a&gt; in LibreOffice 4.1,
stay tuned!&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/lo-41-ooxml-improvements.html</link>
            <pubDate>Mon, 22 Jul 2013 11:31:57 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/lo-41-ooxml-improvements.html</guid>
        </item>
        <item>
            <title>SUSE Conference 2013 @ Budapest</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-hCCgdACtL7Y/Ucw5OlY2yhI/AAAAAAAADIc/3oCgDUxEZWc/s2560/IMG_20130627_125531.jpg"&gt;
&lt;img src="https://lh5.googleusercontent.com/-hCCgdACtL7Y/Ucw5OlY2yhI/AAAAAAAADIc/3oCgDUxEZWc/s400/IMG_20130627_125531.jpg" alt="https://lh5.googleusercontent.com/-hCCgdACtL7Y/Ucw5OlY2yhI/AAAAAAAADIc/3oCgDUxEZWc/s400/IMG_20130627_125531.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Yesterday Novell Hungary organized
&lt;a href="https://www.suse.com/hu-hu/events/suseconf2013/"&gt;SUSE Conference 2013&lt;/a&gt; here at
Budapest. As you can see above Andras held a LibreOffice-related presentation
there&amp;#8201;&amp;#8212;&amp;#8201;and we also ran a LibreOffice booth. As it was requested, we set up
quite some
(&lt;a href="http://dev-builds.libreoffice.org/daily/master/Android-ARM@24-Bytemark-Hosting/current/"&gt;publicly
available&lt;/a&gt;) Android demos:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Impress remote
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
LibreOffice4Android (document viewer) on my phone (I needed a
  &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=015e1b84446077df9c226cf87c19bef056dcf3b7"&gt;fix&lt;/a&gt;
to get it running on a non-tablet, though)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The desktop app on a tablet&amp;#8201;&amp;#8212;&amp;#8201;thanks goes to the organizers who provided that for us!
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;About 200 visitors attended the conference, which counts as a great success in
this category. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/suse-hu-conf-2013.html</link>
            <pubDate>Fri, 28 Jun 2013 17:01:39 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/suse-hu-conf-2013.html</guid>
        </item>
        <item>
            <title>LibreOffice Hamburg Hackfest 2013</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-VWFdyXddsj4/UcAmItG7LdI/AAAAAAAAC0M/aduHC_-oanA/s714/HHHackfest2013.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-VWFdyXddsj4/UcAmItG7LdI/AAAAAAAAC0M/aduHC_-oanA/s400/HHHackfest2013.png" alt="https://lh6.googleusercontent.com/-VWFdyXddsj4/UcAmItG7LdI/AAAAAAAAC0M/aduHC_-oanA/s400/HHHackfest2013.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This year, LibreOffice&amp;#8217;s Hamburg hackfest happened last weekend, with more than
20 attendees. Thanks to the
&lt;a href="https://wiki.documentfoundation.org/Hackfest/Hamburg2013#Sponsors"&gt;sponsors&lt;/a&gt;, we
had free drink and food during the whole hackfest. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My original plan was to add support for tables inside text frames
in Writer, when importing from RTF. At the end I managed to do that, though not
the way I originally wanted to implement that feature. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how this looked with the RTF importer we inherited from OpenOffice.org (LO 3.4),
and then with the new RTF import filter (LO 3.6):&lt;/p&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-8ltBBFaWW8E/UcAmQvIrchI/AAAAAAAAC0c/B6-aazoJpm0/s514/rtf-textframe-table-lo34.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-8ltBBFaWW8E/UcAmQvIrchI/AAAAAAAAC0c/B6-aazoJpm0/s400/rtf-textframe-table-lo34.png" alt="https://lh6.googleusercontent.com/-8ltBBFaWW8E/UcAmQvIrchI/AAAAAAAAC0c/B6-aazoJpm0/s400/rtf-textframe-table-lo34.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-wcelxQuT94k/UcAmQ2uBEHI/AAAAAAAAC0o/wOgnKwhFGJI/s659/rtf-textframe-table-lo36.png"&gt;
&lt;img src="https://lh5.googleusercontent.com/-wcelxQuT94k/UcAmQ2uBEHI/AAAAAAAAC0o/wOgnKwhFGJI/s400/rtf-textframe-table-lo36.png" alt="https://lh5.googleusercontent.com/-wcelxQuT94k/UcAmQ2uBEHI/AAAAAAAAC0o/wOgnKwhFGJI/s400/rtf-textframe-table-lo36.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how this looks like in latest master, and how it should look like:&lt;/p&gt;&lt;/div&gt;
&lt;div align="center"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="https://lh4.googleusercontent.com/-NpZdA5p2ZVI/UcAmQ1cIC8I/AAAAAAAAC0k/fvKJRMvlRFI/s900/rtf-textframe-table-lo42.png"&gt;
&lt;img src="https://lh4.googleusercontent.com/-NpZdA5p2ZVI/UcAmQ1cIC8I/AAAAAAAAC0k/fvKJRMvlRFI/s400/rtf-textframe-table-lo42.png" alt="https://lh4.googleusercontent.com/-NpZdA5p2ZVI/UcAmQ1cIC8I/AAAAAAAAC0k/fvKJRMvlRFI/s400/rtf-textframe-table-lo42.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-5s9O3RJD0MI/UcAmRfFQBMI/AAAAAAAAC0s/uS47fqc-QZU/s687/rtf-textframe-table-word2007.png"&gt;
&lt;img src="https://lh6.googleusercontent.com/-5s9O3RJD0MI/UcAmRfFQBMI/AAAAAAAAC0s/uS47fqc-QZU/s400/rtf-textframe-table-word2007.png" alt="https://lh6.googleusercontent.com/-5s9O3RJD0MI/UcAmRfFQBMI/AAAAAAAAC0s/uS47fqc-QZU/s400/rtf-textframe-table-word2007.png" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Other than that, there were a few other topics I hacked on:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
various additional fixes for
  &lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=58819"&gt;fdo#58819&lt;/a&gt;, so watermark
  is exported (with correct size, position, rotation, opacity, etc.), and
  reasonably imported
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the last character of the git hash is no longer missing from the about dialog
  (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=216fe5cf3c41713fa2a11731e4c3d514236b2480"&gt;commit&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
number of leaking files when running the writer filter tests is now down to 2
  from 527
  (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=c03a1e46460e4255d7709df9ba8147947f66acfb"&gt;commit&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
RTF import of text frame&amp;#8217;s AutoSize property
  (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=aa0f3ca1cd285e8ffbc10de5510d447a72de980a"&gt;commit&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
File &amp;#8594; Properties &amp;#8594; Security &amp;#8594; Record Changes is now imported and exported
  in the RTF filter
  (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=ae85b56a9a18657a57fd5033faff34e7ee4ff2f8"&gt;commit&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
finally added UI for fine dashing&amp;#8201;&amp;#8212;&amp;#8201;so not only existing documents are
  rendered correctly, but you can create such documents as well
  (&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=4c3d2dcdadbcb8f2ffc2caab07d50a286341df96"&gt;commit&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see some photos &lt;a href="https://picasaweb.google.com/104737754628780823336/20130617_Hamburg"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last, but not at least, thank you Eike and Bjoern for organizing this event! :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/lo-hamburg-hackfest-2013.html</link>
            <pubDate>Tue, 18 Jun 2013 11:44:53 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/lo-hamburg-hackfest-2013.html</guid>
        </item>
        <item>
            <title>Free Software Conference and Exhibition 2013</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="http://konf.fsf.hu/cgis/ossc/2013/"&gt;
&lt;img src="https://lh6.googleusercontent.com/-uoQeGkRqjrA/UbRVYVbk25I/AAAAAAAACzE/sOVvcUNZpc4/s400/konf2013_logo_web.png" alt="https://lh6.googleusercontent.com/-uoQeGkRqjrA/UbRVYVbk25I/AAAAAAAACzE/sOVvcUNZpc4/s400/konf2013_logo_web.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Free Software Conference and Exhibition 2013&amp;#8201;&amp;#8212;&amp;#8201;organized by FSF.hu&amp;#8201;&amp;#8212;&amp;#8201;was held yesterday @
Budapest. I gave a talk about hacking on Writer file format problems
(&lt;a href="https://speakerdeck.com/vmiklos/libreoffice-writer-fajlformatum-problemak-es-megoldasuk"&gt;slides&lt;/a&gt;), this time in Hungarian.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After the talk I also held a one-hour workshop, showing how to start hacking on LO in practice:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
first we did a build (using package manager to install dependencies, git clone, autogen, make, make dev-install)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
then we did the &lt;a href="http://wiki.openoffice.org/wiki/Hacking#My_first_hack"&gt;vcl Menu::SetItemText() hack&lt;/a&gt;&amp;#8201;&amp;#8212;&amp;#8201;actually using &lt;code&gt;comphelper::string::reverseString()&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
finally I spent some time explaining a few bugfixes from the recent past: I explained a &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=a22ef599bd3fdcf0bd5c3616aa566a5922624ff3"&gt;VML import problem&lt;/a&gt;, an &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=3d4fef85d05269e613316a7af6245f05d207d76e"&gt;RTF import problem&lt;/a&gt;, a &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=4144cd5a851466778004af9de98dbcfb019067bb"&gt;WW8 export mismerge&lt;/a&gt;, finally a &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=f06cc552a0699f7c2c34db981e77d4c8efe5e9e7"&gt;WW8 import issue&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We (with Andras Timar and Tamas Zolnai) also ran the LibreOffice booth. This
year speakers got a free t-shirt and lunch, thanks for the organizers! :)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/szszk-2013.html</link>
            <pubDate>Sun, 09 Jun 2013 12:31:35 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/szszk-2013.html</guid>
        </item>
        <item>
            <title>DOC support in mso-dumper</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://cgit.freedesktop.org/libreoffice/contrib/mso-dumper/"&gt;mso-dumper&lt;/a&gt; is a
project that creates some&amp;#8201;&amp;#8212;&amp;#8201;more or less human-readable&amp;#8201;&amp;#8212;&amp;#8201;dump from binary
files. Initially Kohei Yoshida developed it to dump XLS, then Thorsten Behrens
added support for PPT files, finally during last November I started to add DOC
support.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You may ask: why that is useful? My answer is that I spend quite some time on
the import/export filters of LibreOffice Writer, and to be able to improve or
fix such filters, some knowledge of the file format in question and Writer
internals is needed. Regarding the file format knowledge, I find it much easier
to read the specification once and implement some simple dumper based on that&amp;#8201;&amp;#8212;&amp;#8201;than reading the specification again and again, and just trying to
understand what&amp;#8217;s going on inside a binary file using a hex editor.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To my knowledge, such a dumper for the DOC format (in particular the WW8
version of it) did not exist previously.
&lt;a href="http://gitorious.org/ww8dumper"&gt;WW8Dumper&lt;/a&gt; was the closest match, but that was
far from complete and I found extending mso-dumper easier.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To stress-test the parser, I used
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/bin/get-bugzilla-attachments-by-mimetype"&gt;get-bugzilla-attachments-by-mimetype&lt;/a&gt;
to get all DOC attachements from the Freedesktop bugzilla, and during the last
days I fixed the remaining crashes (actually this is why I write this post now
;-) ). If you want to try it out you can do so by:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;git clone git://anongit.freedesktop.org/libreoffice/contrib/mso-dumper
cd mso-dumper
./doc-dump.py /path/to/doc/file.doc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The idea is that on any input the dumper should not crash: instead either it
should give you usable result, or in case some unhandled structure is reached,
it should print a &lt;code&gt;&amp;lt;todo&amp;gt;&lt;/code&gt; XML tag. Other than that, of course patches welcome&amp;#8201;&amp;#8212;&amp;#8201;that said, Maxime de Roucy already contributed a patch to the DOC part of
mso-dumper, thanks! :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/mso-dumper.html</link>
            <pubDate>Sun, 26 May 2013 18:01:38 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/mso-dumper.html</guid>
        </item>
        <item>
            <title>Hackweek 9</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh6.googleusercontent.com/-o4L02197n38/UW-lp9UHX2I/AAAAAAAACiU/XetdnZpBpp4/s700/hackweek.jpg"&gt;
&lt;img src="https://lh6.googleusercontent.com/-o4L02197n38/UW-lp9UHX2I/AAAAAAAACiU/XetdnZpBpp4/s400/hackweek.jpg" alt="https://lh6.googleusercontent.com/-o4L02197n38/UW-lp9UHX2I/AAAAAAAACiU/XetdnZpBpp4/s400/hackweek.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last week was &lt;a href="http://hackweek.suse.com/"&gt;Hackweek&lt;/a&gt; at SUSE&amp;#8201;&amp;#8212;&amp;#8201;below is a quick
summary on what experiments did I do during that timeframe.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_lcov"&gt;lcov&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I did some experiments with using lcov on the LibreOffice codebase. The goal is
to have a quick iteration, so you can see the current coverage of a file or a
directory, select a method that is not yet tested, add a test for it, and
"test" the test by checking if the coverage indeed got improved. As a first
step, I tried this out on the Writer RTF import:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;cd writerfilter
touch source/rtftok/*
make -sr -j8 gb_GCOV=YES &lt;b&gt;&amp;lt;1&amp;gt;&lt;/b&gt;
cd ../sw; make -sr -j8 CppunitTest_sw_rtfexport CppunitTest_sw_rtfimport &lt;b&gt;&amp;lt;2&amp;gt;&lt;/b&gt;
lcov --directory workdir/unxlngx6/CxxObject/writerfilter/source/rtftok/ --capture --output-file libreoffice.info &lt;b&gt;&amp;lt;3&amp;gt;&lt;/b&gt;
genhtml -o coverage libreoffice.info &lt;b&gt;&amp;lt;4&amp;gt;&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="colist arabic"&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
rebuild selected files with lcov options
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
run the tests
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
extract coverage information to a single .info file
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
generate some nice HTML output from the .info file
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="admonitionblock"&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;lcov
&lt;a href="https://build.opensuse.org/project/show?project=openSUSE%3AMaintenance%3A1336"&gt;had
problems&lt;/a&gt; with gcc-4.7, fully updated openSUSE 12.2 or 12.3 is known to work.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There is a
&lt;a href="http://cgit.freedesktop.org/libreoffice/contrib/dev-tools/plain/lcov/coverage.sh"&gt;script&lt;/a&gt;
available to make the above a bit more automated.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The speed of the above depends on the amount of code needing a rebuild + the
number of tests, but it should not take more than a minute.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;E.g. I noticed the bookmark import code isn&amp;#8217;t tested, added a
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=7b515a57eb6a644860715018656ac0b843b62baf"&gt;test
for it&lt;/a&gt;, and that indeed improved the line coverage of rtfdocumentimpl.cxx:
84.1% &amp;#8594; 85.0%.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A next area I wanted to test is the Writer RTF export. Let&amp;#8217;s pick something in
rtfattributeoutput.cxx&amp;#8230; StartURL() is not tested, so a
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=85c8252e13e9234253494f96ffd70df35be056dc"&gt;hyperlink
testcase&lt;/a&gt; should help. Indeed it did: 50.2% &amp;#8594; 52.0%.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last, but not at least, thanks to Norbert Thiebaud, who added &lt;code&gt;gb_GCOV&lt;/code&gt; to
gbuild.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_gdb_pretty_printers"&gt;gdb pretty-printers&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then I experimented with improving our Writer gdb Python pretty-printers. One
annoying shortcoming was the lack of handling uno::Reference&amp;lt;text::XTextRange&amp;gt;.
Imagine one searches for a bug related to table import for DOCX or RTF. One
idea is to check the arguments of the convertToTable() method call. The first
argument is a 2D array of XTextRange pairs, that describe what will be the
input for cell contents. So if you want to check the first cell, you do
something like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;(gdb) b DomainMapperTableHandler.cxx:798
(gdb) r
(gdb) print (*m_pTableSeq)[0][0]
$1 = uno::Sequence of length 2 = {uno::Reference to (XInterface) 0x1a73648, uno::Reference to (XInterface) 0x1a77f68}
(gdb) print (*m_pTableSeq)[0][0][0]
$2 = uno::Reference to (XInterface) 0x1a73648
(gdb) print (*m_pTableSeq)[0][0][1]
$3 = uno::Reference to (XInterface) 0x1a77f68&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Not that helpful. Here is how one could work it around:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;(gdb) print (*m_pTableSeq)[0][0][0]._pInterface-&amp;gt;m_pImpl-&amp;gt;m_pMark-&amp;gt;m_pPos1
$4 = boost::scoped_ptr SwPosition (node 10, offset 0)
(gdb) print (*m_pTableSeq)[0][0][1]._pInterface-&amp;gt;m_pImpl-&amp;gt;m_pMark-&amp;gt;m_pPos1
$5 = boost::scoped_ptr SwPosition (node 10, offset 20)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But this is not something anyone will remember. After adding a few new
pretty-printers, now it&amp;#8217;s like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;(gdb) print (*m_pTableSeq)[0][0]
$1 = uno::Sequence of length 2 = {uno::Reference to (SwXTextRange *) 0x1a72b98, uno::Reference to (SwXTextRange *) 0x1a773b8}
(gdb) print *(*m_pTableSeq)[0][0][0]._pInterface
$2 = (SwXTextRange) SwXTextRange sw::UnoImplPtr SwXTextRange::Impl = {mark = sw::mark::IMark = {pos1 = boost::scoped_ptr SwPosition (node 10, offset 0), pos2 = empty boost::scoped_ptr}}
(gdb) print *(*m_pTableSeq)[0][0][1]._pInterface
$3 = (SwXTextRange) SwXTextRange sw::UnoImplPtr SwXTextRange::Impl = {mark = sw::mark::IMark = {pos1 = boost::scoped_ptr SwPosition (node 10, offset 20), pos2 = empty boost::scoped_ptr}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Technically, it would be possible to make &lt;code&gt;print (*m_pTableSeq)[0][0][0]&lt;/code&gt; work
as well, but for a larger class without a pretty-printer that would result in
multiple pages of output. Anyway, &lt;code&gt;_pInterface&lt;/code&gt; is the same for all UNO
objects, so something that is not too hard to remember.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An other improvement is the XTextCursor pretty-printer. Example usage:
debugging of the commented text range ODF import. Before:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;(gdb) b txtfldi.cxx:559
(gdb) print *rHlp.GetCursor()._pInterface-&amp;gt;m_pImpl-&amp;gt;pRegisteredIn-&amp;gt;m_pMark
$1 = SwPosition (node 9, offset 4)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After the new pretty-printers one doesn&amp;#8217;t have to type that much:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;(gdb) print *rHlp.GetCursor()._pInterface
$1 = (SwXTextCursor)
    SwXTextCursor sw::UnoImplPtr SwXTextCursor::Impl = {registeredIn = SwModify = {point = SwPosition (node 9, offset 4), mark = SwPosition (node 9, offset 4), next = 0x1a28b88, prev = 0x1a28b88}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_rtf_filter_text_frame_rework"&gt;RTF filter text frame rework&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, I experimented with reworking the textframe code in the RTF filter. In
short, the motivation is to bring the RTF filter in sync with the OOXML one,
which can nicely import and export text box gradients. To get there, there are
3 different problems to solve:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
The RTF import filter currently imports rectangle and textbox shapes as
  drawinglayer rectangles, even if they have some text inside. Just like the
  OOXML import filter, we would better import these shapes as Writer textframes,
  as long as they contain some text.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The RTF export writes Writer textframes as old-style Word frames, not as text
  box shapes. This should be changed, as the old syntax doesn&amp;#8217;t support
  gradients, and in general both the DOC and DOCX export filters already export
  new-style Word frames, so there is no reason why the RTF filter would not do
  the same.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Once all the above is done, add support for gradients in the RTF filter, in a
  similar way OOXML filters were already improved to handle gradients.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Once this all is done, add new testcases to cover the new code.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First I had hacked on #1, sadly Writer textframes and drawinglayer rectangles
don&amp;#8217;t share the exactly same UNO API, like drawinglayer has &lt;code&gt;TextWritingMode&lt;/code&gt;
and a &lt;code&gt;Name&lt;/code&gt; property, Writer textframes have a &lt;code&gt;WritingMode&lt;/code&gt; property instead,
and additionally they implement the &lt;code&gt;XNamed&lt;/code&gt; UNO interface, etc.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then I switched to #3&amp;#8201;&amp;#8212;&amp;#8201;there I managed to reuse our existing VML import to do
the hard work: the RTF tokenizer reads the RTF shape properties, then
constructs the same VML model what is normally built from v:fill and v:shadow
XML elements inside DOCX files, finally the VML import does the mapping of
Word&amp;#8217;s gradient concept to the Writer gradient concept.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;At the end of the week I also hacked on #2 and #4&amp;#8201;&amp;#8212;&amp;#8201;and while I did so, I
noticed two more interesting details of Word&amp;#8217;s new-style RTF textframe markup:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The bad news: Writer supports having different top/left/bottom/right borders,
  RTF still just supports the concept of a single line around the textframe.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The good news: old-style RTF frames didn&amp;#8217;t support different left/right or
  top/bottom external margins, but Writer does&amp;#8201;&amp;#8212;&amp;#8201;so now using the new syntax,
  this is exported properly.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_git"&gt;git&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Unrelated to the above, I
&lt;a href="http://git.kernel.org/cgit/git/git.git/commit/?id=21246dbb9e0af278bc671e32e45a6cae4ad38b6f"&gt;fixed&lt;/a&gt;
an annoying git bug, when one tried to cherry-pick multiple commits at the same
time, and copy&amp;amp;paste went wrong, the "unrecognized" arguments were just
silently ignored. Now one gets an error instead.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_docs_libreoffice_org"&gt;docs.libreoffice.org&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In parallel to the above, Thorsten was kind enough to explain how to update
&lt;a href="http://docs.libreoffice.org/"&gt;docs.libreoffice.org&lt;/a&gt;: The new output is generated
using doxygen 1.8, it contains a bit more eye-candy. E.g. notice the new
foldable subsections
&lt;a href="http://docs.libreoffice.org/sw/html/classSwUnoCrsr.html"&gt;here&lt;/a&gt;. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/hackweek-9.html</link>
            <pubDate>Mon, 15 Apr 2013 17:31:35 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/hackweek-9.html</guid>
        </item>
        <item>
            <title>LibreOffice Writer now supports graphic bullets in its DOCX/RTF filters</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh5.googleusercontent.com/-fhN5_7nf5A8/UWG83Z5qLqI/AAAAAAAAChY/cehOqHVomas/s628/ooxml-graphic-bullet.png"&gt;
&lt;img src="https://lh5.googleusercontent.com/-fhN5_7nf5A8/UWG83Z5qLqI/AAAAAAAAChY/cehOqHVomas/s400/ooxml-graphic-bullet.png" alt="https://lh5.googleusercontent.com/-fhN5_7nf5A8/UWG83Z5qLqI/AAAAAAAAChY/cehOqHVomas/s400/ooxml-graphic-bullet.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you ever tried to use graphical bullets in Writer (Format &amp;#8594; Bullets and
Numbering &amp;#8594; Graphics), you may have noticed that only the ODF filter can load
and save such a numbering. This is now improved a lot. Motivated by seeing this
is now handled in the binary DOC filter, I now added support for this also to
the DOCX and RTF import and export filters. If you want to play with this
feature, core.git also contains a
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/plain/sw/qa/extras/ooxmlexport/data/i120928.docx"&gt;DOCX&lt;/a&gt;
and an
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/plain/sw/qa/extras/rtfexport/data/i120928.rtf"&gt;RTF&lt;/a&gt;
sample as well.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/graphic-bullets.html</link>
            <pubDate>Sun, 07 Apr 2013 20:46:36 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/graphic-bullets.html</guid>
        </item>
    </channel>
</rss>
