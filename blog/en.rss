<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking - Tags: en</title>
        <description></description>
        <link>http://vmiklos.hu/blog/</link>
        <item>
            <title>LibreOffice session at DevTalks Jr.</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://farm6.staticflickr.com/5687/30900149756_0abd3a3218_z.jpg"/&gt;
&lt;p&gt;(via &lt;a href="https://twitter.com/DevTalksRo/status/797429977968939008"&gt;DevTalksRo&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Today I gave a
&lt;a href="https://speakerdeck.com/vmiklos/getting-involved-with-libreoffice-online-and-android"&gt;Getting
involved with LibreOffice Online and Android&lt;/a&gt; session at
&lt;a href="http://www.devtalks.ro/bucharest/devtalks-jr/"&gt;DevTalks Jr&lt;/a&gt;, Bucharest. The
event had two tracks in parallel, with a total attendees of about 200
developers.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Some photos I took after the event are &lt;a href="https://www.flickr.com/photos/vmiklos/sets/72157675071819211/"&gt;available&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks the organizers and sponsors for the great event! :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/devtalks.html</link>
            <pubDate>Sat, 12 Nov 2016 16:22:19 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/devtalks.html</guid>
        </item>
        <item>
            <title>Insert PDF as image in LibreOffice 5.3</title>
            <description>&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;LibreOffice 5.3 will add one more vector-based format that can be inserted as
an image into documents: PDF. First, thanks to &lt;a href="http://pmg.be/"&gt;PMG&lt;/a&gt; who made
this work possible. On the user interface you can now select PDF files when
you choose e.g. Writer&amp;#8217;s Insert &amp;#8594; Image option:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm6.staticflickr.com/5552/29583461353_0c2da79c8e_o.png"&gt;
&lt;img src="https://farm6.staticflickr.com/5552/29583461353_02fc75dd7f_z.jpg" alt="https://farm6.staticflickr.com/5552/29583461353_02fc75dd7f_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first page of the PDF document will be shown, which is handy if the PDF
file is basically used as a vector image format.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Similarly to the SVG feature, the original vector image is stored in the
document, but when saving to ODF, a replacement PNG file is also generated to
be backwards compatible with older ODF readers. The image context menu &amp;#8594; Save
menu item allows to extract your original PDF data from the image, too:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm8.staticflickr.com/7501/30098334712_569ebbe55b_o.png"&gt;
&lt;img src="https://farm8.staticflickr.com/7501/30098334712_535e16ea05_z.jpg" alt="https://farm8.staticflickr.com/7501/30098334712_535e16ea05_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And that&amp;#8217;s it, as long as you save your document in ODF, your PDF-as-an-image
will be kept without loosing any data. As usual, you can try this right now
with a 5.3 &lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, if you&amp;#8217;re interested in how this is implemented, keep reading&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_document_model"&gt;Document model&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The PDF image in the document model is really similar to how SVG is handled,
next to &lt;code&gt;Graphic::getSvgData()&lt;/code&gt;, there is now a &lt;code&gt;Graphic::getPdfData()&lt;/code&gt;.
This new member function exposes the original PDF data, otherwise the Graphic
is just a metafile.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_uno_api"&gt;UNO API&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;code&gt;ReplacementGraphicURL&lt;/code&gt; property of the image at an UNO level now exposes
the generated metafile for PDF images. This is implemented for both Draw and
Writer images, and is used by the ODF export filter.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_layout"&gt;Layout&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the &lt;code&gt;Graphic&lt;/code&gt; instance is rendered, the layout knows nothing about the
PDF data attached to the object, only parses the generated metafile. This way
the display of the PDF image works out of the box.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_filters"&gt;Filters&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First I&amp;#8217;ve implemented a
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commit;h=878a860dff10bd91491d6c9f2f4e2308bfe4f0b2"&gt;PDF
import-as-graphic filter&lt;/a&gt;, then the
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commit;h=7d76bb251e0c88ff17282a33b801a5d17a434af5"&gt;export
equivalent of it&lt;/a&gt;. As you can see, the PDF import-as-graphic filter isn&amp;#8217;t too
complicated, it completely reuses the existing "import PDF into Draw" filter,
it simply copies the first page of the resulting document model as a metafile.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, once the graphic filters were working, I&amp;#8217;ve also
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=d1c346ba848c54424d6ffa88df7a5ff6a3717430"&gt;improved&lt;/a&gt;
the ODF import to recognize PDF data&amp;#8201;&amp;#8212;&amp;#8201;the export side needed no explicit
work, once the &lt;code&gt;ReplacementGraphicURL&lt;/code&gt; bits were in place.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_tests"&gt;Tests&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As mentioned above, the Draw and the Writer image implementation is separate,
so first I&amp;#8217;ve added tests for ODT files in the &lt;code&gt;testEmbeddedPdf&lt;/code&gt; of
&lt;code&gt;CppunitTest_sw_odfexport&lt;/code&gt;, and then &lt;code&gt;SdExportTest::testEmbeddedPdf()&lt;/code&gt; to
cover ODP files (and other ODF formats).  Second, the PDF part of the graphic
swapout/in code has a dedicated test in &lt;code&gt;GraphicObjectTest::testPdf()&lt;/code&gt;, and
the UI&amp;#8217;s "Save original PDF" feature has a new
&lt;code&gt;XOutdevTest::testPdfGraphicExport()&lt;/code&gt; test.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Oh, and if you intent to test this manually in a self-created build, make sure
to avoid &lt;code&gt;--disable-pdfimport&lt;/code&gt;, otherwise this feature can&amp;#8217;t work. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/lo-insert-pdf-image.html</link>
            <pubDate>Mon, 10 Oct 2016 08:31:37 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/lo-insert-pdf-image.html</guid>
        </item>
        <item>
            <title>Small capitals toolbar button in LibreOffice Writer</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm6.staticflickr.com/5235/29982452081_a9ca103f2f_o.png"&gt;
&lt;img src="https://farm6.staticflickr.com/5235/29982452081_187d99dece_z.jpg" alt="https://farm6.staticflickr.com/5235/29982452081_187d99dece_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It was &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=87914"&gt;requested&lt;/a&gt; to
be able to set the small capitals character property via a toolbar button in
Writer, which was indeed not possible. Not only the toolbar button wasn&amp;#8217;t
there, but the underlying UNO command was also missing (which you can use e.g.
from a macro to format the current selection).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So my
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commit;h=d378cd2f766eeb1fd1c98f62c9ae6b5b59fd00f1"&gt;commit&lt;/a&gt;
added a simple set of icons to the galaxy theme for the new toolbar button,
defined the new UNO command for Writer text and added it to Writer&amp;#8217;s text
object bar, next to the upper case and lower case buttons (hidden by default).
One difference from those buttons is that those buttons perform a
transliteration, while this one really just sets a character property, you can
easily undo the property later if needed.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Wrt. other icon themes, see
&lt;a href="http://listarchives.libreoffice.org/global/design/msg07922.html"&gt;this mail&lt;/a&gt;,
hopefully the design team can help there.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, you can try this right now with a 5.3
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/sw-smallcaps-toolbar-button.html</link>
            <pubDate>Mon, 03 Oct 2016 08:25:39 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/sw-smallcaps-toolbar-button.html</guid>
        </item>
        <item>
            <title>Using clang-based tools beyond loplugin LOCon lightning talk</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://speakerd.s3.amazonaws.com/presentations/731c4bb5277c48d8acbba1c867ece856/clang-locon-brno-2k16.pdf"&gt;
&lt;img src="https://farm9.staticflickr.com/8074/29618061316_308e7e9b30_z.jpg" alt="https://farm9.staticflickr.com/8074/29618061316_308e7e9b30_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The last week I gave a
&lt;a href="http://conference.libreoffice.org/2016/the-program/sept-9th-friday/"&gt;Using
clang-based tools beyond loplugin&lt;/a&gt; lightning talk at LibreOffice conference
2016, on the last day. Click on the image to see all the slides.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you&amp;#8217;re a vim or emacs user and you work with C++11 code, you probably
want to have a look at
&lt;a href="http://clang.llvm.org/extra/clang-rename.html"&gt;clang-rename&lt;/a&gt;,
&lt;a href="http://clang.llvm.org/extra/include-fixer.html"&gt;include-fixer&lt;/a&gt; and some editor
plugin exposing the power of libclang (like
&lt;a href="https://valloric.github.io/YouCompleteMe/"&gt;YouCompleteMe&lt;/a&gt; or
&lt;a href="https://github.com/libclang-vim/libclang-vim"&gt;libclang-vim&lt;/a&gt;), sometimes these
are really helpful.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/clang-locon-brno-2k16.html</link>
            <pubDate>Tue, 13 Sep 2016 14:37:44 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/clang-locon-brno-2k16.html</guid>
        </item>
        <item>
            <title>A year in LibreOffice's RTF support LOCon talk</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://speakerd.s3.amazonaws.com/presentations/65dac04a99f146649b08cf66211469fd/rtf-locon-brno-2k16.pdf"&gt;
&lt;img src="https://farm9.staticflickr.com/8004/29626765785_7f35c9bfd6_z.jpg" alt="https://farm9.staticflickr.com/8004/29626765785_7f35c9bfd6_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last week I gave a
&lt;a href="http://conference.libreoffice.org/2016/the-program/sept-8th-thursday/"&gt; year in
LibreOffice&amp;#8217;s RTF support&lt;/a&gt; talk at LibreOffice conference 2016, in the
development track. Click on the image to see all the slides.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve also published a number of (mostly)
&lt;a href="https://www.flickr.com/photos/vmiklos/albums/72157673517450165"&gt;sightseeing
pictures&lt;/a&gt; based on wondering around in Brno before and after the conference.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/rtf-locon-brno-2k16.html</link>
            <pubDate>Mon, 12 Sep 2016 09:55:00 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/rtf-locon-brno-2k16.html</guid>
        </item>
        <item>
            <title>Collaborative editing using LibreOfficeKit LOCon talk</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://speakerd.s3.amazonaws.com/presentations/035a8c526e5b4748a062a266cd4ffd94/collaborative-locon-brno-2k16.pdf"&gt;
&lt;img src="https://farm9.staticflickr.com/8830/29558170685_8aa768ec84_z.jpg" alt="https://farm9.staticflickr.com/8830/29558170685_8aa768ec84_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Yesterday I gave a
&lt;a href="http://conference.libreoffice.org/2016/the-program/sept-8th-thursday/"&gt;Collaborative
editing using LibreOfficeKit&lt;/a&gt; talk at LibreOffice conference 2016, in the
development track. There were many interested parties&amp;#8201;&amp;#8212;&amp;#8201;not a surprise, as
this is the power horse behind LibreOffice Online. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/collaborative-locon-brno-2k16.html</link>
            <pubDate>Fri, 09 Sep 2016 09:45:33 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/collaborative-locon-brno-2k16.html</guid>
        </item>
        <item>
            <title>Improved digital signature handling in LibreOffice LOCon talk</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://speakerd.s3.amazonaws.com/presentations/d7946ac560054fcb9f9a3953f079d9a7/xmlsec-locon-brno-2k16.pdf"&gt;
&lt;img src="https://farm9.staticflickr.com/8646/29432546522_585a16f89a_z.jpg" alt="https://farm9.staticflickr.com/8646/29432546522_585a16f89a_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Earlier today I gave a
&lt;a href="http://conference.libreoffice.org/2016/the-program/sept-8th-thursday/"&gt;Improved
digital signature handling in LibreOffice&lt;/a&gt; talk at LibreOffice conference
2016, in the development track. The room was well-crowded&amp;#8201;&amp;#8212;&amp;#8201;seems this year
classification was a hot topic. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Quite some pictures are now available &lt;a href="https://twitter.com/libreoffice"&gt;on&lt;/a&gt;
&lt;a href="https://twitter.com/CollaboraOffice"&gt;Twitter&lt;/a&gt;, don&amp;#8217;t miss them.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/locon2016.html</link>
            <pubDate>Thu, 08 Sep 2016 15:45:30 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/locon2016.html</guid>
        </item>
        <item>
            <title>LibreOffice now bundles the latest libxmlsec version</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;I wrote about how LibreOffice uses the &lt;a href="https://www.aleksey.com/xmlsec/"&gt;XMLSec
Library&lt;/a&gt; in an
&lt;a href="http://vmiklos.hu/blog/libreoffice-sha256-signatures.html"&gt;earlier post&lt;/a&gt; from
March. There are two long-term goals regarding xmlsec in LibreOffice:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
bundle the latest xmlsec version, instead the one from 2009
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
upstream enough of the patches, so building &amp;amp; running against xmlsec as
  provided by a Linux distro also works
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;m happy to say that the first goal is now reached:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
libreoffice-5-1 bundled xmlsec 1.2.14 from 2009
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
libreoffice-5-2 bundles xmlsec 1.2.20 from 2014
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
master bundles the latest xmlsec 1.2.22, released earlier this year :-)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is good, as this way it&amp;#8217;s easier to integrate xmlsec upstream
improvements into LibreOffice in the future.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Regarding the other goal, shrinking the patch list is still to be done. ;-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/libreoffice-xmlsec.html</link>
            <pubDate>Fri, 05 Aug 2016 09:13:51 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/libreoffice-xmlsec.html</guid>
        </item>
        <item>
            <title>A LibreOffice / AddressSanitizer setup</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://github.com/google/sanitizers"&gt;sanitizers&lt;/a&gt; (ASAN, UBSAN, etc.) is a
collection of tools to detect memory corruption bugs, undefined behavior and
more by instrumenting the code generated by the compiler. (That&amp;#8217;s the main
difference from valgrind.) From LibreOffice&amp;#8217;s perspective one more important
difference is that there is a
&lt;a href="http://ci.libreoffice.org/job/lo_ubsan/"&gt;Jenkins_Linux_Ubsan&lt;/a&gt; tinderbox that
makes sure that the master branch is kept clean from errors detected by a
given configuration.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So when the tinderbox failed after a commit of mine, I wanted to set up a
similar environment locally, reproduce and fix the bug, and push the fix once
I saw that the fix indeed solves the problem. You can set many options both at
build and runtime, so while we have some
&lt;a href="https://wiki.documentfoundation.org/Development/-fsanitize"&gt;documentation&lt;/a&gt; on
the TDF wiki (and also Stephan was kind enough to share
&lt;a href="https://people.freedesktop.org/~vmiklos/2016/sanitizers-config-sberg"&gt;his
config&lt;/a&gt;) on how to use these sanitizers, it wasn&amp;#8217;t clear to me what to do step
by step. So here is one possible setup that worked for me&amp;#8201;&amp;#8212;&amp;#8201;in my case I
wanted to reproduce a stack-use-after-return problem. If you haven&amp;#8217;t ever built
LibreOffice before, then go to
&lt;a href="https://wiki.documentfoundation.org/Development"&gt;the Development wiki page&lt;/a&gt;,
first do a normal build, and if everything went fine, came back here.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_build_options"&gt;Build options&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My &lt;code&gt;autogen.input&lt;/code&gt; looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;CC=clang -fsanitize=address
CXX=clang++ -fsanitize=address
--enable-dbgutil
--disable-firebird-sdbc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Which is a normal clang debug build, except:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
you need to add &lt;code&gt;-fsanitize=...&lt;/code&gt; to &lt;code&gt;CXX&lt;/code&gt; (not to &lt;code&gt;CXXFLAGS&lt;/code&gt;), as explained
  on the wiki
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
you need to explicitly disable Firebird integration for now
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_building"&gt;Building&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My first attempt failed at build time, as even the tools used only during the
build are instrumented, and some memory leak was detected there, which means
the build aborted before reaching the problem I was interested in. To disable
leak detection during build, and disable parallelism (I needed this, as I did
the build in the background while using the machine for something else):&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;make build-nocheck ASAN_OPTIONS=detect_leaks=0 PARALLELISM=1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This also means that I explicitly disabled running any tests, as I knew which
is the single unit test I want to run for the purposes of reproducing and
fixing the problem.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_testing"&gt;Testing&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Once the build completed, it turns out that the stack-use-after-return detection is disabled at runtime by default, which means I could not see any problem locally. Here is the commandline to run one specific CppunitTest with this detection on:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;cd sw; make -sr CppunitTest_sw_tiledrendering ASAN_OPTIONS=detect_leaks=0:detect_stack_use_after_return=1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Again, this is just one possible setup, you can use other &lt;code&gt;-fsanitize=...&lt;/code&gt;
options, other environment variables during build and during testing&amp;#8201;&amp;#8212;&amp;#8201;but
hopefully it helps in the future to avoid pushing fixes for such problems
detected by sanitizers just blindly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/libreoffice-asan-setup.html</link>
            <pubDate>Mon, 25 Jul 2016 09:52:14 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/libreoffice-asan-setup.html</guid>
        </item>
        <item>
            <title>On LibreOffice's ViewContact/ViewObjectContact/ObjectContact</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm9.staticflickr.com/8833/28305552801_1d518e31ae_o.png"&gt;
&lt;img src="https://farm9.staticflickr.com/8833/28305552801_21343667ff_z.jpg" alt="https://farm9.staticflickr.com/8833/28305552801_21343667ff_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve recently
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commit;h=ac0b3b05ab52d0ac06137cf93d71187c7957ec99"&gt;fixed&lt;/a&gt;
a missing-repaint problem in LibreOffice&amp;#8217;s headless backend, but the root
cause wasn&amp;#8217;t close to the symptom I saw first. Part of the debugging process
was to understand what&amp;#8217;s the relation between &lt;code&gt;sdr::contact::ViewContact&lt;/code&gt;,
&lt;code&gt;sdr::contact::ViewObjectContact&lt;/code&gt; and &lt;code&gt;sdr::contact::ObjectContact&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;See
&lt;a href="http://www.openoffice.org/marketing/ooocon2006/presentations/wednesday_g11.odp"&gt;this
old presentation&lt;/a&gt; and the &lt;a href="https://gerrit.libreoffice.org/27190"&gt;review of my
documentation update&lt;/a&gt; for the details, but the short version is that:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
somewhat confusingly, &lt;code&gt;sdr::contact::ViewContact&lt;/code&gt; is part of the &lt;strong&gt;model&lt;/strong&gt;, and
  there is one &lt;code&gt;sdr::contact::ViewContact&lt;/code&gt; object per shape
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;sdr::contact::ViewObjectContact&lt;/code&gt; is part of a view, and there is one
  &lt;code&gt;sdr::contact::ViewObjectContact&lt;/code&gt; per shape, per view
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
finally &lt;code&gt;sdr::contact::ObjectContact&lt;/code&gt; is part of a &lt;strong&gt;view&lt;/strong&gt;, and there is one
  &lt;code&gt;sdr::contact::ObjectContact&lt;/code&gt; per view
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So the answer to my original &lt;em&gt;Is it normal that I have two object contacts and
a single view contact for a shape and two views?&lt;/em&gt; question is: yes, that&amp;#8217;s
expected. ;-) Hopefully the updated documentation is now more clear, the
incorrect 1:N relation in the original class diagram first confused me.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/vc-voc-oc.html</link>
            <pubDate>Mon, 18 Jul 2016 10:17:03 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/vc-voc-oc.html</guid>
        </item>
    </channel>
</rss>
