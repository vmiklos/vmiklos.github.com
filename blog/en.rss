<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking - Tags: en</title>
        <description></description>
        <link>http://vmiklos.hu/blog/</link>
        <item>
            <title>ctags vs override/SAL_OVERRIDE</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-9Hd40EVT8aw/VZBhBTZQdTI/AAAAAAAAFyM/AfymfTqKDFw/s0/" alt="https://lh3.googleusercontent.com/-9Hd40EVT8aw/VZBhBTZQdTI/AAAAAAAAFyM/AfymfTqKDFw/s0/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you use &lt;a href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt; to help your LibreOffice
development, there are already good descriptions for that&amp;#8201;&amp;#8212;&amp;#8201;e.g. for vim
there is one &lt;a href="https://wiki.documentfoundation.org/Development/Vim#ctags"&gt;on the
TDF wiki&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What was problematic is that since C++11, &lt;code&gt;override&lt;/code&gt; is a valid keyword
after a member function declaration, and we have our &lt;code&gt;SAL_OVERRIDE&lt;/code&gt; macro that
I
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=3891d323cdc3c03154f5682baaeaa4b2ef015a63"&gt;added&lt;/a&gt;
to be able to use it before all our supported compilers recognize it.
Unsupported parsers include ctags, so if a member function have SAL_OVERRIDE,
ctags only indexed the definition, not the declaration.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I created patches to fix these problems in ctags, the
&lt;a href="https://sourceforge.net/p/ctags/bugs/367/"&gt;override one&lt;/a&gt; is probably
interesting for all C++ projects, the
&lt;a href="https://github.com/vmiklos/ctags/commit/ef53a231db5b428585324f266072b884e17bae52"&gt;SAL_OVERRIDE
one&lt;/a&gt; is LibreOffice-specific.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The hope is that the later will go away in the long run, so it won&amp;#8217;t really be
a problem that ctags do not recognize that macro out of the box. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/ctags-sal-override.html</link>
            <pubDate>Mon, 29 Jun 2015 09:29:56 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/ctags-sal-override.html</guid>
        </item>
        <item>
            <title>Cleanup of resourcemodel in LibreOffice</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh3.googleusercontent.com/-YxMHx754A4A/VXQbB0-TMBI/AAAAAAAAFos/Nx6SlKp1JF4/s400/"/&gt;
&lt;p&gt;(via &lt;a href="https://www.flickr.com/photos/jbparrott/9381120992/"&gt;jbparrott&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;code&gt;libreoffice-5-0&lt;/code&gt; branch is created, and in each release cycle there is at
least one topic that was a long overdue cleanup. In this post, I&amp;#8217;m describing
how and why the &lt;code&gt;writerfilter/inc/resourcemodel/&lt;/code&gt; and
&lt;code&gt;writerfilter/source/resourcemodel/&lt;/code&gt; directories disappeared&amp;#8201;&amp;#8212;&amp;#8201;though
probably nobody will miss them. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The resourcemodel building block of writerfilter (that handles Writer&amp;#8217;s DOCX
and RTF import in LibreOffice) was basically a bucket of old and unused
&lt;a href="https://www.youtube.com/watch?v=MvgN5gCuLac"&gt;stuff&lt;/a&gt;.  After the removal of the
unused &lt;a href="http://vmiklos.hu/blog/doctok.html"&gt;.DOC tokenizer&lt;/a&gt;, it turned out that
most of that code was just referring to itself or template code that was used
with a single type only (hello
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=45234fd21ad76b7732be4e5783cc7dd5dcf2daa2"&gt;TableManager&lt;/a&gt;).
resourcemodel was about 6000 lines of code at the time LibreOffice was
started, and after some manual cleanup and moving the still needed small part
to dmapper (the shared part of the RTF / DOCX import), tools like
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/compilerplugins/clang/unreffun.cxx"&gt;loplugin:unreffun&lt;/a&gt;
and &lt;a href="https://github.com/caolanm/callcatcher"&gt;callcatcher&lt;/a&gt; helped to detect what
became truly unused&amp;#8201;&amp;#8212;&amp;#8201;at the end resulting in the complete removal of these
directories.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That means that after folding the
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=fcec34ffcc93f98be005b06c223e25c9c4e77cde"&gt;last
remaining header into dmapper&lt;/a&gt;, the relevant
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/writerfilter/README"&gt;documentation&lt;/a&gt;
can hopefully now describe source contents easier, having just 4 directories:
the RTF and the DOCX tokenizer, the shared part and the UNO service
implementations. One less cryptic leftover nobody really knows what it is! ;-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/resourcemodel.html</link>
            <pubDate>Mon, 08 Jun 2015 07:47:09 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/resourcemodel.html</guid>
        </item>
        <item>
            <title>LibreOffice Cambridge Hackfest</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-dGY38VD7z0M/VWNqvkXDLwI/AAAAAAAAFlE/8yurKsu0NcA/s400/" alt="https://lh3.googleusercontent.com/-dGY38VD7z0M/VWNqvkXDLwI/AAAAAAAAFlE/8yurKsu0NcA/s400/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first ever UK LibreOffice Hackfest took place in the city of Cambridge on
May 21st to 23rd (Thursday &amp;#8594; Saturday), kindly hosted by
&lt;a href="https://libreoffice-from-collabora.com/"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My starter idea was to fix
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=90315"&gt;tdf#90315&lt;/a&gt;, i.e. to
support both nested tables and multiple columns with the proper spacing in
between them in the RTF import. For comparison, here is how this looked in
LibreOffice 3.4:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-KX9Z8y1ojYc/VWNzgg1gQeI/AAAAAAAAFlk/TRwfvnklEOI/s400/" alt="https://lh3.googleusercontent.com/-KX9Z8y1ojYc/VWNzgg1gQeI/AAAAAAAAFlk/TRwfvnklEOI/s400/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The table borders looked OK due to correct column spacing, but the nested
table is missing. Then here is the LibreOffice 4.4 state:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-wz4OZdsYf5I/VWNzgu5OhUI/AAAAAAAAFlg/CG37pRlGggY/s400/" alt="https://lh3.googleusercontent.com/-wz4OZdsYf5I/VWNzgu5OhUI/AAAAAAAAFlg/CG37pRlGggY/s400/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Nested table is OK, but the table borders are strange due to incorrect column
spacing. Finally here is how it looks like now, when the import result is
correct:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-Zul_8xTSOkA/VWNzguGZf-I/AAAAAAAAFlY/L88WkfCpL1E/s400/" alt="https://lh3.googleusercontent.com/-Zul_8xTSOkA/VWNzguGZf-I/AAAAAAAAFlY/L88WkfCpL1E/s400/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Other than this, here is a list of other topics I hacked on:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=dev-tools.git;a=commit;h=9107601036fc9af9e67b37f0fc26296dddfd6eb1"&gt;clang
  libtooling-based compiler tools&lt;/a&gt; (so far an example analizer and a rewriter)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
some
  &lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=tree;f=libreofficekit;hb=HEAD"&gt;gtktiledviewer&lt;/a&gt;
  tweaks like handling of the "Search key not found" or the "Page count changed"
  callback event
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=821b72886f1e407a492f881a2efb27ead2c22b5c"&gt;o3tl::make_unique&lt;/a&gt;,
  till we can&amp;#8217;t use C++ 14 std::make_unique
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After fixing two more less interesting regressions, now it seems we&amp;#8217;re down to
0 for the
&lt;a href="https://bugs.documentfoundation.org/buglist.cgi?keywords=regression&amp;amp;keywords_type=allwords&amp;amp;product=LibreOffice&amp;amp;query_format=advanced&amp;amp;resolution=---&amp;amp;short_desc=RTF&amp;amp;short_desc_type=allwordssubstr"&gt;regressions
having RTF in their summary&lt;/a&gt;, which is promising. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I few
&lt;a href="https://picasaweb.google.com/104737754628780823336/20150523_Cambridge"&gt;pictures&lt;/a&gt;
I took while punting and a
&lt;a href="http://vmiklos.hu/panoramas/cambridge.html"&gt;panorama&lt;/a&gt; is available, too.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/cambridge.html</link>
            <pubDate>Tue, 26 May 2015 09:07:03 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/cambridge.html</guid>
        </item>
        <item>
            <title>Protocols Plugfest Europe 2015</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh3.googleusercontent.com/-Z9Pml365x6s/VVdBsMKPYVI/AAAAAAAAFfk/9PXnepbXuak/s400/"/&gt;
&lt;p&gt;(via &lt;a href="https://twitter.com/plugfestcon/status/598062244711309312"&gt;plugfestcon&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last week I went to Zaragoza to give a talk on
&lt;a href="https://speakerdeck.com/vmiklos/libreoffice-how-we-handle-interoperability"&gt;how
LibreOffice handles interoperability&lt;/a&gt; at Protocols Plugfest Europe 2015 on
&lt;a href="http://www.protocolsplugfest.com/europe/program/"&gt;Tuesday&lt;/a&gt;. Although I was told
this conference is a successor of the previous Zentyal Summit (and I were not
there) the conference seemed well-attended&amp;#8201;&amp;#8212;&amp;#8201;proof above. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Jacobo also
&lt;a href="http://blogs.igalia.com/jaragunde/2015/05/11/speaking-at-protocols-plugfest-2015/"&gt;gave
a LibreOffice-related talk&lt;/a&gt; on Wednesday.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the same day, there were some explicit spare time, so I took the
opportunity to walk in the historical parts of the city, see
&lt;a href="https://picasaweb.google.com/104737754628780823336/20150514_Zaragoza"&gt;my
photos&lt;/a&gt; and a &lt;a href="http://vmiklos.hu/panoramas/zaragoza.html"&gt;panorama&lt;/a&gt; if that kind
of pictures are of your interest. FWIW, &lt;a href="http://www.hotelsauce.com/en/"&gt;Hotel
Sauce&lt;/a&gt; has free wifi in the rooms, that&amp;#8217;s kind of impressing for a two-star
category. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, thanks &lt;a href="https://libreoffice-from-collabora.com/"&gt;Collabora&lt;/a&gt; for sponsoring this travel!&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/plugfest2015.html</link>
            <pubDate>Mon, 18 May 2015 07:54:24 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/plugfest2015.html</guid>
        </item>
        <item>
            <title>MathType import in the RTF and DOCX filter</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;TL;DR: Import of old-style (pre-2010 for RTF, pre-2007 for DOCX) math
equations embedded into text documents should be now imported as editable
embedded math objects.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Longer version: if you want to embed math equations into RTF or DOCX files,
you have two choices. The older approach is to embed a MathType OLE object
into the file, the newer one is a native OOXML markup, which has an RTF markup
equivalent as well. Handling of the later has been implemented by
&lt;a href="http://llunak.blogspot.com/"&gt;Luboš Luňák&lt;/a&gt; for DOCX a long time ago, and I
contributed the RTF equivalent almost
&lt;a href="http://vmiklos.hu/blog/lo-rtf-math-native.html"&gt;3 years ago&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What remains is the handling of the older version, the embedded OLE object.
Previously only the replacement graphic was imported, so regardless of the
Tools &amp;#8594; Options &amp;#8594; Load / Save &amp;#8594; Microsoft Office &amp;#8594; MathType to Math
checkbox, the result was never editable.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how it looks like now:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-V3SqO3Rz88s/VUZvFcBNMPI/AAAAAAAAFb4/QARDYqQVQGY/s0/" alt="https://lh3.googleusercontent.com/-V3SqO3Rz88s/VUZvFcBNMPI/AAAAAAAAFb4/QARDYqQVQGY/s0/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Given that the RTF and the DOCX importers share lots of code in the
&lt;code&gt;writerfilter/&lt;/code&gt; module, I implemented the same for the DOCX import at the same
time, too. The interesting challenge was that writerfilter wants an
&lt;a href="http://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1document_1_1XFilter.html"&gt;XFilter&lt;/a&gt;
implementation for the embedded object if it is to be handled internally by
LibreOffice, but the MathType filter (originally created to handle math
objects inside binary DOC files) didn&amp;#8217;t have one. Once I implemented such a
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=add60d233f70ff56472448bd50b3771f38974c52"&gt;filter
wrapper&lt;/a&gt;, the
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=2a3e8b470edf2fe76188f9ccf6b0f32dfc817ea4"&gt;rest&lt;/a&gt;
wasn&amp;#8217;t too hard.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here are
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/rtfimport/data/mathtype.rtf"&gt;test&lt;/a&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/sw/qa/extras/ooxmlimport/data/mathtype.docx"&gt;documents&lt;/a&gt;
if you want to try it yourself. You&amp;#8217;ll need a 5.0
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt; for that, though.
;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If I&amp;#8217;m at describing features new in LibreOffice Writer 5.0 file filters, here are a few more:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=830abf307aab9f9611db60b5c734fbafd3b3d8a3"&gt;Automatic hyphenation at a document
  level&lt;/a&gt; and &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=a3ec386c2283a196f8d9f1edd0ff97c38ddb281a"&gt;exceptions to it&lt;/a&gt; is now
  imported in RTF. I also adjusted the
  &lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=a2fea109e6454b10e8e85148b93bdca89066fe8d"&gt;exporter&lt;/a&gt;, so now Word sort of
  understands our hyphenation rules, replacing the OOo-specific custom
  hyphenation RTF extension that Word just ignored.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=7546a904265cc0d0a0e3795cdb411cbb945a39fe"&gt;picture wrap distance properties&lt;/a&gt;
  are now handled in the RTF importer&amp;#8201;&amp;#8212;&amp;#8201;previously that was only handled for
  shapes.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And a number of bugfixes for the RTF filter:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=86182"&gt;tdf#86182&lt;/a&gt; better RTL paragraph handling
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=80708"&gt;tdf#80708&lt;/a&gt; related to the improved old-style Writer table export handling work
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=90421"&gt;tdf#90421&lt;/a&gt; hyperlink export tweak
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Do these sound interesting? Look at what others did for LibreOffice 5.0 on
&lt;a href="https://wiki.documentfoundation.org/ReleaseNotes/5.0"&gt;the TDF wiki&lt;/a&gt;, even if
it&amp;#8217;s far from complete, as the 5.0 branch is not yet created. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/mathtype-import.html</link>
            <pubDate>Sun, 03 May 2015 21:15:59 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/mathtype-import.html</guid>
        </item>
        <item>
            <title>Open IT 2015</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/-bcwPYUJF04A/VTY_cdBo8bI/AAAAAAAAFac/B5ICyiGoKaY/s0/" alt="https://lh3.googleusercontent.com/-bcwPYUJF04A/VTY_cdBo8bI/AAAAAAAAFac/B5ICyiGoKaY/s0/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On Saturday I gave a talk at the &lt;a href="http://openit.eventbrite.com/"&gt;Open IT 2015&lt;/a&gt;
conference about the new features of LibreOffice 4.3 and 4.4.  My uploaded
slides are available
&lt;a href="https://speakerdeck.com/vmiklos/4-dot-4-es-kiadasban"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks &lt;a href="https://www.uni-obuda.hu/en"&gt;Óbuda University&lt;/a&gt; for hosting us, it was a
great event! Other than talking to the usual suspects like
&lt;a href="http://zolnaitamas.blogspot.com/"&gt;Tamás Zolnai&lt;/a&gt; or
&lt;a href="https://plus.google.com/117194932353487735021/posts"&gt;Gábor Kelemen&lt;/a&gt;, I enjoyed
two OpenStreetMap talks: it was extermely cool to hear that finally the
&lt;a href="http://turistautak.hu/"&gt;turistautak.hu&lt;/a&gt; community
&lt;a href="http://wiki.openstreetmap.org/wiki/WikiProject_Hungary/Import%C3%A1l%C3%A1s/turistautak.hu"&gt;changed
their license&lt;/a&gt; in February so that all their free maps can be imported to
OpenStreetMap&amp;#8201;&amp;#8212;&amp;#8201;finally one pointless fight ends.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/openit-2015.html</link>
            <pubDate>Tue, 21 Apr 2015 14:29:55 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/openit-2015.html</guid>
        </item>
        <item>
            <title>Open Source Budapest 5. meetup</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh3.googleusercontent.com/-ZPI3opPIqYE/VTIW5Igo5SI/AAAAAAAAFZc/rTmjqi14fZY/s800/"/&gt;
&lt;p&gt;(via &lt;a href="https://www.youtube.com/watch?v=cKTpJtRQaCM"&gt;Open Source Budapest Meetup&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On Tuesday the 5th Open Source Budapest meetup was held, I was one of the
invited speakers, and gave a lightning talk about
&lt;a href="https://github.com/vmiklos/ged2dot"&gt;ged2dot&lt;/a&gt;, both as a standalone Python
script and as a
&lt;a href="http://extensions.libreoffice.org/extension-center/gedcom"&gt;LibreOffice
extension&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My uploaded slides are available
&lt;a href="https://speakerdeck.com/vmiklos/csaladfak-abrazolasa-szabad-szoftverekkel"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/open-source-budapest-5.html</link>
            <pubDate>Fri, 17 Apr 2015 10:39:22 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/open-source-budapest-5.html</guid>
        </item>
        <item>
            <title>Android editing: from graphic handling to formatting</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="http://vmiklos.hu/blog/tiled-editing-part-4.html"&gt;from selections to graphic
handling&lt;/a&gt;, I wrote about how we let the LibreOffice Android app select, resize
and move images and shapes.  Now that we have all type of selections (at least
for Writer) in this
&lt;a href="http://blog.documentfoundation.org/2015/01/27/the-document-foundation-announces-the-results-of-the-android-tender/"&gt;TDF-funded
project&lt;/a&gt;, let&amp;#8217;s do some formatting! The example implemented by
&lt;a href="http://holesovsky.blogspot.com/"&gt;Jan Holesovsky&lt;/a&gt; here is to mark the text bold,
but you can imagine that using the same technique a number of other character
or paragraph properties could be set the same way with little work.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how it works:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
When you click on toolbar buttons on the desktop UI, so-called UNO commands
  are invoked, bold is &lt;code&gt;.uno:Bold&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
This command is generated by the native Android UI as well, and passed to
  the &lt;code&gt;lok::Document::postUnoCommand()&lt;/code&gt; LOK API.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then the LOK implementation uses the recently introduced
  &lt;code&gt;comphelper::dispatchCommand()&lt;/code&gt; internal API to actually execute it.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
In all applications (Writer, Calc, Draw and Impress) this command is then
  evaluated on the current selection: so if you have a cursor position, then
  from now on the new characters will be bold&amp;#8201;&amp;#8212;&amp;#8201;or if you have a selection,
  then that will be adjusted. The point is that this works exactly how it
  happens with the desktop UI, reusing the same code.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you are interested how this looks like, here is a demo (click on the image to see the video):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://youtu.be/5fmjQ6PmBQw"&gt;
&lt;img src="https://lh6.googleusercontent.com/-t3TbtyU1BG4/VR05HL8srKI/AAAAAAAAFYQ/cM2Ex5MTkoo/s800/" alt="https://lh6.googleusercontent.com/-t3TbtyU1BG4/VR05HL8srKI/AAAAAAAAFYQ/cM2Ex5MTkoo/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Notice that Calc also gained a number of new features, like cell selection,
blinking cursor, text selection with much help from Henry Castro.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now that Writer is nearly functional for the basic editing features that would
be good to see in all four applications, time to look at what&amp;#8217;s new in
Impress-land!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To bring Impress in line with Writer, we implemented the followings with
&lt;a href="http://tomazvajngerl.blogspot.com/"&gt;Tomaž Vajngerl&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
shape text now has a blinking cursor with a cursor handle that can be
  dragged
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
long push on a word results in a shape text selection with selection handles
  that can be dragged
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
it&amp;#8217;s now possible to resize shapes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Impress table selections can be created in two ways: either by long pushing
  on an empty Impress table cell, or by long pushing on shape text inside a
  cell, and then turning that shape text selection into a table one.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
it&amp;#8217;s possible to tap on a selected shape without text to add text to it.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is a demo to show this in action:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="http://youtu.be/4KdFMZJK7uY"&gt;
&lt;img src="https://lh3.googleusercontent.com/-IwBuKW9bI6Y/VR05HO5Fa_I/AAAAAAAAFYM/YNCT3k56j5I/s800/" alt="https://lh3.googleusercontent.com/-IwBuKW9bI6Y/VR05HO5Fa_I/AAAAAAAAFYM/YNCT3k56j5I/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For many of the above features, the core part was already implemented due to
Writer shapes, what was missing is to call the same editeng methods from
Impress and/or do missing core coordinates &amp;#8594; LOK coordinates conversions. The
later is twips for both cases in Writer, but Impress works in 100th millimeters
internally, so it was necessary to do a number of conversions here and there
so that LOK callbacks always emit coordinates in twips.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We also prepared more in-depth technical documentation about the Android
editing work, &lt;code&gt;libreofficekit/README&lt;/code&gt; and &lt;code&gt;android/README&lt;/code&gt; now has much more
details about how exactly the editing works.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it for now&amp;#8201;&amp;#8212;&amp;#8201;as usual the commits are in master (a few of them is only
in feature/tiled-editing for now), so you can try this right now, or wait till
the next Tuesday and get the
&lt;a href="http://dev-builds.libreoffice.org/daily/master/Android-ARM@24-Bytemark-Hosting/current/"&gt;Android
daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/android-editing-part-5.html</link>
            <pubDate>Thu, 02 Apr 2015 15:44:21 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/android-editing-part-5.html</guid>
        </item>
        <item>
            <title>Android editing: from selections to graphic handling</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="http://vmiklos.hu/blog/tiled-editing-part-3.html"&gt;from input handling to
selections&lt;/a&gt;, I wrote about how we let LibreOffice Android app draw the
selections around text content natively. A next step in this
&lt;a href="http://blog.documentfoundation.org/2015/01/27/the-document-foundation-announces-the-results-of-the-android-tender/"&gt;TDF-funded
project&lt;/a&gt; is to provide selections around more UI elements: images and shapes.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here are a number of challenges we (&lt;a href="http://tomazvajngerl.blogspot.com/"&gt;Tomaž Vajngerl&lt;/a&gt; and me) faced while we implemented this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
On Linux (the desktop), the move and resize operations are really similar:
  if you click near a resize handle (you "hit it"), then it&amp;#8217;ll be a resize,
  otherwise it&amp;#8217;ll be a move. Defining "near" means that you don&amp;#8217;t have to
  click exactly at the center of the handle, but we allow some tolerance. Turns
  out that the tolerance depended on the pixel size of the handle drawn on the
  desktop: and because we don&amp;#8217;t package the bitmaps of the desktop UI, that
  tolerance was 0.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Writer normally requires a click and a double-click to start editing shape
  text. One to select the shape and another to actually start the text
  editing. Instead of literally translating this to a tap and a long push, we
  wanted to start text editing right away if the user tapped on shape text.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Shape text doesn&amp;#8217;t use the normal Writer text, but editeng&amp;#8201;&amp;#8212;&amp;#8201;used by
  Impress and Calc, too. So we had to instrument the editeng module as well to
  expose the blinking cursor, so that if you tap inside the editeng text, you
  have some feedback where you are. Same is true for the cursor handle: once we
  knew where the cursor is, we could draw the cursor handle, but dragging it did
  nothing: now the &lt;code&gt;setTextSelection()&lt;/code&gt; LOK API handles the case when the cursor
  is inside editeng text and can adjust the cursor position there, too.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
On Linux, users got used to the following resize behavior: when images are
  resized, the aspect ratio is kept, but this is not the case for shapes. We
  wanted to keep this behavior on Android, too.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you are interested how this looks like, here is a demo (click on the image to see the video):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="http://youtu.be/bTWLz_4YQtA"&gt;
&lt;img src="https://lh5.googleusercontent.com/-JEuiW789JEM/VQqrR8zDHjI/AAAAAAAAFVo/ORgDKNBIIJA/s800/" alt="https://lh5.googleusercontent.com/-JEuiW789JEM/VQqrR8zDHjI/AAAAAAAAFVo/ORgDKNBIIJA/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Notice how the word selection in a table turns into a table selection, or how
a long push inside an empty cell creates a selection containing only the empty
cell.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An other direction we&amp;#8217;re working towards is to show / hide the soft keyboard
of Android as you would expect it. On Linux, it&amp;#8217;s easy: the keyboard is always
available. However on Android you should track when it makes sense to use the
keyboard and when not&amp;#8201;&amp;#8212;&amp;#8201;and show/hide automatically according to the context.
Examples:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
When you tap inside text, we show the keyboard.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When you finish editing, we hide it.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When you start scrolling, we hide it.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When you select an image, we hide it.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Additionally, we need to handle the situation when this automagic goes wrong.
The Android soft keyboard has a button to hide itself, but we added a toolbar
button to force-show it, too (click on the image to see the video):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="http://youtu.be/36MsGe-7Mpo"&gt;
&lt;img src="https://lh6.googleusercontent.com/-rUxX9gC9z4M/VQqrR0rIyMI/AAAAAAAAFVk/y5GluM-u5eg/s800/" alt="https://lh6.googleusercontent.com/-rUxX9gC9z4M/VQqrR0rIyMI/AAAAAAAAFVk/y5GluM-u5eg/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, &lt;a href="https://siqi43.wordpress.com/"&gt;Siqi Liu&lt;/a&gt; added a new callback type,
allowing to tap on hyperlinks and handle them according to how you
configured URL handling on your Android device. Here is a demo to show this in
action:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="http://youtu.be/dBcGVu5pcSk"&gt;
&lt;img src="https://lh6.googleusercontent.com/-tNnSAiN3p-o/VQqrR5UslSI/AAAAAAAAFVg/xCbkq7-Vark/s800/" alt="https://lh6.googleusercontent.com/-tNnSAiN3p-o/VQqrR5UslSI/AAAAAAAAFVg/xCbkq7-Vark/s800/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it for now&amp;#8201;&amp;#8212;&amp;#8201;as usual the commits are in master (a few of them is only
in feature/tiled-editing for now), so you can try this right now, or wait till
the next Tuesday and get the
&lt;a href="http://dev-builds.libreoffice.org/daily/master/Android-ARM@24-Bytemark-Hosting/current/"&gt;Android
daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/tiled-editing-part-4.html</link>
            <pubDate>Thu, 19 Mar 2015 12:26:34 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/tiled-editing-part-4.html</guid>
        </item>
        <item>
            <title>Document Liberation Project regression testing</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh5.googleusercontent.com/-0Qh5cUx4gGA/VQR_RkRe2jI/AAAAAAAAFU8/5KIPToOna4Q/s0/" alt="https://lh5.googleusercontent.com/-0Qh5cUx4gGA/VQR_RkRe2jI/AAAAAAAAFU8/5KIPToOna4Q/s0/" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://vmiklos.hu/blog/libvisio-setup.html"&gt;Earlier&lt;/a&gt; I wrote about my setup to
hack libvisio. One missing bit was testing the contributed code. Testing can
be performed at various levels, so far DLP libraries were tested by recording
the output of the various &lt;code&gt;foo2raw&lt;/code&gt; tools and then comparing the current output
to some previously known good state. This has a number of benefits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
If you know that the current state is good, then there is no need write
  testcases, you can just record your state automatically.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Any change in the output fill signal instant failure, so it gives pretty
  good test coverage.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The same technique was used in LibreOffice for Impress testcases initially,
however we saw a drawback there: Being automatically generated, you have no
control over what part of the output is important and what part is not&amp;#8201;&amp;#8212;&amp;#8201;both
parts are recorded and when some part changes, you have to carefully evaluate
on a case by case basis if the change is OK or not. The upshot is that from
time to time you just end up regenerating your reference testsuite and till
the maintainer doesn&amp;#8217;t do that, everyone can only ignore the test results&amp;#8201;&amp;#8212;&amp;#8201;so it doesn&amp;#8217;t really scale.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In short, both techniques have some benefits, but given that the
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=libvisio-test.git"&gt;libvisio test repo&lt;/a&gt;
is quite empty, I thought it&amp;#8217;s a good time to give an other method (what we
use quite successfully in LO code) a go, too. This method is easy: instead of
recording the whole output of some test tool, output a structured format (in
this case XML), and then just assert the interesting part of it using XPath.
Additionally, these tests
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=libvisio.git;a=tree;f=src/test;hb=HEAD"&gt;are
in libvisio.git&lt;/a&gt;, so you can nicely put the code change and the testcase
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=libvisio.git;a=commitdiff;h=1bda66b9c0c1cc2b9dcf323a0a45e314b5d4410f"&gt;in
the same commit&lt;/a&gt;. So the hope is that this is a more scalable technique:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Provided that &lt;code&gt;make distcheck&lt;/code&gt; is ran before committing, you can&amp;#8217;t forget to
  clone and run the tests.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Writing explicit assertions means that it&amp;#8217;s rarely needed to adjust existing
  tests. Which is a good thing, as there are no tests for the tests, so
  touching existing tests should be avoided, if possible. ;-)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Having testcase + code change in the same commit is one step closer to the
  dream e.g. the git.git guys do&amp;#8201;&amp;#8212;&amp;#8201;they usually require documentation, code
  and test parts in each patchset. :-)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Technically this method is implemented using a
&lt;code&gt;librevenge::RVNGDrawingInterface&lt;/code&gt; implementation that generates XML. For now,
this is part of libvisio, so in case you want to re-use it in some other DLP
library, you need to copy it to your import library, though if indeed multiple
importers start to use it, perhaps it&amp;#8217;ll be moved to librevenge. The rest of
the test framework is a simple
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=libvisio.git;a=blob;f=src/test/test.cpp;hb=HEAD"&gt;testsuite
runner&lt;/a&gt; and a
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=libvisio.git;a=blob;f=src/test/importtest.cpp;hb=HEAD"&gt;cppunit
TestFixture&lt;/a&gt; subclass that contains the actual test cases.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So in case you are planning how to test your import library, then now you have
two options, evaluate them and choose what seems to be the better tool for
your purpose.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/libvisio-testing.html</link>
            <pubDate>Sat, 14 Mar 2015 20:09:44 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/libvisio-testing.html</guid>
        </item>
    </channel>
</rss>
