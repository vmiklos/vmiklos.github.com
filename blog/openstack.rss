<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking - Tags: openstack</title>
        <description></description>
        <link>http://vmiklos.hu/blog/</link>
        <item>
            <title>git-review</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;LibreOffice started to use &lt;a href="https://gerrit.libreoffice.org/"&gt;Gerrit&lt;/a&gt; for code
review, and while occasional contributors
&lt;a href="https://wiki.documentfoundation.org/Development/gerrit/SubmitPatch"&gt;can submit
patches manually&lt;/a&gt;, in case one does many reviews, it&amp;#8217;s handy to use a dedicated
tool. In core.git, we have
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/tree/logerrit"&gt;logerrit&lt;/a&gt;, but
that&amp;#8217;s not advised for regular reviewers, either,
&lt;a href="https://github.com/openstack-infra/git-review"&gt;git-review&lt;/a&gt; is recommended
instead.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So I looked into git-review. The good news is that it&amp;#8217;s packaged already for most distributions, e.g. a simple&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;zypper in python-git-review&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;on openSUSE installs it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I wanted to use this tool for two tasks:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Submitting changes to Gerrit: &lt;code&gt;git review -R&lt;/code&gt; could do that. &lt;code&gt;-R&lt;/code&gt; prevents
  automatic rebase, so a test build won&amp;#8217;t fail because your patch is based on
  an already broken commit. The other good thing is that you don&amp;#8217;t have to
  remember where to submit: both the master and libreoffice-4-0 branches contain
  a &lt;code&gt;.gitreview&lt;/code&gt; file that contains the necessary server / branch information.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Cherry-picking changes from Gerrit: I found no option for this. A cherry-pick
  command is generated on the web interface, but it&amp;#8217;s more complicated than a
  simple &lt;code&gt;&amp;lt;some command&amp;gt; &amp;lt;number of the change&amp;gt;&lt;/code&gt;. So I submitted
  &lt;a href="https://review.openstack.org/17290"&gt;this change&lt;/a&gt; to git-review itself, the next
  release will be able to do &lt;code&gt;git review -x &amp;lt;number of the change&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Probably the browser interface is still the best to comment (especially inline
comment) and approve changes, though David even submitted a
&lt;a href="https://review.openstack.org/17423"&gt;proof of concept patch&lt;/a&gt; for that as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, let me just clear two myths:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
If you use Google for OpenID login, you can have multiple OpenID accounts
  associated with your Gerrit login, so it&amp;#8217;s not a problem (first I thought it
  is) if you use one email for Gerrit and an other one for accessing other
  Google services.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Somewhere I read that the stock LibreOffice hooks conflict with git-review:
  nope, git-review didn&amp;#8217;t touch the hooks, you can use the tool without
  corrupting them in any way.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/git-review.html</link>
            <pubDate>Thu, 28 Feb 2013 23:05:12 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/git-review.html</guid>
        </item>
    </channel>
</rss>
