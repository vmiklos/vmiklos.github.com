<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking</title>
        <description></description>
        <link>http://vmiklos.hu/blog/</link>
        <item>
            <title>OOXML signature export in LibreOffice</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-E5cCfFV5kkk/VwzwIcJ0JqI/AAAAAAAAGqk/4JpTSRlvUok6txiXgp1MgoNoNgPb0ov8gCCo/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-E5cCfFV5kkk/VwzwIcJ0JqI/AAAAAAAAGqk/4JpTSRlvUok6txiXgp1MgoNoNgPb0ov8gCCo/s600-Ic42/" alt="https://lh3.googleusercontent.com/-E5cCfFV5kkk/VwzwIcJ0JqI/AAAAAAAAGqk/4JpTSRlvUok6txiXgp1MgoNoNgPb0ov8gCCo/s600-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After adding &lt;a href="http://vmiklos.hu/blog/ooxml-signature-import.html"&gt;support
for reading OOXML signatures in LibreOffice&lt;/a&gt;, I continued with implementing OOXML
signature export (as in: not only verification, but signing).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;By verification, I mean that I count the signature of the input document, then
compare it with an existing signature, and if they match, it is verified. This
can be also called "import", as I only read an existing signature, I don&amp;#8217;t
create one.  By signing, I mean the creation of a new signature, which is
always good&amp;#8201;&amp;#8212;&amp;#8201;if it isn&amp;#8217;t, that&amp;#8217;s a programming error. This can be also
called "export", as I write the new signature into the document.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to the Dutch Ministry of Defense who made this work possible (as
part of a project implementing trusted signing and communication in
LibreOffice), this included:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
signing a previously unsigned document
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
appending a signature to an already signed document
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
removing a signature from a document with multiple signatures
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
removing the last signature of a signed document, turning it into an
  unsigned one
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Obviously the hardest part was the initial success: signing a previously
unsigned document, in a way that is accepted by both LibreOffice and MSO. One
trick here is that while in ODF the signature stream is simply added to an
existing document storage, in OOXML the storage has to refer to the signature
sub-storage (it&amp;#8217;s not a stream, as it has a stream for each individual
signature), then it has to be signed, and finally the signature can be added
to the document storage. So instead of reading the document, then appending
the signature, here we need to modify the document, and then we can append the
signature.  By referring the signature sub-storage, I mean it is necessary to
modify &lt;code&gt;[Content_Types].xml&lt;/code&gt; (so it contains a mime type for both the &lt;code&gt;.sigs&lt;/code&gt;
extension, and also for the individual &lt;code&gt;/_xmlsignatures/sigN.xml&lt;/code&gt; streams) and
also the &lt;code&gt;_rels/.rels&lt;/code&gt; stream has to refer &lt;code&gt;_xmlsignatures/origin.sigs&lt;/code&gt;, which
will contain the list of actual signatures.  A surprising detail is that the
signature is required to contain quite some software and hardware details
about your environment, like monitor resolution, Windows version and so on.
For a cross-platform project like LibreOffice this isn&amp;#8217;t meaningful, not to
mention we have no interest in leaking such information. So what I did instead
is writing hardcoded values based on what my test environment would produce,
just to please MSO. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After the initial
&lt;a href="https://cgit.freedesktop.org/libreoffice/core/tree/xmlsecurity/source/helper/ooxmlsecexporter.cxx"&gt;OOXML
signature exporter&lt;/a&gt; was ready, the next challenge was adding multiple
signatures. The problem here is that you have to roundtrip the existing
signatures perfectly. And when I write perfectly, I really mean it: if a
single character is written differently, then the hash of the signature will
be different, so the roundtrip (when we write back an existing and a new
signature to the document) will invalidate the signature. And there is no way
around that: the very point of the signature is that only the original signer
can re-calculate the signature hash. :-) So what we do is simply threating the
existing signatures as a byte array, and when writing back, then we don&amp;#8217;t try
to re-construct the signature stream based on the xmlsecurity data model, but
simply write back the byte array. This way it&amp;#8217;s enough to extract parts of the
signature which are presented to the user (date, certificate, comment), and we
don&amp;#8217;t need to parse the rest.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Removing one of multiple existing signatures isn&amp;#8217;t particularly hard, you just
need to update &lt;code&gt;_xmlsignatures/_rels/origin.sigs.rels&lt;/code&gt; and
&lt;code&gt;[Content_Types].xml&lt;/code&gt; which refer each and every signature stream. It&amp;#8217;s a good
idea to truncate them before writing, otherwise you may get a not even
well-formed XML as a result.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally removing the last signature is a matter of undoing all changes we did
while adding the first signature (the content type list and the toplevel
relation list), finally removing the signature sub-storage all-together. I
also factored out all this signature management code from
&lt;code&gt;DigitalSignaturesDialog&lt;/code&gt; (which is a graphical dialog) to
&lt;code&gt;DocumentSignatureManager&lt;/code&gt;, so that all the above mentioned features can be
&lt;a href="https://cgit.freedesktop.org/libreoffice/core/tree/xmlsecurity/qa/unit/signing/signing.cxx"&gt;unit-tested&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Putting all of these together, LO can now do all signature add, append, remove
and clean operations a user would expect from what is referred as simply
&lt;em&gt;OOXML signature support&lt;/em&gt;. As usual, you can try this right now with a 5.2
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/ooxml-signature-export.html</link>
            <pubDate>Thu, 14 Apr 2016 08:20:51 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/ooxml-signature-export.html</guid>
        </item>
        <item>
            <title>OOXML signature import in LibreOffice</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://lh3.googleusercontent.com/-8fwMz2Ie0ys/Vvpxvf94SrI/AAAAAAAAGlQ/vVaTBn_vEvY7Y3Fn2rcLYPERx3raDX_UwCCo/s400-Ic42/"/&gt;
&lt;p&gt;(via &lt;a href="http://www.ascertia.com/"&gt;ascertia&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After adding &lt;a href="http://vmiklos.hu/blog/libreoffice-sha256-signatures.html"&gt;support
for SHA-256 hashes in LibreOffice&lt;/a&gt;, I turned towards implementing OOXML
signature import (as in: verification, not signing) in LibreOffice. First,
thanks to the Dutch Ministry of Defense who made this work possible (as part
of a project implementing trusted signing and communication in LibreOffice), I
collected a list of building blocks needed for this to work:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
support for the Relationships Transform Algorithm (described in ISO/IEC
  29500-2:2012) in xmlsec
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
an actual XML parser for the OOXML signature in &lt;code&gt;xmlsecurity/&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
a new filter flag, so that our code no longer assumes "is ODF" means
  "supports digital signing" and
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
some refactoring in &lt;code&gt;xmlsecurity/&lt;/code&gt;, so that our digital signature code doesn&amp;#8217;t
  assume that multiple signatures are always written to a single file
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The xmlsec bits are now
&lt;a href="https://github.com/lsh123/xmlsec/commit/7069e2b0ab49679008abedd6d223fb95538b0684.patch"&gt;upstream&lt;/a&gt;,
it seems to me that new algorithm is needed, so that MSO can avoid signing a
number of streams (files in ZIP containers), while still being able to verify
that all normal streams are signed. Given that MSO by default doesn&amp;#8217;t sign all
streams (so that e.g. the metadata of the document can be modified without
invalidating signatures), this is in use even for a hello-world document. This
implies that a typical OOXML signature will never gain the best "signed"
category in LO, as we&amp;#8217;ll always warn that even though the signature is valid,
not all streams are signed. This is a bit of a rant, but better not hide the
reality: a default ODF signature covers more than a default OOXML signature.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The
&lt;a href="https://cgit.freedesktop.org/libreoffice/core/tree/xmlsecurity/source/helper/ooxmlsecparser.cxx"&gt;OOXML
signature parser&lt;/a&gt; had to extract all information from the signature markup
that&amp;#8217;s interesting for LibreOffice, like the certificate, the signature date
or the signature description. I considered extending the ODF signature parser
instead of implementing a new one for OOXML, since both markups are based on
the same W3C signing spec, but they are different enough that the added
complexity doesn&amp;#8217;t outweigh the benefit of code sharing here.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The next step was to add a new &lt;code&gt;SUPPORTSSIGNING&lt;/code&gt; filter flag in &lt;code&gt;filter/&lt;/code&gt;, and
mark the DOCX, XLSX and PPTX file filters as such, and then of course find
places mostly in &lt;code&gt;sfx2/&lt;/code&gt; and &lt;code&gt;xmlsecurity/&lt;/code&gt; that assume only ODF files can be
signed, and modifying those checks to also handle this new flag.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, a difference between ODF and OOXML signatures is that ODF puts all of
them in a single stream, and all the signing and verifying code works with
that stream. However, in case of OOXML, all signatures are in separate
streams, so if we want to work with a single object as kind of a signature
context, we need a storage (a sub-directory inside the ZIP container), and
work with that.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Putting all of these together, we now have unit tests that take test documents
having "good" and "bad" signatures, and the verification result in LO will
match with the one of MSO. As usual, you can try this right now with a 5.2
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/ooxml-signature-import.html</link>
            <pubDate>Thu, 31 Mar 2016 08:47:31 +0200</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/ooxml-signature-import.html</guid>
        </item>
        <item>
            <title>SHA-256 hashes for ODF signatures in LibreOffice</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;As it happened with MD5 hashes in the past, the world is currently moving from
SHA1 hashes to SHA-256 hashes these days. This affects LibreOffice&amp;#8217;s ODF
signing feature as well, where we previously wrote and read SHA-1 hashes, but
not SHA-256 ones. First, thanks to the Dutch Ministry of Defense who made this
work possible (as part of a project implementing trusted signing and
communication in LibreOffice), I could start work on
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=76142"&gt;tdf#76142&lt;/a&gt; which
attached a reproducer document as well, helping the implementation of this
feature.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you&amp;#8217;re not into the digital signature details, SHA-256 is relevant in two
aspects here:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
it can be a signature method, denoted by the
  &lt;code&gt;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&lt;/code&gt; URI, and
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
it can be a digest method, denoted by the
  &lt;code&gt;http://www.w3.org/2001/04/xmlenc#sha256&lt;/code&gt; URI
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hashing is interesting in the context of digital signatures because typically
not the whole document is signed, just a hash of it, and crypto frameworks
like nss or mscrypto typically tie these two together, so you just say you
sign with rsa-sha256, which in more detail means hashing with SHA-256 and then
signing using rsa.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A valid signed document using SHA-256 hashing looked like this before:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-c6JR6vywSuY/Vuw4CdYpj8I/AAAAAAAAGjE/hUOW-Ul073QM4SqMN2GM8K0mjGUdGSk5wCCo/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-c6JR6vywSuY/Vuw4CdYpj8I/AAAAAAAAGjE/hUOW-Ul073QM4SqMN2GM8K0mjGUdGSk5wCCo/s400-Ic42/" alt="https://lh3.googleusercontent.com/-c6JR6vywSuY/Vuw4CdYpj8I/AAAAAAAAGjE/hUOW-Ul073QM4SqMN2GM8K0mjGUdGSk5wCCo/s400-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I.e. we failed to validate the signature, and presented a dialog that suggested the signature is not valid. After my changes, it looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-QLHuSvGkFJQ/Vuw4CQD60ZI/AAAAAAAAGjI/GcmqED9Vqmc7KEw1BpDVNg_uxyrJp693gCCo/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-QLHuSvGkFJQ/Vuw4CQD60ZI/AAAAAAAAGjI/GcmqED9Vqmc7KEw1BpDVNg_uxyrJp693gCCo/s400-Ic42/" alt="https://lh3.googleusercontent.com/-QLHuSvGkFJQ/Vuw4CQD60ZI/AAAAAAAAGjI/GcmqED9Vqmc7KEw1BpDVNg_uxyrJp693gCCo/s400-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I.e. no error on loading, and the status bar icon tells the user that
everything is fine, except that we can&amp;#8217;t validate the certificate used for
signing.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As for when should LibreOffice start &lt;strong&gt;writing&lt;/strong&gt; (not reading) SHA-256 hashes
when creating signatures, it&amp;#8217;s an open question. Probably best to wait till
most users already have a version that can read those hashes. Then we would
still keep support for reading SHA-1 hashes, but we would use SHA-256 when
creating new signatures.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Another detail is that the hard work of signing in LibreOffice is done by
using &lt;a href="https://www.aleksey.com/xmlsec/"&gt;libxmlsec&lt;/a&gt;. We bundled a heavily patched
version from 2009, and it wasn&amp;#8217;t clear how much work it is to port our patches
to a newer upstream version, so I&amp;#8217;ve initially backported the SHA-256 patches
to our older version (for the nss and mscrypto backends of libxmlsec, as that
covers what LibreOffice uses on Linux, Windows and OS X). At the end I managed
to update our bundled libxmlsec to a newer (even if not the newest yet)
version, so latest master got rid of those custom backports.  As usual, you
can try this right now with a 5.2
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/libreoffice-sha256-signatures.html</link>
            <pubDate>Wed, 23 Mar 2016 09:37:54 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/libreoffice-sha256-signatures.html</guid>
        </item>
        <item>
            <title>Signature descriptions in LibreOffice</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;LibreOffice&amp;#8217;s user interface prohibited creating multiple signatures by the
same author on a document, because there was no semantic meaning of signing
the same document multiple times. I&amp;#8217;ve recently extended the user interface to
be able to provide a signature description: this way it makes sense to allow
multiple signatures from the same author, because now each signature can have
a different meaning. First, thanks to the Dutch Ministry of Defense who
made this work possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the user selects File &amp;#8594; Digital Signatures, the dialog lists existing
signatures together with their description (if they have any):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-DqvpQOrLq6c/VuGAEfC56AI/AAAAAAAAGhg/CnFGm5z5Uoo/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-DqvpQOrLq6c/VuGAEfC56AI/AAAAAAAAGhg/CnFGm5z5Uoo/s600-Ic42/" alt="https://lh3.googleusercontent.com/-DqvpQOrLq6c/VuGAEfC56AI/AAAAAAAAGhg/CnFGm5z5Uoo/s600-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the user clicks on the Sign Document button, the dialog for certificate
selection now also asks for an optional description:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-OoA7rDynpzo/VuGAFuHpskI/AAAAAAAAGhg/aEqUEOVtcEo/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-OoA7rDynpzo/VuGAFuHpskI/AAAAAAAAGhg/aEqUEOVtcEo/s600-Ic42/" alt="https://lh3.googleusercontent.com/-OoA7rDynpzo/VuGAFuHpskI/AAAAAAAAGhg/aEqUEOVtcEo/s600-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Changing the value of the description invalidates the signature. For this
feature to work, I have extended LibreOffice&amp;#8217;s ODF signature markup to store
not only a &lt;code&gt;&amp;lt;dc:date&amp;gt;&lt;/code&gt; element as signature metadata, but also the
&lt;code&gt;&amp;lt;dc:description&amp;gt;&lt;/code&gt;. Given that the metadata of an ODF signature is not part of
the ODF specification, it is allowed to extend the metadata with custom child
elements, so it was not necessary to submit an ODF enhancement proposal for
this file format change at this stage.  As usual the commits are in master, so
you can try this right now with a 5.2
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/libreoffice-signature-descriptions.html</link>
            <pubDate>Wed, 16 Mar 2016 09:13:06 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/libreoffice-signature-descriptions.html</guid>
        </item>
        <item>
            <title>Import of DOCX and RTF linked graphic into LibreOffice Writer</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-ov8ANPdqriE/Vs3em0UknHI/AAAAAAAAGc8/7mHejdWPLlg/s900-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-ov8ANPdqriE/Vs3em0UknHI/AAAAAAAAGc8/7mHejdWPLlg/s900-Ic42/" alt="https://lh3.googleusercontent.com/-ov8ANPdqriE/Vs3em0UknHI/AAAAAAAAGc8/7mHejdWPLlg/s900-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As it has been
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=59699"&gt;reported&lt;/a&gt;, the RTF
&lt;code&gt;includepicture&lt;/code&gt; field was ignored on import. As writerfilter has quite some
shared code for DOCX and RTF import, I also looked at the state of linked
graphics in the DOCX import, and that wasn&amp;#8217;t better, either.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Although, the root causes were different. ;-) Regarding DOCX, a linked and a
non-linked graphic has quite similar drawingML markup: the only difference is
if the graphic has a relationship alias (embedded case) or a (possibly
relative) external URL. Relative external URLs were broken, as the
writerfilter &amp;#8594; oox call (to import the graphic) did not forward the base URL,
so oox had no chance to properly resolve a relative URL.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Regarding RTF, a linked graphic is represented as an &lt;code&gt;includepicture&lt;/code&gt; field, and
now the RTF tokenizer resolves that to a real graphic. As you can see on the
above screenshot series (new Writer behavior, old Writer, and reference), we
now behave the same way as the reference (or the Writer DOC import).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A related interesting fact I noticed is that &lt;code&gt;includepicture&lt;/code&gt; fields in OOXML
are valid, but it seems Word never writes them: either their expanded field
result is outdated (e.g. it&amp;#8217;s some text), or if the user updates the field,
then their implementation instantly replaces the field with a drawingML markup
that links the graphic.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/sw-linked-graphic-import.html</link>
            <pubDate>Thu, 25 Feb 2016 09:17:00 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/sw-linked-graphic-import.html</guid>
        </item>
        <item>
            <title>Mail merge embedding in LibreOffice Writer FOSDEM talk</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://speakerd.s3.amazonaws.com/presentations/30e7f96db4a8430cbe7938245b545880/mm-fosdem-brussels-2k16.pdf"&gt;
&lt;img src="https://lh3.googleusercontent.com/-tY-2qENlPkA/Vq3iZ4wlO9I/AAAAAAAAGbY/o7lbUDAUoHo/s800-Ic42/" alt="https://lh3.googleusercontent.com/-tY-2qENlPkA/Vq3iZ4wlO9I/AAAAAAAAGbY/o7lbUDAUoHo/s800-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Yesterday I gave a
&lt;a href="https://fosdem.org/2016/schedule/event/libreoffice_mail_merging/"&gt;Mail merge
embedding in LibreOffice Writer&lt;/a&gt; talk at FOSDEM 2016, in the
&lt;a href="https://fosdem.org/2016/schedule/track/open_document_editors/"&gt;Open document
editors developer room&lt;/a&gt;. The room was well-crowded&amp;#8201;&amp;#8212;&amp;#8201;seems this year LibreOffice
Online was a hot topic. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We also had a
&lt;a href="https://wiki.documentfoundation.org/Hackfest/FOSDEM2016"&gt;hackfest&lt;/a&gt; with about
20 hackers attending, (again) kindly hosted by
&lt;a href="http://www.betacowork.com/"&gt;Betacowork&lt;/a&gt; on Thursday and Friday, before FOSDEM.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There were a few topics I hacked on:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=552361aaad740e55fcfa7993b4111aba354f863f"&gt;.uno:Paste
  AnchorType param&lt;/a&gt; for Writer
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=97371"&gt;tdf#97371&lt;/a&gt; DOCX import regression fix about TextBoxes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=96175"&gt;tdf#96175&lt;/a&gt; RTF export feature about &lt;em&gt;company&lt;/em&gt; doc property
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=363aa5dbb2c223b6cc3a109bd654f39772e310fa"&gt;refactoring&lt;/a&gt;
  around Writer&amp;#8217;s new (in 5.1) hide-whitespace feature, as requested by Ashod
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
code coverage: &lt;code&gt;RtfExport::WriteRevTab()&lt;/code&gt; was completely untested
  previously, now
  &lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=8ff66c71bb4da8d0e4454e250e480eada9fe226c"&gt;fixed&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A full list of achievements is
&lt;a href="https://wiki.documentfoundation.org/Hackfest/FOSDEM2016#Achievements"&gt;available&lt;/a&gt;, if
you were at the hackfest and you did not contribute to that section, please
write a line about what did you hack on. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Quite some other slides are now available on
&lt;a href="http://planet.documentfoundation.org/"&gt;Planet&lt;/a&gt;, don&amp;#8217;t miss them.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/fosdem2016.html</link>
            <pubDate>Sun, 31 Jan 2016 11:45:26 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/fosdem2016.html</guid>
        </item>
        <item>
            <title>RTF page background export in LibreOffice Writer</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;While I added support for page background colors in the RTF import
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=14e163b0caf97addf340aefc5760a9031ec98390"&gt;back
in 2013&lt;/a&gt;, the export part was missing up to now.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you set a solid color fill for a page style, and you export it to RTF, here
is how the reference rendering output looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-JI384fzDsng/VpEkSeMEgfI/AAAAAAAAGYY/GXhT1tzi4WQ/s900-Ic42/reference.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/-JI384fzDsng/VpEkSeMEgfI/AAAAAAAAGYY/GXhT1tzi4WQ/s900-Ic42/reference.png" alt="https://lh3.googleusercontent.com/-JI384fzDsng/VpEkSeMEgfI/AAAAAAAAGYY/GXhT1tzi4WQ/s900-Ic42/reference.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, in Libreoffice only the background of the paragraph reflected the
color set by the user:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-YZDNx5H0qYQ/VpEkSWxf2II/AAAAAAAAGYU/o4Q06VeBK-I/s900-Ic42/bad.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/-YZDNx5H0qYQ/VpEkSWxf2II/AAAAAAAAGYU/o4Q06VeBK-I/s900-Ic42/bad.png" alt="https://lh3.googleusercontent.com/-YZDNx5H0qYQ/VpEkSWxf2II/AAAAAAAAGYU/o4Q06VeBK-I/s900-Ic42/bad.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After implementing this feature in the RTF export filter, it now looks much
closer to the reference:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/--6VbXTzbA_k/VpEkSWJB7tI/AAAAAAAAGYc/D7KEn0lLvXw/s900-Ic42/good.png"&gt;
&lt;img src="https://lh3.googleusercontent.com/--6VbXTzbA_k/VpEkSWJB7tI/AAAAAAAAGYc/D7KEn0lLvXw/s900-Ic42/good.png" alt="https://lh3.googleusercontent.com/--6VbXTzbA_k/VpEkSWJB7tI/AAAAAAAAGYc/D7KEn0lLvXw/s900-Ic42/good.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;At the moment only solid fill is implemented, so other advanced fill types
like graphics or gradients are still missing.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/rtf-page-background-export.html</link>
            <pubDate>Tue, 12 Jan 2016 10:11:16 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/rtf-page-background-export.html</guid>
        </item>
        <item>
            <title>Rich RTF comment export in LibreOffice Writer</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-cPX4gcKiTxI/VmnrtwdnTXI/AAAAAAAAGTE/cYj_XZONoRg/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-cPX4gcKiTxI/VmnrtwdnTXI/AAAAAAAAGTE/cYj_XZONoRg/s400-Ic42/" alt="https://lh3.googleusercontent.com/-cPX4gcKiTxI/VmnrtwdnTXI/AAAAAAAAGTE/cYj_XZONoRg/s400-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As it has been reported in
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=94377"&gt;tdf#94377&lt;/a&gt;, the
state of Writer comment contents in the RTF export filter wasn&amp;#8217;t great.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With two recent changes, however, the situation is now much better:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
I&amp;#8217;ve added support for multiple paragraphs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I&amp;#8217;ve added support for both paragraph and text portion formatting
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It wasn&amp;#8217;t necessary to implement this from scratch, because comment contents
uses the same editeng store as the shape text, and there formatting was already
handled. A benefit of this code sharing is that shape text also handles
multiple paragraphs without a problem now. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The commits are backported to &lt;code&gt;libreoffice-5-1&lt;/code&gt;, so users will see them
already in the upcoming 5.1.0 release.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/rtf-rich-comment-export.html</link>
            <pubDate>Fri, 11 Dec 2015 08:40:09 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/rtf-rich-comment-export.html</guid>
        </item>
        <item>
            <title>Sanitizing member variable names in LibreOffice Writer</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-Qk6Y55f7HaY/VlYtR13vYeI/AAAAAAAAGRA/hK-7EJMFhwk/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-Qk6Y55f7HaY/VlYtR13vYeI/AAAAAAAAGRA/hK-7EJMFhwk/s400-Ic42/" alt="https://lh3.googleusercontent.com/-Qk6Y55f7HaY/VlYtR13vYeI/AAAAAAAAGRA/hK-7EJMFhwk/s400-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Robinson just
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?h=libreoffice-5-1&amp;amp;id=fa7c921feb2f6e14f7eca717dd3cfbca0bd35c03"&gt;branched
off&lt;/a&gt; libreoffice-5-1 from master in LibreOffice&amp;#8217;s core.git repository, so time
to talk about what happened behind the scenes in the 5.0 &amp;#8594; 5.1 development
cycle from my side.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;One stylistic detail that annoyed me for a while was the inconsistency around
naming class member variables. In new code it&amp;#8217;s common to give them an &lt;code&gt;m_&lt;/code&gt;
(or at least an &lt;code&gt;m&lt;/code&gt;) prefix, but in older code that wasn&amp;#8217;t that common, and
various custom hacks were invented to differentiate between pointers which
point to the same memory address, but one being a parameter of a member
function, and the other being a member variable.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Probably the worst scenario is when one was an abbreviation of the other, like
pTable and pTbl or pCursor and pCrsr. I took this as an opportunity to play
with Clang&amp;#8217;s &lt;a href="http://clang.llvm.org/docs/LibTooling.html"&gt;LibTooling&lt;/a&gt;, and I
wrote two tools &lt;a href="http://vmiklos.hu/blog/cambridge.html"&gt;back during the
Cambridge hackfest&lt;/a&gt; to automate the process of finding and fixing missing
prefixes.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To scope the renaming, I changed all classes in the &lt;code&gt;sw&lt;/code&gt; module having more
than 20 unprefixed members to follow the above convention, hopefully this
nicely improves code readability, together with the
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=49c2b9808df8a6b197dec666dfc0cda6321a4306"&gt;mass-rename
of pointless abbreviations&lt;/a&gt;, also done before the branch-off, so affecting
both libreoffice-5-1 and master. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/sanitizing-member-variable-names.html</link>
            <pubDate>Thu, 26 Nov 2015 08:50:47 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/sanitizing-member-variable-names.html</guid>
        </item>
        <item>
            <title>PNG export in LibreOffice Calc</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://lh3.googleusercontent.com/-8n61EJB3Xco/VjkUn1JvuqI/AAAAAAAAGOE/0-DCtcNV2RY/s0-Ic42/"&gt;
&lt;img src="https://lh3.googleusercontent.com/-8n61EJB3Xco/VjkUn1JvuqI/AAAAAAAAGOE/0-DCtcNV2RY/s400-Ic42/" alt="https://lh3.googleusercontent.com/-8n61EJB3Xco/VjkUn1JvuqI/AAAAAAAAGOE/0-DCtcNV2RY/s400-Ic42/" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Both LibreOffice Writer and Impress has the ability to export the document as
PNG, which is one way to create thumbnails for documents&amp;#8201;&amp;#8212;&amp;#8201;i.e. being able to
preview them before the real loading of the document happens. It turns out
Calc did not have this feature, and given that &lt;code&gt;ScModelObj&lt;/code&gt; also supports the
&lt;code&gt;css::view::XRenderable&lt;/code&gt; interface (just like Writer), I hoped that it won&amp;#8217;t
be too complex to add one.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can refer to
&lt;a href="http://fridrich.blogspot.com/2013/08/extending-swiss-army-knife-overview.html"&gt;Fridrich&amp;#8217;s
overview blog post&lt;/a&gt; for the complete list of steps on how to add a new filter
to LibreOffice, here the following steps
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=03bb5d52fecd6c613c6cc36508eb44e5e1c3456a"&gt;were
needed&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
improve &lt;code&gt;DocumentToGraphicRenderer&lt;/code&gt;, so that it can handle that Calc does
  not implement the &lt;code&gt;text::XTextViewCursorSupplier&lt;/code&gt; interface (Writer uses
  this one to expose the cursor is on what page)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
register &lt;code&gt;png_Portable_Network_Graphic&lt;/code&gt; as filter type for Calc
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
create a new &lt;code&gt;calc_png_Export&lt;/code&gt; filter fragment
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
register a Calc graphic filters configuration type and filter group in
  &lt;code&gt;Configuration_filter&lt;/code&gt; and &lt;code&gt;CustomTarget_registry&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
testcase
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you can&amp;#8217;t wait till LibreOffice 5.1 is released to try out this new
feature, you can get a &lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily
build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>http://vmiklos.hu/blog/calc-png-export.html</link>
            <pubDate>Wed, 04 Nov 2015 09:17:15 +0100</pubDate>
            <guid isPermaLink="false">http://vmiklos.hu/blog/calc-png-export.html</guid>
        </item>
    </channel>
</rss>
