<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What is Miklos hacking</title>
        <description></description>
        <link>https://vmiklos.hu/blog/</link>
        <item>
            <title>LibreOffice now uses pdfium to render inserted PDF images</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;pdfium is the rendering library used in Chromium&amp;#8217;s pdf viewer. It&amp;#8217;s based on
the foxit pdf renderer and its rendering quality is much better compared to
the pre-existing "convert PDF to ODG, then to an image" code when it comes to
just viewing a PDF file.  First, thanks to &lt;a href="http://www.pmg.be/"&gt;PMG&lt;/a&gt; who made
this work possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s look at a few samples that compare the old pdfimport rendering result
and the new pdfium-based one. One important feature is that embedded fonts are
handled. This is how this inserted PDF looked like previously:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm4.staticflickr.com/3727/33163219940_3a2a3278a0_o.png" alt="https://farm4.staticflickr.com/3727/33163219940_3a2a3278a0_o.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Compare it with the new result:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm3.staticflickr.com/2927/33547029855_92c1a5150d_o.png" alt="https://farm3.staticflickr.com/2927/33547029855_92c1a5150d_o.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now let&amp;#8217;s see the front page of a magazine, you can see 3 unexpected artifacts:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm4.staticflickr.com/3952/33163219890_c4ae5cf153_z.jpg" alt="https://farm4.staticflickr.com/3952/33163219890_c4ae5cf153_z.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;New result:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm3.staticflickr.com/2809/33547029645_de7cbcd800_z.jpg" alt="https://farm3.staticflickr.com/2809/33547029645_de7cbcd800_z.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally a problem with pdfium was that LibreOffice got bitmaps from it, so in case you re-exported to PDF, the quality of these PDF images were worse than in the original PDF file. The PDF specification has a &lt;em&gt;reference XObject&lt;/em&gt; feature that helps in this case: it allows the PDF export to still write the bitmap to the exported PDF, but in case the reader supports this feature, the vector-based original file will be shown, not the bitmap.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is a simple hand-crafted star in a PDF file, as it looked initially:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm3.staticflickr.com/2915/33163219680_30f63b4a82_z.jpg" alt="https://farm3.staticflickr.com/2915/33163219680_30f63b4a82_z.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how it looks after LibreOffice&amp;#8217;s PDF export learned to emit reference XObjects:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm4.staticflickr.com/3933/33547029485_4f487bb26c_z.jpg" alt="https://farm4.staticflickr.com/3933/33547029485_4f487bb26c_z.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;All this is available in LibreOffice master, towards 5.4.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/pdfium.html</link>
            <pubDate>Mon, 20 Mar 2017 10:00:22 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/pdfium.html</guid>
        </item>
        <item>
            <title>ECDSA support in xmlsec-nss, bundled by LibreOffice</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;Last month a
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=105983"&gt;LibreOffice
bugreport&lt;/a&gt; was filed, as the ODF signature created with Hungarian citizen eID
cards is not something LibreOffice can verify. After a bit of research it
seemed that LibreOffice and NSS (what we use for crypto work on Linux/macOS)
is not a problem, but xmlsec&amp;#8217;s NSS backend does not recognize ECDSA keys (RSA
or DSA keys work fine).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The xmlsec improvements happened in these pull requests:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/lsh123/xmlsec/pull/81"&gt;prepare the xmlsec ECDSA tests&lt;/a&gt;, so
  that they can test not only openssl, but NSS as well
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/lsh123/xmlsec/pull/83"&gt;add initial ECDSA support&lt;/a&gt; (SHA256
  hashing only)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/lsh123/xmlsec/pull/88"&gt;SHA1 support&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/lsh123/xmlsec/pull/89"&gt;SHA512 support&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/lsh123/xmlsec/pull/91"&gt;fix read of uninitialized memory&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After this the xmlsec code looked good enough. I had to request an update of
the bugdoc in the TDF bug twice, as the signature itself looked also incorrect
initially:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
an attribute type in the signature that had no official abbreviation was
  described as "UNDEF" instead of the dotted decimal form
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://tools.ietf.org/html/rfc3279#section-2.2.3"&gt;RFC3279&lt;/a&gt; specifies that an
  ECDSA signature value in general should be ASN1-encoded in general, but
  &lt;a href="https://tools.ietf.org/html/rfc4050#section-3.3"&gt;RFC4050&lt;/a&gt; is specific to XML
  digital signatures and that one says it should &lt;strong&gt;not&lt;/strong&gt; be ASN1-encoded. The
  bugdoc was initially ASN1-encoded.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally a warning still remains: while trying to parse the text of the
&lt;code&gt;&amp;lt;X509IssuerName&amp;gt;&lt;/code&gt; element, the dotted decimal form is still not parsed (see
this &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1342137"&gt;NSS bugreport&lt;/a&gt;). The
bug is confirmed on the mailing list, but no other progress have been made so
far.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Oh, and of course: Windows is still untouched, there a bigger problem remains:
we use CryptoAPI (not CNG) there, and that does not support ECDSA at all.
Hooray for open-source libs where you can add such support yourself. ;-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/xmlsec-nss-ecdsa.html</link>
            <pubDate>Mon, 13 Mar 2017 09:57:17 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/xmlsec-nss-ecdsa.html</guid>
        </item>
        <item>
            <title>okular now supports online videos in PDF files</title>
            <description>&lt;div class="paragraph"&gt;&lt;p&gt;I rarely write about work did by others, but given that in the
&lt;a href="/blog/pdf-video-export.html"&gt;previous post&lt;/a&gt; I mentioned that linked videos
(when they are a http:// URL) are not working, I had a very positive
experience which is worth noting. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I got a private mail nagging me to file a
&lt;a href="https://bugs.kde.org/show_bug.cgi?id=376574"&gt;bug&lt;/a&gt; and just 3 days later it got
fixed!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks to both Oliver for the nagging and to Albert for the actual fix.&lt;/p&gt;&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/okular-linked-video.html</link>
            <pubDate>Mon, 27 Feb 2017 09:53:06 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/okular-linked-video.html</guid>
        </item>
        <item>
            <title>LibreOffice PDF export now supports videos</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm4.staticflickr.com/3924/32549564340_4d0990cfa4_o.png" alt="https://farm4.staticflickr.com/3924/32549564340_4d0990cfa4_o.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;PDF supports screen annotations, which means it&amp;#8217;s possible to play embedded
and linked videos on top of a static image. Given that LibreOffice also
supports videos, it made sense to add support for this in our PDF export
filter. First, thanks to &lt;a href="http://www.pmg.be/"&gt;PMG&lt;/a&gt; who made this work possible. This
is currently added for Writer and Impress.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_linked_videos"&gt;Linked videos&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Linked videos are the situation when the video is not part of the document
itself, but it&amp;#8217;s located somewhere else, e.g. a http:// location. This is
helpful if you want to email around a PDF file, and want to avoid sending
large files when it has video content.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=104841"&gt;tdf#104841&lt;/a&gt; is
about this situation, first I added support for
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=9d6a749bc664f1876c938afb9eba4adc9f6ee09a"&gt;linked
videos in Impress&lt;/a&gt;, then
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=81aef113056270ce65f9dee5fe31b6f60617973c"&gt;also&lt;/a&gt;
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=0e71075bb7379af318482bb3abbb630c58db9ec9"&gt;in
Writer&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The result can be played using Adobe Acrobat Reader&amp;#8201;&amp;#8212;&amp;#8201;for some reason okular
on Linux is a bit confused about http:// URLs, wants to convert them to
relative ones, and then fails as of today.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_embedded_videos"&gt;Embedded videos&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm3.staticflickr.com/2666/32115175413_ec6f64243a_z.jpg" alt="https://farm3.staticflickr.com/2666/32115175413_ec6f64243a_z.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=105093"&gt;tdf#105093&lt;/a&gt; is the
embedded video case, this is handy in case you want to create an entirely
self-contained PDF, where even the video content is inside the PDF file as an
embedded file.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=4ad249af88d15f2c8a09f0721a59d82718fcc201"&gt;Impress
support&lt;/a&gt; (and a trick around
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=64d80d22851a38eb3f320f4e2b2bdf875da4d8b4"&gt;Draw
vs Impress shapes&lt;/a&gt;) the
&lt;a href="http://cgit.freedesktop.org/libreoffice/core/commit/?id=46153bdcf2f89e88607dfb0dd0003108796424e9"&gt;Writer
part&lt;/a&gt; wasn&amp;#8217;t too complicated.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Regarding the situation around various video containers and codecs, the above
code is quite agnostic. :-) On the LibreOffice side all we require is to be
able to extract a key frame from the video to provide a preview image, so e.g.
on Linux the support depends on what gstreamer plugins you have installed. The
video content is written to the PDF file as-is, so again if it will work in
the PDF reader is up to the reader&amp;#8217;s codec support. On Linux e.g. okular uses
vlc for video playback, so the range of supported formats is quite wide.  The
same is true on Windows, what I personally tested is LibreOffice&amp;#8217;s VLC backend
and the embedded QuickTime player in Acrobat Reader.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;All of this is available on LibreOffice master towards 5.4.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/pdf-video-export.html</link>
            <pubDate>Thu, 16 Feb 2017 09:38:45 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/pdf-video-export.html</guid>
        </item>
        <item>
            <title>Impress bugfixes, in time for FOSDEM 2017</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm1.staticflickr.com/334/32605456735_ac88121be8_o.png" alt="https://farm1.staticflickr.com/334/32605456735_ac88121be8_o.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://fosdem.org/2017/"&gt;FOSDEM 2017&lt;/a&gt; is here this weekend, and as Michael
Stahl pointed out, this (together with the LibreOffice annual conference) are
two time periods each year when lots of Impress bugfixes are made, as people
start &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food"&gt;dogfooding&lt;/a&gt;. ;-)
So below you can read about a pair of Impress bugs I fixed recently.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_changing_font_size_now_takes_table_selection_into_account"&gt;Changing font size now takes table selection into account&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=105502"&gt;tdf#105502&lt;/a&gt; is a
situation where you have an Impress table shape, and you select part of the
cells, then you click on the sidebar to change the font size. Previously this
affected all cells of the table shape, now only the selected cells are
updated.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_background_fill_for_shapes"&gt;Background fill for shapes&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm1.staticflickr.com/277/31761747774_4b1e6b8d38_o.png" alt="https://farm1.staticflickr.com/277/31761747774_4b1e6b8d38_o.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=105150"&gt;tdf#105150&lt;/a&gt; is a
PPT(X) filter bug where a shape was previously imported as transparent, but it
actually has to have the same fill type as the slide background. In case of
PPTX this was already handled in general, but not in case the slide had no
explicit background. The result was that in case the shape was used to cover
other shapes, they were visible, leading to e.g. this unexpected red rectangle
on the screenshot.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The same bug was present in the PPT import, though there existing support was
even more limited: just the "background colored objects" were collected, but
nothing was done to them. Now the above use-case should be as good for PPT as
it is for PPTX.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/fosdem-2017.html</link>
            <pubDate>Tue, 31 Jan 2017 09:17:26 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/fosdem-2017.html</guid>
        </item>
        <item>
            <title>Hack-(rest-of-the)-week at Collabora</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://farm1.staticflickr.com/726/32306648426_b4ee93f6a1_o.png" alt="https://farm1.staticflickr.com/726/32306648426_b4ee93f6a1_o.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As mentioned in
&lt;a href="https://mikekaganski.wordpress.com/2016/12/11/my-first-hack-rest-of-the-week-at-collabora/"&gt;the
blog post of Mike&lt;/a&gt; already, last month we were allowed to hack on anything we
want in LibreOffice for a few days. I used this time to progress with 3
different topics.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_stepping_through_textboxes_using_the_keyboard"&gt;Stepping through TextBoxes using the keyboard&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Given that a Writer shape with a TextBox is internally two shapes, this needed
explicit support. After my
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=5d2c189aee5057d1533165c368227c9c4c49d330"&gt;TextBox
bugfix&lt;/a&gt; it&amp;#8217;s possible to have two such shapes in a document, and once you
select one of them, tab properly jumps between the two shapes; previously
nothing happened.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What did happen is we tried to activate the TextBox of the selected shape,
which selected the shape itself, so at the end nothing happened.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_rtf_improvements"&gt;RTF improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For some time it was already possible to import and export custom string
document properties from/to RTF, but just in case the value type of the
property was string. Now I extended support for these custom properties, so
also the remaining types are handled:
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=fc8c4606e0834cd2128a228c2c95fc7c8f9eb7b1"&gt;numbers&lt;/a&gt;,
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=547de17fcb654e560a60d683c33482feeee84358"&gt;bools&lt;/a&gt;,
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=51c400dc4cd6a88c01b245e41d0de737d4df4017"&gt;doubles&lt;/a&gt;
and
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=07b0cde32a7eebce996b8c32aa58545e4ec15003"&gt;dates&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_xmlsec_patch_upstreaming"&gt;xmlsec patch upstreaming&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last, I&amp;#8217;ve started working on upstreaming
&lt;code&gt;external/libxmlsec/xmlsec1-noverify.patch.1&lt;/code&gt;. xmlsec has no ability to
disable the verification of certificates (think of &lt;code&gt;curl -k&lt;/code&gt; or &lt;code&gt;wget -k&lt;/code&gt;), so
in LibreOffice currently we just patch out that code as we don&amp;#8217;t need it. So I
wanted to add a new verification flag to avoid patching, but it turns out that
in the NSS case xmlsec didn&amp;#8217;t do the verification, so as a first step I fixed
that instead in this &lt;a href="https://github.com/lsh123/xmlsec/pull/72"&gt;xmlsec GitHub
pull request&lt;/a&gt;. Now that it&amp;#8217;s merged, the next step will be to add such a flag,
and then LibreOffice can get rid of the patch after the next xmlsec release.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/hackweek-2016.html</link>
            <pubDate>Tue, 17 Jan 2017 09:50:25 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/hackweek-2016.html</guid>
        </item>
        <item>
            <title>PAdES support for PDF files in LibreOffice</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm1.staticflickr.com/443/30919530974_5c5b3cb3a9_o.png"&gt;
&lt;img src="https://farm1.staticflickr.com/443/30919530974_7ab3d132d8_z.jpg" alt="https://farm1.staticflickr.com/443/30919530974_7ab3d132d8_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Building on top of the previously mentioned
&lt;a href="/blog/pdf-sign.html"&gt;signing of existing PDF files&lt;/a&gt; work, one
more PDF feature coming in LibreOffice 5.3 is initial support for the PDF
Advanced Electronic Signatures (&lt;a href="https://en.wikipedia.org/wiki/PAdES"&gt;PAdES&lt;/a&gt;)
standard.  First, thanks to the Dutch Ministry of Defense in cooperation with
&lt;a href="http://nouenoff.nl/"&gt;Nou&amp;amp;Off&lt;/a&gt; who made this work possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;PAdES is an extension of the ISO PDF signature with additional constraints, so
that it conforms to the requirements of the European eIDAS regulation, which
in turns makes it more likely that your signed PDF document will be actually
legally binding in many EU member states.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The best way to check if LibreOffice produces such PDF signatures is to use a
PAdES validator. So far I found two of them:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://signatures-conformance-checker.etsi.org/"&gt;the ETSI one&lt;/a&gt;, which
  requires registration and is a free web service
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/esig/dss/"&gt;Digital Signature Service&lt;/a&gt; (DSS), which is an
  open source tool you can build, use and modify locally
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As it can be seen above, the PDF signature produced by LibreOffice 5.3 by
default conforms to the PAdES baseline spec.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_implementation"&gt;Implementation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I implemented the followings in LO to make this happen:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
PDF signature creation now defaults to the stronger SHA-256 (instead of the
  previously used weaker SHA-1), and the PDF verifier understands SHA-256
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the PDF signature creation now embeds the signing certificate into the
  PKCS#7 signature blob in the PDF, so the verifier can check not only the key
  used for the signing, but the actual certificate as well
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the PDF signature import can now detect if such an embedded signing
  certificate is present in the signature or not
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="admonitionblock"&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;Don&amp;#8217;t get confused, LO does signature verification (checks if the digest
matches and validates the certificate) and now shows if the signing
certificate is present in the signature or not, but it doesn&amp;#8217;t do more than
that, the above mentioned DSS tool is still superior when it comes to do a
full validation of a PAdES signature.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, this works both with NSS and MS CryptoAPI. In the previous post I
noted that one task was easier with CryptoAPI. Here I experienced the
opposite: when writing the signing certificate hash, I could provide templates
to NSS on how the ASN.1 encoding of it should happen, and NSS did the actual
ASN.1 DER encoding for me. In the CryptoAPI case there is no such API, so I
had to do this encoding manually (see
&lt;a href="https://github.com/LibreOffice/core/blob/master/vcl/source/gdi/pdfwriter_impl.cxx#L6202"&gt;CreateSigningCertificateAttribute()&lt;/a&gt;),
which is obviously much more complicated.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Another pain was that the DSS tool doesn&amp;#8217;t really separate the validation of
the signature itself and of the certificate. The above screenshot was created
using a non-self-signed certificate, hence the unclear part in the signed-by
row.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you want to try these out yourself, get a
&lt;a href="http://dev-builds.libreoffice.org/daily/"&gt;daily build&lt;/a&gt; and feel free to play
with it. This work is part of both &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;libreoffice-5-3&lt;/code&gt;, so those
builds are of interest. Happy testing! :-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/pades.html</link>
            <pubDate>Tue, 20 Dec 2016 12:08:37 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/pades.html</guid>
        </item>
        <item>
            <title>Signing existing PDF files in LibreOffice</title>
            <description>&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm1.staticflickr.com/542/31208923460_e3d674d15f_o.png"&gt;
&lt;img src="https://farm1.staticflickr.com/542/31208923460_2eb9bca147_z.jpg" alt="https://farm1.staticflickr.com/542/31208923460_2eb9bca147_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;TL;DR: see above&amp;#8201;&amp;#8212;&amp;#8201;it&amp;#8217;s now possible signing existing PDF files and also
verify those signatures in LibreOffice 5.3.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_the_problem"&gt;The problem&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;LibreOffice already made it possible to digitally sign PDF files as part of
the PDF export, so in case you had e.g. ODF documents and exported them to
PDF, optionally a single digital signature could be added as part of the
export process. This is now much improved. First, thanks to the Dutch Ministry
of Defense in cooperation with &lt;a href="http://nouenoff.nl/"&gt;Nou&amp;amp;Off&lt;/a&gt; who made this work
possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A user can already use an other application to verify that signature or sign
an already existing PDF file. The idea is to allow doing these from inside
LibreOffice, directly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As it can be seen above, now the Digital Signatures dialog not only works for
ODF and OOXML files, but also for PDF files. If the file has been signed, then
the dialog performs verifications of that signature. Signatures are also
verified on opening any signed PDF file.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve also extended the user interface a bit, so that signing an existing PDF
file is easy, similarly how exporting to PDF is easier than exporting to a
random other file format. There is now a new File &amp;#8594; Digital signatures &amp;#8594;
Sign exiting PDF menu item to open a PDF file for signing:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm1.staticflickr.com/30/31543378146_b33c2f0a83_o.png"&gt;
&lt;img src="https://farm1.staticflickr.com/30/31543378146_b981a22ee0_z.jpg" alt="https://farm1.staticflickr.com/30/31543378146_b981a22ee0_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When that happens the infobar has a dedicated button to open the Digital
Signatures dialog, and also going into editing mode triggers a warning dialog,
as going read-write is not needed to be able to sign a document:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm1.staticflickr.com/752/31543377356_d359124361_o.png"&gt;
&lt;img src="https://farm1.staticflickr.com/752/31543377356_eaed7c2301_z.jpg" alt="https://farm1.staticflickr.com/752/31543377356_eaed7c2301_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And that&amp;#8217;s basically it, after you open a PDF file in Draw, you can do the
usual digital signature operations on the file, just like it already works for
previously supported file formats.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_details"&gt;Details&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What follows is something you can probably skip if you&amp;#8217;re a user&amp;#8201;&amp;#8212;&amp;#8201;however if
you&amp;#8217;re a developer and you want to understand how the above is implemented,
then read on. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_pdf_tokenizer"&gt;PDF tokenizer&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The signing feature in ODF/OOXML is implemented by working directly on the ZIP
storage in &lt;code&gt;xmlsecurity/&lt;/code&gt;. This means that in the PDF case it&amp;#8217;s necessary to
work on the PDF file directly, except that we had no such PDF tokenizer
ready to be used.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Code under &lt;code&gt;xmlsecurity/source/pdfio/&lt;/code&gt; now is such a tokenizer that can
extract info from PDF files and can also add incremental updates at the end of
the file, this way we can make sure adding a signature to a file won&amp;#8217;t loose
existing content in the file. This is fundamentally different form the usual
load-edit-save workflow, when we convert the file into a document model, and
work on that.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_verification_of_signatures"&gt;Verification of signatures&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Previously LO was only able to generate signatures, not verify them. I&amp;#8217;ve
implemented PDF signature verification using both NSS and CryptoAPI, so all
Windows, Linux and macOS are covered. I have to admit that the initial verification
was much easier with CryptoAPI. Until I hit corner-cases, I could use an API
that&amp;#8217;s well-documented and is higher level than NSS. (I don&amp;#8217;t have to support
different hash types explicitly, for example.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When I added support for non-detached signatures, that changed the situation a bit:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt; 1 file changed, 15 insertions(+), 11 deletions(-)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;was the NSS patch, and&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt; 1 file changed, 104 insertions(+), 8 deletions(-)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;was the CryptoAPI patch.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_signing_existing_files"&gt;Signing existing files&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Signing an existing file means tokenizing a document, figuring out how an
incremental update should look like for that file, writing an incremental
update that has a placeholder for the actual signature (a PKCS#7 blob, where
the input is just the non-placeholder parts of the document as binary data), and
finally filling in the placeholder with the actual signature.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For the last step, I could reuse code from the PDF export (modulo fixing bugs
like &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=99327"&gt;tdf#99327&lt;/a&gt;).
For the other steps, the tokenizer remembers the input offset / length for the
given token, this way it&amp;#8217;s relatively easy to create incremental updates. You
can add new objects or update new objects in such an incremental update, and
this source tracking feature allows copying even the unchanged parts of
updated objects verbatim.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_pdf_1_5"&gt;PDF 1.5+&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Everything becomes a bit more complicated once I started to handle not only
LO-generated PDF-1.4, but also newer PDF versions. I think this is important,
as Adobe Acrobat creates PDF 1.6 by default today, which has a number of new
features (I think all of them were actually introduced in PDF-1.5) that
affects the tokenizer:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
xref stream: instead of an ASCII xref table ("table of contents") at the end
  of the file, it&amp;#8217;s now possible to write the binary equivalent of this as an
  xref stream. Because the binary version can describe more features we must
  also write an updated xref stream (and not an xref table) when the import
  already had an xref stream.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
object streams: it&amp;#8217;s now possible to write multiple objects inside the
  stream section of a single object in binary form. The tokenizer is necessary
  to be able to read these objects and also roundtripping (source tracking)
  should work not only with physical file offsets, but also inside such
  compressed streams where the offset is no longer just a number inside the
  input file. (It&amp;#8217;s OK to write the updated objects outside object streams,
  still.)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
stream predictors: this is a concept from the PNG format, but also used in
  PDF when compressing the xref stream. See the spec for the gory details, but
  in short it&amp;#8217;s not enough that instead of plaintext you have to deal with
  binary compressed data, you also have to filter the data before actually
  parsing the file offsets, and the filter is defined not in terms of object IDs
  and file offsets, but in terms of adjacent pixels, since it&amp;#8217;s documented in
  the PNG spec. :-) (To be close to the Adobe output, we also apply such
  predictors when writing compressed xref streams.)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_user_interface"&gt;User Interface&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In addition to be UI changes already mentioned above, one more improvement I
did is that now the Digital Signatures dialog has a new column to show the
signature type.  This is either XML-DSig (for ODF/OOXML) or PDF.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_testing"&gt;Testing&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve added an integration test in the existing
&lt;code&gt;CppunitTest_xmlsecurity_signing&lt;/code&gt; to have coverage for the small new code that
calls into &lt;code&gt;xmlsecurity/&lt;/code&gt; from &lt;code&gt;sfx2/&lt;/code&gt; in case of PDF files. But fortunately
because all other code in &lt;code&gt;xmlsecurity/&lt;/code&gt; was new, I could do unit testing in
&lt;code&gt;CppunitTest_xmlsecurity_pdfsigning&lt;/code&gt; for the rest of the features.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Needless to say that invoking the PDF tokenizer + signature creator/verifier
directly is &lt;strong&gt;much&lt;/strong&gt; quicker than loading a full PDF file into Draw, just to see
the signature status. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_summary"&gt;Summary&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you want to try these out yourself, get a
&lt;a href="http://dev-builds.libreoffice.org/daily/"&gt;daily build&lt;/a&gt; and play with it! This
work is part of both &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;libreoffice-5-3&lt;/code&gt;, so those builds are of
interest. Happy testing! :-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/pdf-sign.html</link>
            <pubDate>Mon, 12 Dec 2016 10:11:30 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/pdf-sign.html</guid>
        </item>
        <item>
            <title>LibreOffice session at DevTalks Jr.</title>
            <description>&lt;div style="text-align: center; font-size: 0.6em;"&gt;
&lt;img src="https://farm6.staticflickr.com/5687/30900149756_0abd3a3218_z.jpg"/&gt;
&lt;p&gt;(via &lt;a href="https://twitter.com/DevTalksRo/status/797429977968939008"&gt;DevTalksRo&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Today I gave a
&lt;a href="https://speakerdeck.com/vmiklos/getting-involved-with-libreoffice-online-and-android"&gt;Getting
involved with LibreOffice Online and Android&lt;/a&gt; session at
&lt;a href="http://www.devtalks.ro/bucharest/devtalks-jr/"&gt;DevTalks Jr&lt;/a&gt;, Bucharest. The
event had two tracks in parallel, with a total attendees of about 200
developers.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Some photos I took after the event are &lt;a href="https://www.flickr.com/photos/vmiklos/sets/72157675071819211/"&gt;available&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks the organizers and sponsors for the great event! :-)&lt;/p&gt;&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/devtalks.html</link>
            <pubDate>Sat, 12 Nov 2016 16:22:19 +0100</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/devtalks.html</guid>
        </item>
        <item>
            <title>Insert PDF as image in LibreOffice 5.3</title>
            <description>&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;LibreOffice 5.3 will add one more vector-based format that can be inserted as
an image into documents: PDF. First, thanks to &lt;a href="http://pmg.be/"&gt;PMG&lt;/a&gt; who made
this work possible. On the user interface you can now select PDF files when
you choose e.g. Writer&amp;#8217;s Insert &amp;#8594; Image option:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm6.staticflickr.com/5552/29583461353_0c2da79c8e_o.png"&gt;
&lt;img src="https://farm6.staticflickr.com/5552/29583461353_02fc75dd7f_z.jpg" alt="https://farm6.staticflickr.com/5552/29583461353_02fc75dd7f_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first page of the PDF document will be shown, which is handy if the PDF
file is basically used as a vector image format.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Similarly to the SVG feature, the original vector image is stored in the
document, but when saving to ODF, a replacement PNG file is also generated to
be backwards compatible with older ODF readers. The image context menu &amp;#8594; Save
menu item allows to extract your original PDF data from the image, too:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://farm8.staticflickr.com/7501/30098334712_569ebbe55b_o.png"&gt;
&lt;img src="https://farm8.staticflickr.com/7501/30098334712_535e16ea05_z.jpg" alt="https://farm8.staticflickr.com/7501/30098334712_535e16ea05_z.jpg" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And that&amp;#8217;s it, as long as you save your document in ODF, your PDF-as-an-image
will be kept without loosing any data. As usual, you can try this right now
with a 5.3 &lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt;. :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, if you&amp;#8217;re interested in how this is implemented, keep reading&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_document_model"&gt;Document model&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The PDF image in the document model is really similar to how SVG is handled,
next to &lt;code&gt;Graphic::getSvgData()&lt;/code&gt;, there is now a &lt;code&gt;Graphic::getPdfData()&lt;/code&gt;.
This new member function exposes the original PDF data, otherwise the Graphic
is just a metafile.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_uno_api"&gt;UNO API&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;code&gt;ReplacementGraphicURL&lt;/code&gt; property of the image at an UNO level now exposes
the generated metafile for PDF images. This is implemented for both Draw and
Writer images, and is used by the ODF export filter.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_layout"&gt;Layout&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the &lt;code&gt;Graphic&lt;/code&gt; instance is rendered, the layout knows nothing about the
PDF data attached to the object, only parses the generated metafile. This way
the display of the PDF image works out of the box.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_filters"&gt;Filters&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First I&amp;#8217;ve implemented a
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commit;h=878a860dff10bd91491d6c9f2f4e2308bfe4f0b2"&gt;PDF
import-as-graphic filter&lt;/a&gt;, then the
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commit;h=7d76bb251e0c88ff17282a33b801a5d17a434af5"&gt;export
equivalent of it&lt;/a&gt;. As you can see, the PDF import-as-graphic filter isn&amp;#8217;t too
complicated, it completely reuses the existing "import PDF into Draw" filter,
it simply copies the first page of the resulting document model as a metafile.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, once the graphic filters were working, I&amp;#8217;ve also
&lt;a href="https://gerrit.libreoffice.org/gitweb?p=core.git;a=commitdiff;h=d1c346ba848c54424d6ffa88df7a5ff6a3717430"&gt;improved&lt;/a&gt;
the ODF import to recognize PDF data&amp;#8201;&amp;#8212;&amp;#8201;the export side needed no explicit
work, once the &lt;code&gt;ReplacementGraphicURL&lt;/code&gt; bits were in place.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_tests"&gt;Tests&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As mentioned above, the Draw and the Writer image implementation is separate,
so first I&amp;#8217;ve added tests for ODT files in the &lt;code&gt;testEmbeddedPdf&lt;/code&gt; of
&lt;code&gt;CppunitTest_sw_odfexport&lt;/code&gt;, and then &lt;code&gt;SdExportTest::testEmbeddedPdf()&lt;/code&gt; to
cover ODP files (and other ODF formats).  Second, the PDF part of the graphic
swapout/in code has a dedicated test in &lt;code&gt;GraphicObjectTest::testPdf()&lt;/code&gt;, and
the UI&amp;#8217;s "Save original PDF" feature has a new
&lt;code&gt;XOutdevTest::testPdfGraphicExport()&lt;/code&gt; test.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Oh, and if you intent to test this manually in a self-created build, make sure
to avoid &lt;code&gt;--disable-pdfimport&lt;/code&gt;, otherwise this feature can&amp;#8217;t work. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
            <link>https://vmiklos.hu/blog/lo-insert-pdf-image.html</link>
            <pubDate>Mon, 10 Oct 2016 08:31:37 +0200</pubDate>
            <guid isPermaLink="false">https://vmiklos.hu/blog/lo-insert-pdf-image.html</guid>
        </item>
    </channel>
</rss>
