<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>What is Miklos hacking</title><link>https://vmiklos.hu/blog/</link><description></description><lastBuildDate>Wed, 16 Sep 2020 10:46:16 +0200</lastBuildDate><item><title>Locale-independent Writer templates</title><link>https://vmiklos.hu/blog/sw-locale-independent-templates.html</link><description>&lt;div class="sect1"&gt;
&lt;h2 id="_the_problem"&gt;The problem&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Users create new documents in various ways. When they do so in Online or via Windows Explorer&amp;#8217;s
context menu (New &amp;#8594; &amp;#8230;) then actual templates are not involved in the process, technically. What
happens instead is that there is a plain empty Writer (or Calc, Impress) document that gets copied.
The reason for this is that by the time the document gets created, the WOPI-like protocol or Windows
Explorer doesn&amp;#8217;t have a running soffice process to create a document instance from a template: it&amp;#8217;ll
just copy a file.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With that aside, users expect that when they create new documents, the language of their new
document matches the locale of Writer itself. This conflicts with the idea that languages in the
documents are explicit, so if a German users writes a piece of German text, the spellcheck passes
and the next user is English, then the text should remain German, not introducing new spellcheck
errors.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_result"&gt;Result&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/OnDdNBGLsYhicnEbt_G6XW3Tmrn17XUT4XyBczgm0eETha9ZQ0y62t74QxeUFi3BfzfZrbBzZaMikglblqQBqTnWdYQzEQ72iBh3gZMHb9akFpQRVztOW7_0pK1Uyn9fvaNhLfugHfQ=w640" alt="https://lh3.googleusercontent.com/OnDdNBGLsYhicnEbt_G6XW3Tmrn17XUT4XyBczgm0eETha9ZQ0y62t74QxeUFi3BfzfZrbBzZaMikglblqQBqTnWdYQzEQ72iBh3gZMHb9akFpQRVztOW7_0pK1Uyn9fvaNhLfugHfQ=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Locale-indepentent Writer template&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The solution to this problem is what &lt;a href="https://gerrit.libreoffice.org/c/core/+/100899"&gt;Mike&lt;/a&gt; and
&lt;a href="https://gerrit.libreoffice.org/c/core/+/101195"&gt;Ezinne&lt;/a&gt;: make these "templates" minimal, so they
don&amp;#8217;t refer to any language. Then Calc or Impress will fill the language from the locale of the
soffice process and it&amp;#8217;ll be part of the document on the first save. This solves the problem of
multi-language templates while it does not break the spellcheck use-case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Andras &lt;a href="https://gerrit.libreoffice.org/c/online/+/102239"&gt;copied&lt;/a&gt; the same templates to various Online
integrations to have the same problem solved in that use-case as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer was still problematic, though. &lt;a href="https://gerrit.libreoffice.org/c/core/+/102051"&gt;sw: default to
UI locale when language is missing&lt;/a&gt; now fixes this. You can see on the above screenshot that the
stock soffice.odt was opened with a Hungarian locale and the status bar shows that the document
language is Hungarian, not the confusing "multiple languages", as before.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 16 Sep 2020 10:46:16 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-09-16:/blog/sw-locale-independent-templates.html</guid><category>libreoffice</category><category>en</category></item><item><title>SmartArt improvements in Impress, part 5</title><link>https://vmiklos.hu/blog/smartart-improvements-5.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Impress now has support for considering rules next to constraints when it comes to lay out
SmartArt graphics from PPTX files. This builds on top of the
&lt;a href="https://vmiklos.hu/blog/smartart-improvements-4.html"&gt;previous improvements&lt;/a&gt; around SmartArt support.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;SmartArt allows declaring your content and requirements for a graphic, then the layout will take
care of arranging that in a suitable way. It is allowed to declare conflicting requirements, and
rules can specify how to resolve those conflicts. The below example document has shape widths
defined in a way that multiple child shapes wants to have a width of 100%, but simply scaling down
all child shapes does not give a correct result. Rules define what to scale down and what to leave
unchanged.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how this works in practice:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/_AL6ARVsbgdaovqKPxr0n0I1kSn2zX_5xGg5y_4M8whkT6K0-mXIsGXeYI2Uo6u2YQAVwfLtbfy8XeYHggaPWpIHV4yaA4CaaIFUK4LQLRbV-JIbhy9A-Xz5JEEbcXp3TRWK4CzVcl0=w640" alt="https://lh3.googleusercontent.com/_AL6ARVsbgdaovqKPxr0n0I1kSn2zX_5xGg5y_4M8whkT6K0-mXIsGXeYI2Uo6u2YQAVwfLtbfy8XeYHggaPWpIHV4yaA4CaaIFUK4LQLRbV-JIbhy9A-Xz5JEEbcXp3TRWK4CzVcl0=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Linear layout with multiple 100% width shapes, new output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/UmK7-j0WxUHamDA-g3FepAOYYgbD5LJJhssleqv2jLnfXX-62fP82uA_5t__9HOQWIZfJUl6hoZVVQX5-LuIdOxz2M0HS90zcaoov_SbxQHuv4DN48be8dZkvySb_QtAbmNOTcMpJ5c=w640" alt="https://lh3.googleusercontent.com/UmK7-j0WxUHamDA-g3FepAOYYgbD5LJJhssleqv2jLnfXX-62fP82uA_5t__9HOQWIZfJUl6hoZVVQX5-LuIdOxz2M0HS90zcaoov_SbxQHuv4DN48be8dZkvySb_QtAbmNOTcMpJ5c=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Linear layout with multiple 100% width shapes, old output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/i2ScJOwjQfQeeFrw-yu6EQt67nt5Xx7o325WnaOeprXH4jc_CPLuXt0Mwb2iiT9rBamjooEA271HY48P6v8ieuWMUcoSq5HTjMsJkJnUOcrCrF_7uutebYGfO2WOZzAJRh6k-ibbglc=w640" alt="https://lh3.googleusercontent.com/i2ScJOwjQfQeeFrw-yu6EQt67nt5Xx7o325WnaOeprXH4jc_CPLuXt0Mwb2iiT9rBamjooEA271HY48P6v8ieuWMUcoSq5HTjMsJkJnUOcrCrF_7uutebYGfO2WOZzAJRh6k-ibbglc=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Linear layout with multiple 100% width shapes, reference output&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The initial heavy-lifting is done in
  &lt;a href="https://git.libreoffice.org/core/commit/6ca5412bac9e3da5cd20f315fc853c7733f10858"&gt;this commit&lt;/a&gt;,
  which parses the rules from the XML input.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then once we had rule info around, the linear algorithm was improved to scale down child shapes
  based on rules (and not just all of them, equally).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then it was necessary to scale spacings (between child shapes) based on rules as well.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It was also needed to limit the height request of a shape, since they should not leave the canvas
  of the SmartArt.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally it was necessary to support the "top" child order. This can be declared using the
  following markup:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;dgm:layoutNode&lt;/span&gt;&lt;/span&gt; ... &lt;span style="color: #009900"&gt;chOrder&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"t"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This declares that an earlier shape in a linear layout is on top of a later shapes, not the
opposite. The default is that newer shapes are on top of older shapes. This is not a visible
problem usually, but once you start using negative widths in a linear layout, you can have
overlapping shapes. The above example has 3 text shapes, which are overlapping with the "background"
arrow shape. This is expressed by having 100% width for child shapes (OK to scale down), then a
-100% width for a dummy shape (not scaling) and finally a 100% width for the background arrow (not
scaling).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;All in all, now the background arrow shape has a good position and size, and the text on the arrow
is readable.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 19 Aug 2020 09:24:04 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-08-19:/blog/smartart-improvements-5.html</guid><category>libreoffice</category><category>en</category></item><item><title>Adding visible signatures to existing PDF files in Draw</title><link>https://vmiklos.hu/blog/sd-visible-pdf-sign.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Draw now has support for adding visible signatures to an existing PDF file. This is in contrast with
the &lt;a href="https://vmiklos.hu/blog/pdf-sign.html"&gt;old functionality&lt;/a&gt; which was limited to invisible signatures.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to the Dutch Ministry of Defense in cooperation with &lt;a href="http://nouenoff.nl/"&gt;Nou&amp;amp;Off&lt;/a&gt; who
made this work by &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The PDF format allows assigning a shape (a form xobject) to a digital signature in the PDF file, and
if you use e.g. Adobe Acrobat, then it fills this shape with some visible information about the
digital signature. Draw used to write a placeholder widget there (a 0x0-sized rectangle on the first
page, at position 0x0). This is valid, but it&amp;#8217;s not close to real-world signatures, where signing
has a visual effect as well.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how this works in practice:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://youtu.be/tPAOXr2UH0M"&gt;
&lt;img src="https://lh3.googleusercontent.com/IDjXX1VwAvlFi1ug9pUSYLwakUyPn2YiMachx7DdiG5Jershph28sFOCWgSuQ6WbfgGdpMcnngjipnetuCBXiOMUR-OqTPO4rlikLXFJtc1WEtQoczPmQDLIXTpPcQD__0WI0T87Cw=w640" alt="https://lh3.googleusercontent.com/IDjXX1VwAvlFi1ug9pUSYLwakUyPn2YiMachx7DdiG5Jershph28sFOCWgSuQ6WbfgGdpMcnngjipnetuCBXiOMUR-OqTPO4rlikLXFJtc1WEtQoczPmQDLIXTpPcQD__0WI0T87Cw=w640" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Demo of adding a visible signature to an existing PDF file in Draw&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how the 2 added signatures are visible and Adobe Acrobat confirms they are valid, too.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Signature lines were already working in Writer and Calc, this effort brings them to Draw,
  improving consistency.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Signing existing PDFs were already possible, this allows adding a visible signature with the
  correct markup. This is important for automated processing of PDFs, maybe even helps
  accessibility. (I think DocuSign doesn&amp;#8217;t get this right currently.)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
This uses the existing "export selected shape to PDF" code to produce that object, so it&amp;#8217;s not a
  bitmap, but a scalable format. (As I know, DocuSign doesn&amp;#8217;t do this, either.)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If you didn&amp;#8217;t get the signature rectangle right for the first time, you can still move and resize
  it before the actual signing happens (Acrobat doesn&amp;#8217;t support this currently, I believe.)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The generated object is locale-aware when it comes to the actual signature string and date format.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The feature works for multiple signatures and multiple pages as well.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The final step was
  &lt;a href="https://git.libreoffice.org/core/commit/9b7a890fd59744459692d7f66402c6bdd25acec4"&gt;this commit&lt;/a&gt;,
  with much more grounding before that one.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Note that the signing is a two step process: first you draw the signature rectangle and optionally
  finalize its position / size, and only then you use the &lt;em&gt;Finish Signing&lt;/em&gt; button on the infobar to
trigger the actual signing:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/TMPrD20O0PvPLB7Uru_mmxfeQTaWhJwNQ80jgLj23TWLNqkm44Ww8F9Azce0sEN1TzmjmmVW7MvHZTwtR6Us2H7qpzOSC07CQ0p_myEsM1WRQOToAEus0vsgpTh1yeD65YemFQvv_A=w640" alt="https://lh3.googleusercontent.com/TMPrD20O0PvPLB7Uru_mmxfeQTaWhJwNQ80jgLj23TWLNqkm44Ww8F9Azce0sEN1TzmjmmVW7MvHZTwtR6Us2H7qpzOSC07CQ0p_myEsM1WRQOToAEus0vsgpTh1yeD65YemFQvv_A=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. After drawing a signature rectangle, before finishing the signing.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you use a HW-based certificate, this second step will ask for your certificate PIN.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 20 Jul 2020 09:07:46 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-07-20:/blog/sd-visible-pdf-sign.html</guid><category>libreoffice</category><category>en</category></item><item><title>Page-content-bottom vertical relation in Writer</title><link>https://vmiklos.hu/blog/sw-page-content-bottom-anchor.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has support for anchoring shapes relative to the bottom of the page content frame.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Users sometimes want to specify the vertical position of their shapes in text documents in a way
that is relative from the bottom of the page content area. Also, this improves consistency,
specifying a position that is relative from the top of the page content area is already possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Alternatively, it is possible to have the same calculated position when positioning from the top of
the page content area. The downside of this approach is that the position changes when the page
height changes. So if the user intention is to position a shape 2 cm above the bottom of the page
content area and the page height changes, the shape has to be manually re-positioned. This manual
re-positioning is not needed with the new page-content-bottom vertical relation.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For example, if a shape has a height of 10 cm and a 2 cm spacing is wanted between the bottom of the
shape and the bottom of the page content area, the position can be set to -12 cm, and then the 2 cm
spacing will be maintained, even after the page height changes.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how this works in practice:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://youtu.be/X49IbS97axs"&gt;
&lt;img src="https://lh3.googleusercontent.com/3r0eHqOn48OkUPHLGlhWTjPwwkWYWouF3LtMtVTmRITJ9oGHuRW1-COvswp71G7-ySMvZ-fsP8-0R5ELVNmiaN2FCxtFLfnun4OFYmFvmZk-W1UBw4EhJ4P8RAgPHhQtdcmjiCe9Eg=w640" alt="https://lh3.googleusercontent.com/3r0eHqOn48OkUPHLGlhWTjPwwkWYWouF3LtMtVTmRITJ9oGHuRW1-COvswp71G7-ySMvZ-fsP8-0R5ELVNmiaN2FCxtFLfnun4OFYmFvmZk-W1UBw4EhJ4P8RAgPHhQtdcmjiCe9Eg=w640" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Demo of a stable vertical position (relative to the bottom of the page content frame), during a page height change&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how the distance of the shape from the bottom is 2 cm, even if the page height changes.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
the UNO API now supports a new &lt;code&gt;PAGE_PRINT_AREA_BOTTOM&lt;/code&gt; relative orientation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the have the expected layout, &lt;code&gt;SwToContentAnchoredObjectPosition::CalcPosition()&lt;/code&gt; now considers
  this from-bottom anchoring when handling the vertical relative orientation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the DOCX format already had a markup for this:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;wp:positionV&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;relativeFrom&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"bottomMargin"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;wp:posOffset&amp;gt;&lt;/span&gt;&lt;/span&gt;...&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;/wp:posOffset&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;/wp:positionV&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;now the import/export code maps this markup to the new feature.&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The UI allows setting a new "Page text area bottom" frame position. It turns out that the UI is
  quite nice here, it tries to prevent you from setting positions which would be outside the limits
  of the current page. This logic in &lt;code&gt;SwFEShell::CalcBoundRect()&lt;/code&gt; now handles the new relative
  orientation.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The ODF filter now has a markup to represent the new vertical relation:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;style:graphic-properties&lt;/span&gt;&lt;/span&gt; ... &lt;span style="color: #009900"&gt;loext:vertical-rel&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"page-content-bottom"&lt;/span&gt; ...&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There is a &lt;a href="https://issues.oasis-open.org/browse/OFFICE-4073"&gt;proposal&lt;/a&gt; to promote this from our
extension namespace to normal ODF (thanks to Regina for the help there!).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 10 Jun 2020 09:12:45 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-06-10:/blog/sw-page-content-bottom-anchor.html</guid><category>libreoffice</category><category>en</category></item><item><title>Export larger pages from Draw using PDF 1.6</title><link>https://vmiklos.hu/blog/sd-pdf-1-6-larger-page-size.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Draw/Impress now has
&lt;a href="https://git.libreoffice.org/core/commit/4830592b780833cf5eee2aef30bc9c5d444dfb24"&gt;support&lt;/a&gt; for
exporting larger page sizes into PDF. The previous limit was 200 " (508 cm), and now practically
there is no such limit.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://vector.com/"&gt;Vector&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can use Draw with a document which has a single page, which more or less acts as a canvas with
unlimited size to handle vector graphics. The current limit of such a canvas in size is 600 x 600
cm. (And that can be increased further if there is demand without too large problems.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Exporting such a document to PDF is a different matter, though. The specification (up to, and
including version 1.5) says that the unit to specify sizes is points, and the maximum allowed value
is 14 400. This means that there is no markup to describe that your page is 600 cm wide. PDF 1.6
(and newer versions) introduce a &lt;code&gt;UserUnit&lt;/code&gt; markup to allow unlimited page size, and now Draw (and
other apps) can use this to describe the increased size.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Another use-case can be a large sheet in Calc, exporting it to a single PDF page, so you can pan
around easily on a touch device. If you have enough rows, then getting rid of this limit is helpful
to deal with the large page height.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how a large page looks like now in Draw and then in Adobe Reader:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://youtu.be/HtHq23MbYDs"&gt;
&lt;img src="https://lh3.googleusercontent.com/wfVdQklYbX9mpfNG0hk_A0-I495Nsu4r8Twokq_ZZR3Z0IondP33BDE_XjGFsNfucDJ9kVpDps_J_tcQATKhwJxAFeZn6hS1NN7i5BVlS9UBroUIGrJU1TiwqDB88k6HpMbnK9x9gQ=w640" alt="https://lh3.googleusercontent.com/wfVdQklYbX9mpfNG0hk_A0-I495Nsu4r8Twokq_ZZR3Z0IondP33BDE_XjGFsNfucDJ9kVpDps_J_tcQATKhwJxAFeZn6hS1NN7i5BVlS9UBroUIGrJU1TiwqDB88k6HpMbnK9x9gQ=w640" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Export of 6m-wide.odg to PDF&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how both Draw and Adobe Reader show that the page width is larger than 200 ".&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The PDF export already converts from an internal unit (e.g. Draw uses 100th millimeters, Writer
  uses twips) to PDF&amp;#8217;s unit
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The trick is that now PDF&amp;#8217;s unit is no longer points all the time, but we can dynamically switch
  to a larger unit as needed.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the PDF markup looks like for a 600 cm wide page:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;&lt;font face="monospace"&gt;&lt;font color="#ff00ff"&gt;1&lt;/font&gt;&amp;nbsp;&lt;font color="#ff00ff"&gt;0&lt;/font&gt;&amp;nbsp;&lt;font color="#2e8b57"&gt;&lt;b&gt;obj&lt;/b&gt;&lt;/font&gt;
&lt;font color="#a52a2a"&gt;&lt;b&gt;&amp;lt;&amp;lt;&lt;/b&gt;&lt;/font&gt;&lt;font color="#008b8b"&gt;/Type/Page/Parent&lt;/font&gt;&amp;nbsp;&lt;font color="#6a5acd"&gt;4 0 R&lt;/font&gt;&lt;font color="#008b8b"&gt;/Resources&lt;/font&gt;&amp;nbsp;&lt;font color="#6a5acd"&gt;11 0 R&lt;/font&gt;&lt;font color="#008b8b"&gt;/MediaBox&lt;/font&gt;&lt;font color="#a52a2a"&gt;&lt;b&gt;[&lt;/b&gt;&lt;/font&gt;&lt;font color="#ff00ff"&gt;0&lt;/font&gt;&amp;nbsp;&lt;font color="#ff00ff"&gt;0&lt;/font&gt;&amp;nbsp;&lt;font color="#ff00ff"&gt;8503.93700787402&lt;/font&gt;&amp;nbsp;&lt;font color="#ff00ff"&gt;396&lt;/font&gt;&lt;font color="#a52a2a"&gt;&lt;b&gt;]&lt;/b&gt;&lt;/font&gt;
&lt;font color="#008b8b"&gt;/UserUnit&lt;/font&gt;&amp;nbsp;&lt;font color="#ff00ff"&gt;2&lt;/font&gt;&lt;font color="#008b8b"&gt;/Group&lt;/font&gt;&lt;font color="#a52a2a"&gt;&lt;b&gt;&amp;lt;&amp;lt;&lt;/b&gt;&lt;/font&gt;&lt;font color="#008b8b"&gt;/S/Transparency/CS/DeviceRGB/I&lt;/font&gt;&amp;nbsp;&lt;font color="#ff00ff"&gt;true&lt;/font&gt;&lt;font color="#a52a2a"&gt;&lt;b&gt;&amp;gt;&amp;gt;&lt;/b&gt;&lt;/font&gt;&lt;font color="#008b8b"&gt;/Contents&lt;/font&gt;&amp;nbsp;&lt;font color="#6a5acd"&gt;2 0 R&lt;/font&gt;&lt;font color="#a52a2a"&gt;&lt;b&gt;&amp;gt;&amp;gt;&lt;/b&gt;&lt;/font&gt;
&lt;font color="#2e8b57"&gt;&lt;b&gt;endobj&lt;/b&gt;&lt;/font&gt;
&lt;/font&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Notice how we still avoid values larger than 14 400, but now the UserUnit says that 1 unit means 2
points.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.0).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 08 May 2020 09:02:33 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-05-08:/blog/sd-pdf-1-6-larger-page-size.html</guid><category>libreoffice</category><category>en</category></item><item><title>Padded numbering in Writer, part 2</title><link>https://vmiklos.hu/blog/sw-padded-numbering-2.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I already &lt;a href="https://vmiklos.hu/blog/hackweek-2020.html"&gt;posted&lt;/a&gt; about the start of padded numbering
support in Writer, there the focus was to insert &lt;em&gt;0&lt;/em&gt; characters to pad up the result to 2
characters. Let&amp;#8217;s see how that got extended in the recent past&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks Nicolas Christener who made this work by &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt;
possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Padded numbering is a style where you insert 0 characters in front of an otherwise normal (Arabic)
numbering, making sure that the result always has at least N characters. Up to now, you had to
number your content manually to have this effect, while Word supports this feature.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;OOXML supports padding up to 2, 3, 4 and 5 characters. The news is now now it&amp;#8217;s possible to not only
pad up to 2 characters, but also to any number between 2 and 5.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the current rendering of padded numbering looks like, with a custom prefix and suffix:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/JHqkVdHkLLkFV1Mrh5jR1FFqq8PvU3lmjuOrl6SwBnM-ygsbugL-FccMHIod9Uyj2-hAyADRX7VwozUHgzBTZTdo72FB_nuHzEH-iQngSl5ND0o6h1sZDTs1uv8H5cLNv0cHDgRv2A=w640" alt="https://lh3.googleusercontent.com/JHqkVdHkLLkFV1Mrh5jR1FFqq8PvU3lmjuOrl6SwBnM-ygsbugL-FccMHIod9Uyj2-hAyADRX7VwozUHgzBTZTdo72FB_nuHzEH-iQngSl5ND0o6h1sZDTs1uv8H5cLNv0cHDgRv2A=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. numbering-padded4.docx, current rendering&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how 0 is inserted before 999, but not before 1000 as this is the pad-to-4 case.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Padding to a custom number is not something that works in general, because both ODF and OOXML has
  a separate number format for each padding. So Writer supports the 4 cases Word supports, but (for
  now) not more.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Padding to 3 or more is more complicated than pad to 2, because OOXML has different markups for
  them.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the pad-to-2 markup looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;      &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;w:numFmt&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;w:val&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"decimalZero"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here is how you define pad-to-3:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;      &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;mc:AlternateContent&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;mc:Choice&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;Requires&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"w14"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;w:numFmt&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;w:val&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"custom"&lt;/span&gt; &lt;span style="color: #009900"&gt;w:format&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"001, 002, 003, ..."&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;/mc:Choice&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;mc:Fallback&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;w:numFmt&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;w:val&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"decimal"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;/mc:Fallback&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;/mc:AlternateContent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
This required taking the &lt;code&gt;w14&lt;/code&gt; branch when we hit such a conditional, we used to read the fallback
  branch previously.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
This required mapping the data of the &lt;code&gt;&amp;lt;w:numFmt&amp;gt;&lt;/code&gt; XML element not to an enumeration value, but to
  a pair of objects: the numbering format&amp;#8217;s value and format.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The rest was reasonably straightforward, since the actual padding implementation just had to be generalized.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.0).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 08 Apr 2020 14:01:44 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-04-08:/blog/sw-padded-numbering-2.html</guid><category>libreoffice</category><category>en</category></item><item><title>My hack week at Collabora: (start of) padded numbering in Writer</title><link>https://vmiklos.hu/blog/hackweek-2020.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As mentioned in a &lt;a href="https://vmiklos.hu/blog/hackweek-2016.html"&gt;previous&lt;/a&gt; such report, a hack week is when
we are allowed to hack on anything we want in LibreOffice for a few days at
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt;. I used this time to implement core support for padded
numbering in Writer.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Padded numbering is a style where you insert 0 characters in front of an otherwise normal (Arabic)
numbering, making sure that the result always has at least N characters. Up to now, you had to
number your content manually to have this effect, while Word supports this feature.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;OOXML supports padding up to 2, 3, 4 and 5 characters. Padding up to 2 characters is the older
feature, supported in DOC and RTF as well, so I focused on that piece.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the current, the baseline and the reference rendering of padded numbering looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/n-XvNw0xPkBK_u9eqVraa7meGxYPX8dpKtfmHkN54y60x5HvUhQBouGEnfLX3XjzQFDjG7oWhCGVvFLnINneGZwDIjB8FW1hgwYSEpWrt3kniLGeKNFAfpa_Y9NGHNadj50ecy3FVw=s300-p-k" alt="https://lh3.googleusercontent.com/n-XvNw0xPkBK_u9eqVraa7meGxYPX8dpKtfmHkN54y60x5HvUhQBouGEnfLX3XjzQFDjG7oWhCGVvFLnINneGZwDIjB8FW1hgwYSEpWrt3kniLGeKNFAfpa_Y9NGHNadj50ecy3FVw=s300-p-k" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. numbering-padded2.docx, current&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/BgSZhU4WNkwTvOejqbfaKSiEQUudnDCUeVaQ62xPETwzhP0-FUPsBZMrUrgwhfi3fSou3YIQ_Yb0tuDzJmeIxHk2LhOpS9ENvxwLCr3-aCn4rIS0e9vYOh2__cHAvP82-MUJzQS-Zg=s300-p-k" alt="https://lh3.googleusercontent.com/BgSZhU4WNkwTvOejqbfaKSiEQUudnDCUeVaQ62xPETwzhP0-FUPsBZMrUrgwhfi3fSou3YIQ_Yb0tuDzJmeIxHk2LhOpS9ENvxwLCr3-aCn4rIS0e9vYOh2__cHAvP82-MUJzQS-Zg=s300-p-k" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. numbering-padded2.docx, baseline&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/TXI-klcS5xzPUX0SaV_iqhweMcUX0aN1rc7rwwAbKdulmPYZ6wcYqcQTO94aHGZl_p4FuVSt_drCI1blKRHLupNjC6j08GjdppbkJ8o72xNmjpV_X2_LcPUgZmOfGBeUJRhDKptxqg=s300-p-k" alt="https://lh3.googleusercontent.com/TXI-klcS5xzPUX0SaV_iqhweMcUX0aN1rc7rwwAbKdulmPYZ6wcYqcQTO94aHGZl_p4FuVSt_drCI1blKRHLupNjC6j08GjdppbkJ8o72xNmjpV_X2_LcPUgZmOfGBeUJRhDKptxqg=s300-p-k" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. numbering-padded2.docx, reference&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how 0 is inserted before 1..9, but not before 10.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/6b80bd446de4bf19df3a9b124881e1fe12402ca8"&gt;sw padded
  numbering: add doc model and UNO API&lt;/a&gt; introduced &lt;code&gt;ARABIC_ZERO&lt;/code&gt; externally and
  &lt;code&gt;SVX_NUM_ARABIC_ZERO&lt;/code&gt; internally
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/642b7706101a991efc7e312f59dece640d8bfb60"&gt;sw padded
  numbering: add layout&lt;/a&gt; implements the actual padding in a new &lt;code&gt;lcl_formatArabicZero()&lt;/code&gt; function
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/7a8450c3ecf1a8000cb37981c981fdd55d196df4"&gt;sw padded
  numbering: add ODF filter&lt;/a&gt; decides how this handled for ODF import/export; the spec needs no
  extension in this case
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/5435ea2afc5da5633a440f2f06d79265bcbb040c"&gt;sw padded
  numbering: add DOCX filter&lt;/a&gt; implements OOXML paragraph numbering
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/a8a5fc175a8af2bf3750497d7ebe2c8ea9176981"&gt;sw padded
  numbering: add DOC filter&lt;/a&gt; implements [MS-DOC] paragraph numbering
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/dc05428405fb96f28b2d7c7bcfa9033f3f5248a3"&gt;sw padded
  numbering: add RTF export&lt;/a&gt; doesn&amp;#8217;t touch RTF import, which worked out of the box, due to code
  sharing with DOCX import
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then I found that footnote numbering needs explicit handling, so added support for padding in that
case as well:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/3ea32f2b6cbe515353218bc1f3d5746ca66f6a5a"&gt;sw padded
  numbering: add DOCX footnote export&lt;/a&gt; reuses the same markup, just in a different context
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/5c7d0c5bafd244f1bfb3930e0229f1f3f2371c82"&gt;sw padded
  numbering: add DOC footnote filter&lt;/a&gt; fixed custom number formatting for DOC footnote export in general
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally I had a little bit of remaining time, so I extended support for the recently added Chicago numbering:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/ddbad5612e4322665bc70f4a026e5b052bcaf344"&gt;sw chicago
  numbering: add DOCX footnote export&lt;/a&gt; builds on top of the existing paragraph numbering support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/9a1dd2e242794b4f26d207efc80a2f5bc088ab7c"&gt;sw chicago
  numbering: add DOC footnote export&lt;/a&gt; only touches footnotes, as this type is not supported for paragraphs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/4ba09be7e260ce2a79a23465db7b2837422cde30"&gt;sw chicago
  numbering: add RTF footnote export&lt;/a&gt; fixed custom number formatting for RTF footnote export in general
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_future_work"&gt;Future work&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Padding up to 3, 4 and 5 characters would be possible to do, but it&amp;#8217;s DOCX-only, and uses a
different markup, planned to be done later.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;All this is available in master (towards LibreOffice 7.0), so you can grab a
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;daily build&lt;/a&gt; and try it out right now. :-)&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 10 Mar 2020 09:43:24 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-03-10:/blog/hackweek-2020.html</guid><category>libreoffice</category><category>en</category></item><item><title>Semi-transparent text in Writer</title><link>https://vmiklos.hu/blog/sw-semi-transparent-text.html</link><description>&lt;div class="sect1"&gt;
&lt;h2 id="_the_problem"&gt;The problem&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Last year I &lt;a href="https://vmiklos.hu/blog/sd-semi-transparent-text.html"&gt;posted&lt;/a&gt; about work to have
semi-transparent rendering of not only shape fill and shape borders, but also shape text in Draw.
Now the same semi-transparent text feature is available in Writer as well. This improves
compatibility with Word, which supports the same feature in its DOCX format. You can access the new
option in the Format &amp;#8594; Character dialog.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_result"&gt;Result&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the new, old and reference rendering looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/oifzSVcdmKhomkQQKy4CNnPmamHtoo9CwRsbg9_ekbeK9Ov_4dFrzrJrYmDLHZNm-IvsoYNy8YfSs5kp4yEA42jybRO-8P-YKI8fYRu5ColRbzFHQBotP4MvkjanZG7JX9vP8Mcnnw=w640" alt="https://lh3.googleusercontent.com/oifzSVcdmKhomkQQKy4CNnPmamHtoo9CwRsbg9_ekbeK9Ov_4dFrzrJrYmDLHZNm-IvsoYNy8YfSs5kp4yEA42jybRO-8P-YKI8fYRu5ColRbzFHQBotP4MvkjanZG7JX9vP8Mcnnw=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Semi-transparent text in Writer, new rendering&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/RxtyxxIdrW14TtN30cf37e7RNHwnQpxlX-zhjhpWrggjStEERXvUnH7eDv8acM_8DcySNpnvpz5yWdwO12_cmQ6ZyCo4-fpIOdd3x9Q8SAXxAwuyMhfmjzhvS9VDBps8tQX-xB70RA=w640" alt="https://lh3.googleusercontent.com/RxtyxxIdrW14TtN30cf37e7RNHwnQpxlX-zhjhpWrggjStEERXvUnH7eDv8acM_8DcySNpnvpz5yWdwO12_cmQ6ZyCo4-fpIOdd3x9Q8SAXxAwuyMhfmjzhvS9VDBps8tQX-xB70RA=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Semi-transparent text in Writer, old rendering&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/6rkCyXnzfiVN96D1h8PiKSIva1ydRFQXzUbXbbLC-9plXOUJnMRHZT2ba4eKt7W1wqfL3vscVgE1-QB5ztbp2uqSmguOALV8wyZDnCF4LPlyHSbVEm5atwZvf29w3PzRmjy11aQahA=w640" alt="https://lh3.googleusercontent.com/6rkCyXnzfiVN96D1h8PiKSIva1ydRFQXzUbXbbLC-9plXOUJnMRHZT2ba4eKt7W1wqfL3vscVgE1-QB5ztbp2uqSmguOALV8wyZDnCF4LPlyHSbVEm5atwZvf29w3PzRmjy11aQahA=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Semi-transparent text in Writer, reference rendering&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
is a major contributor to LibreOffice and all of this work will be available in TDF&amp;#8217;s next release
too (7.0).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 26 Feb 2020 11:25:31 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-02-26:/blog/sw-semi-transparent-text.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improved rotated text handling in Writer's table rows with automatic height</title><link>https://vmiklos.hu/blog/sw-autorowheight-rotatedtext.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has better support for rotated text in tables containing rows with automatic height. This
post also presents two related fixes.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.otevrenamesta.cz/"&gt;Otevřená města&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Before diving into improved rotated text handling, first a continuous section break import problem
(&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=128605"&gt;tdf#128605&lt;/a&gt;) was fixed: this was a case
when we created a new page style, but only a new section was intended. Here is how the fix looks:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/ycsIqjpdm5t2n9FQQhKBbWobpsX2cQ0s-ugLn970XwuGafzL79HzNVly6dYUpLMhTQmZq8Aa36kaGIfWfk-MzYmuSr92zhRUxFk1aNqwDOnTy1cyyrRzCguuvp-Wd3LD8XXzo_Aurg=w640" alt="https://lh3.googleusercontent.com/ycsIqjpdm5t2n9FQQhKBbWobpsX2cQ0s-ugLn970XwuGafzL79HzNVly6dYUpLMhTQmZq8Aa36kaGIfWfk-MzYmuSr92zhRUxFk1aNqwDOnTy1cyyrRzCguuvp-Wd3LD8XXzo_Aurg=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Importing continuous section break, fixed&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/jLUVDTY3Z6-IWVCmSfia7ue_aSpXSG7YJK2WqhRCfJkdTgA3cVFRh8TiYZwKRut7vvC0yFkdGBzl9Wpv2auZpg6d84nmDI1gVHBZPmWsf_YA-5qD-SF8Uf2lBG7NOu9RcidR1bQ0ng=w640" alt="https://lh3.googleusercontent.com/jLUVDTY3Z6-IWVCmSfia7ue_aSpXSG7YJK2WqhRCfJkdTgA3cVFRh8TiYZwKRut7vvC0yFkdGBzl9Wpv2auZpg6d84nmDI1gVHBZPmWsf_YA-5qD-SF8Uf2lBG7NOu9RcidR1bQ0ng=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Importing continuous section break, original&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/izfhxSHtYg_QmeJdIY_NnX5uiaRsmDHQoPlAsofQSaLJERNzVq_gkOMShR-fzckvAd6E5D-ZEMbr41Db2PEMeUZA8gL-oqJsvf_3PytuxJhL95wz4Fsh-2JakWefx4Tes2MoHlFWWw=w640" alt="https://lh3.googleusercontent.com/izfhxSHtYg_QmeJdIY_NnX5uiaRsmDHQoPlAsofQSaLJERNzVq_gkOMShR-fzckvAd6E5D-ZEMbr41Db2PEMeUZA8gL-oqJsvf_3PytuxJhL95wz4Fsh-2JakWefx4Tes2MoHlFWWw=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Importing continuous section break, reference&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What you can see is that the continuous section break used to result in an unwanted page break, and
this is gone now.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Regarding the actual rotated text handling
(&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=128611"&gt;tdf#128611&lt;/a&gt;), there were two problems
there:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There was a missing flip handling for line shapes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Poor layout of rotated text in table cells with automatic height
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the fix looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/GFCNQDcvXsN2w1ADVo10H16FUOYB8i6jBTrPad0r6qa8nt8PmDBDD1oiDfG9Zs9_3eVqdyB-O-u6oWIBAujcyso2utvnDpdE4Bs2PykeJkbh0vSYMZDSIKsjv7vI06j9HUCru2Z19w=w640" alt="https://lh3.googleusercontent.com/GFCNQDcvXsN2w1ADVo10H16FUOYB8i6jBTrPad0r6qa8nt8PmDBDD1oiDfG9Zs9_3eVqdyB-O-u6oWIBAujcyso2utvnDpdE4Bs2PykeJkbh0vSYMZDSIKsjv7vI06j9HUCru2Z19w=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 4. Rotated text in table cells with auto height, fixed (both flip of line and text layout)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/IqsWjKbTD03_wnvUMUe_QK1pqdTfZKizoNEHRQDQuvpw_O8mrEQ8AgNk_2qbP49QUpezknqHDxnhn0eYDpfZL833dXaClRPD1e4_wxuTj5mTRTeEgioBCX0djcWa5vNSRdPmnalphA=w640" alt="https://lh3.googleusercontent.com/IqsWjKbTD03_wnvUMUe_QK1pqdTfZKizoNEHRQDQuvpw_O8mrEQ8AgNk_2qbP49QUpezknqHDxnhn0eYDpfZL833dXaClRPD1e4_wxuTj5mTRTeEgioBCX0djcWa5vNSRdPmnalphA=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 5. Rotated text in table cells with auto height, fixed (only flip of line so far)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/2Tkkj7oz9Bm9ckPs5lTGwAGBRokEJ0MWxfqrbqu6afp6Xm1I77zft8riW-kTxKo4kJsO6bwMtaZb0XNToFssEc1kkZuzm0qk0H4eLU-xk8DOd-e5eVMtNR6cYD_1FRDWbCIYok1oJg=w640" alt="https://lh3.googleusercontent.com/2Tkkj7oz9Bm9ckPs5lTGwAGBRokEJ0MWxfqrbqu6afp6Xm1I77zft8riW-kTxKo4kJsO6bwMtaZb0XNToFssEc1kkZuzm0qk0H4eLU-xk8DOd-e5eVMtNR6cYD_1FRDWbCIYok1oJg=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 6. Rotated text in table cells with auto height, original&lt;/div&gt;
&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/m3X4dGiUTsFBnVwQhiEpcAQYGAJ_8vbKN93jivrcsKcCvjaornrk0upCvsTmck1e39XISyuYNc47BF1tuyrskoWLuMhpegtbyPh1KjBD7_wD-oLueaaLbjYnrgReSRkS5krvK1y4LQ=w640" alt="https://lh3.googleusercontent.com/m3X4dGiUTsFBnVwQhiEpcAQYGAJ_8vbKN93jivrcsKcCvjaornrk0upCvsTmck1e39XISyuYNc47BF1tuyrskoWLuMhpegtbyPh1KjBD7_wD-oLueaaLbjYnrgReSRkS5krvK1y4LQ=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 7. Rotated text in table cells with auto height, reference&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What you can see is that the line clearing the table cell had a vertical flip, which was lost on
import. Also, the rotated text in the "row heading" cells was broken into multiple columns. Both are
fixed now.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;All this is available in LibreOffice master (towards 6.4), so you can try it out
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;right now&lt;/a&gt;, if interested.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 24 Jan 2020 09:37:19 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-01-24:/blog/sw-autorowheight-rotatedtext.html</guid><category>libreoffice</category><category>en</category></item><item><title>Semi-transparent text in Draw/Impress</title><link>https://vmiklos.hu/blog/sd-semi-transparent-text.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Draw/Impress now has
&lt;a href="https://git.libreoffice.org/core/commits/3e5bedbb6910053c0cee4112cd382fbd035c9832..6dbb317ebec681d236c6ce354f581108fd814f7b"&gt;support&lt;/a&gt;
for semi-transparent shape text, next to the existing transparency support in the context of shape
fill colors and shape border colors.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://vector.com/"&gt;Vector&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how it looks:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/FJ55-BJ_Mc75TiyrPYuvtOscHOqFp81sEI4SfJvybPzaXG5Y2n4mIoLRzkXydEEmtEf--l9s_h-L4CyYjuGpTyOngOTi8YAzIFp8bQBEn0k2DWsRzJHLdfttf74wTbdPgZUzgSnOYQ=w640" alt="https://lh3.googleusercontent.com/FJ55-BJ_Mc75TiyrPYuvtOscHOqFp81sEI4SfJvybPzaXG5Y2n4mIoLRzkXydEEmtEf--l9s_h-L4CyYjuGpTyOngOTi8YAzIFp8bQBEn0k2DWsRzJHLdfttf74wTbdPgZUzgSnOYQ=w640" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Semi-transparent text in Draw&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What you can see is that next to the existing character color, now you can also set a transparency
percentage to decide if the text should be entirely transparent, entirely opaque or something
between the two.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The primary focus was Draw in this case, but this also helps PPTX support, as the importer/exporter
now handles this for Impress documents as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;All this is available in LibreOffice master (towards 6.5), so you can try it out
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;right now&lt;/a&gt;, if interested.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 20 Dec 2019 09:39:17 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2019-12-20:/blog/sd-semi-transparent-text.html</guid><category>libreoffice</category><category>en</category></item></channel></rss>