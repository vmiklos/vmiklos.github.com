<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>What is Miklos hacking</title><link>https://vmiklos.hu/blog/</link><description></description><lastBuildDate>Tue, 08 Mar 2022 12:11:27 +0100</lastBuildDate><item><title>Word-style border fixes in Writer: pages, tables and paragraphs</title><link>https://vmiklos.hu/blog/sw-page-table-para-border.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has a set of improvements to better render Word-style borders around pages, tables and
paragaphs. This required adjusting how we perform automatic mirroring and also to make sure that
clipping is done the Word way.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; and &lt;a href="https://www.tubitak.gov.tr/en"&gt;TUBITAK&lt;/a&gt; who
made this work by &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Word users expect to able to import their documents to Writer and experience high fidelity
rendering: this means Writer has to support the way page / table / paragraph borders are painted
according to the OOXML model as well. This is all done conditionally, so existing ODF documents are
left unchanged.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is a set of 5 bugfixes, requested by multiple of our customers.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First let&amp;#8217;s look at the new render result for page borders:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/page-border-new.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/page-border-new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Word-style page borders, new result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And this is how it used to look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/page-border-old.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/page-border-old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Word-style page borders, old result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally you can compare that with the reference:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/page-border-ref.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/page-border-ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Word-style page borders, reference&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What you can see here is that the page has a double border: the outer line is thick and the inner
line is thin. The right and bottom border was incorrect as our result was the opposite of the
reference.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, let&amp;#8217;s look at the new render result for table borders:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/table-border-new.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/table-border-new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 4. Word-style table borders, new result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And this is how it used to look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/table-border-old.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/table-border-old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 5. Word-style table borders, old result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally you can compare that with the reference:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/table-border-ref.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/table-border-ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 6. Word-style table borders, reference&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can notice a number of problems here:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
the inner horizontal line at the top table was overrunning, it was even painted between the two
  lines of the outer double border
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the middle table shows how the vertical thick and thin lines of the outer double border was
  reversed
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the bottom table shows how the horizontal tick inner border was not consistent
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The new render result properly clips the inner border lines, so they don&amp;#8217;t intersect outer borders,
and the border mirroring (similar to the page borders) is now correct for table borders as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Third, let&amp;#8217;s look at the new render result for paragraph borders:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/para-border-new.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/para-border-new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 7. Word-style paragraph borders, new result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And this is how it used to look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/para-border-old.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/para-border-old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 8. Word-style paragraph borders, old result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally you can compare that with the reference:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-page-table-para-border/para-border-ref.png" alt="https://share.vmiklos.hu/blog/sw-page-table-para-border/para-border-ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 9. Word-style paragraph borders, reference&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What&amp;#8217;s visible here is that some paragraph inside the table cell had borders defined, but due to how
the reference clips these borders, this border was not visible. That unexpected border is now also
omitted in Writer.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of bugfix changes.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For the page border:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/129281"&gt;https://gerrit.libreoffice.org/c/core/+/129281&lt;/a&gt; sw: fix swapped inner vs outer border for Word-style right/bottom page borders
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For the table border:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128053"&gt;https://gerrit.libreoffice.org/c/core/+/128053&lt;/a&gt; sw: fix too long inner borders intersecting with outer borders for Word cells
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128289"&gt;https://gerrit.libreoffice.org/c/core/+/128289&lt;/a&gt; sw: fix swapped inner vs outer border for Word-style left table borders
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128383"&gt;https://gerrit.libreoffice.org/c/core/+/128383&lt;/a&gt; sw: fix swapped inner vs outer border for Word-style bottom table borders
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For the paragraph border:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128569"&gt;https://gerrit.libreoffice.org/c/core/+/128569&lt;/a&gt; sw: fix unexpected paragraph border inside table cells
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.4).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 08 Mar 2022 12:11:27 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-03-08:/blog/sw-page-table-para-border.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improved PDF export options in the command-line and in Online</title><link>https://vmiklos.hu/blog/pdf-convert-to.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The LibreOffice Technology now has much better support for creating custom PDF exports of documents:
options available in the interactive PDF export options dialog are now also possible to set from the
command-line, and also when using the document conversion feature of
&lt;a href="https://www.collaboraoffice.com/document-conversion/"&gt;Collabora Online&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I was working on a regression that only happens if you export the second and third pages of a
document to PDF. While investigating, I needed a quick way to trigger the problematic code-path, and
clicking through a dialog is not convenient.&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/pdf-convert-to/pdf-export-partial.png" alt="https://share.vmiklos.hu/blog/pdf-convert-to/pdf-export-partial.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. UI to specify a partial export to PDF&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The PDF export in LibreOffice has a lot of options, but those are only available from extension code
(using the UNO API) or from the UI dialog. The idea was to expose much of this to the &lt;code&gt;soffice
--convert-to&lt;/code&gt; command as well, and if we&amp;#8217;re at it, also to the &lt;code&gt;/cool/convert-to&lt;/code&gt; endpoint of
Online.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here are a few examples to show the possibilities:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Skip the first page of a Draw document:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;soffice --convert-to 'pdf:draw_pdf_Export:{"PageRange":{"type":"string","value":"2-"}}' test.odg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Add watermark:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;soffice --convert-to 'pdf:draw_pdf_Export:{"TiledWatermark":{"type":"string","value":"draft"}}' test.odg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Encrypt the output:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;soffice --convert-to 'pdf:draw_pdf_Export:{"EncryptFile":{"type":"boolean","value":"true"},"DocumentOpenPassword":{"type":"string","value":"secret"}}' test.odg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
We default to PDF 1.6, perhaps you want to write PDF 1.5:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;soffice --convert-to 'pdf:draw_pdf_Export:{"SelectPdfVersion":{"type":"long","value":"15"}}' test.odg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Sign the PDF:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;soffice --convert-to 'pdf:draw_pdf_Export:{"SignPDF":{"type":"boolean","value":"true"},"SignCertificateSubjectName":{"type":"string","value":"CN=..."}}' test.odg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And the best is that the same also works in Online, e.g.:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;curl -k -F "data=@3page.odg" -F "format=pdf" -F "options={\"PageRange\":{\"type\":\"string\",\"value\":\"2-\"}}" https://localhost:9980/cool/convert-to &amp;gt; out.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128643"&gt;https://gerrit.libreoffice.org/c/core/+/128643&lt;/a&gt; &lt;em&gt;tdf#141340 PDF export: fix hyperlinks on the wrong
  page with page num range&lt;/em&gt; was the use-case that initially motivated to add the feature.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128709"&gt;https://gerrit.libreoffice.org/c/core/+/128709&lt;/a&gt; &lt;em&gt;comphelper: move JsonToPropertyValues() from
  desktop/&lt;/em&gt; was grounding work to use the "convert JSON to a string-any map" functionality we
  already had in core.git, as part of the LOK API.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128849"&gt;https://gerrit.libreoffice.org/c/core/+/128849&lt;/a&gt; &lt;em&gt;PDF export: allow setting filter data keys from
  the cmdline&lt;/em&gt; is the actual improvement to the PDF exporter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/128970"&gt;https://gerrit.libreoffice.org/c/core/+/128970&lt;/a&gt; &lt;em&gt;desktop lok, export options: allow passing through
  a JSON string as-is&lt;/em&gt; is a tweak to let the LOK API also use this
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/129387"&gt;https://gerrit.libreoffice.org/c/core/+/129387&lt;/a&gt; &lt;em&gt;filter: allow PDF export to sign from the cmdline&lt;/em&gt;
  added the PDF signing as a string option, since referring to a certificate object from the command-line
  was not possible
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/CollaboraOnline/online/pull/4069"&gt;https://github.com/CollaboraOnline/online/pull/4069&lt;/a&gt; &lt;em&gt;wsd, convert-to: allow specifying filter
  options as JSON&lt;/em&gt; implemented the Online side
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.4).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For the Online side, see the &lt;a href="https://www.collaboraoffice.com/code/"&gt;CODE&lt;/a&gt; page, the feature is
present in the current release (2021).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 08 Feb 2022 08:13:28 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-02-08:/blog/pdf-convert-to.html</guid><category>libreoffice</category><category>en</category></item><item><title>Start of document themes in Impress: shape text</title><link>https://vmiklos.hu/blog/sd-theme-shape-text.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Impress now has the start of document theme support: it is possible to define a document theme on
master pages and you can refer to the theme colors from shape text (including effects).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;PowerPoint users can attach a set of colors (and fonts, formattings) to master pages, and then refer
to these in shape text, shape fill, shape geometry. You can even make the original color lighter and
darker. These effects are preserved when you change the theme colors.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is a larger feature, this blog post shows how theme colors can be defined and how to refer to
those colors from Impress shape text. The rest of the feature is to be done in follow-up steps.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is a demo that shows how it works:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://youtu.be/4QeN58AkuxE"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-theme-shape-text/sd-theme-shape-text.png" alt="https://share.vmiklos.hu/blog/sd-theme-shape-text/sd-theme-shape-text.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Demo of theme support in Impress shape text&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In other words, it consists of 2 parts on the UI:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
You can define theme colors once you click on "Master View" in Impress, and then select the Slide
  &amp;#8594; Slide properties menu item, and there choosing the new Theme tab. You can e.g. make "accent1"
  blue, "accent2" orange, and so on.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then you can refer to these theme colors. Select some shape text, and then either use Format &amp;#8594;
  Character &amp;#8594; Font effects &amp;#8594; Font color &amp;#8594; Theme colors or use the sidebar to set the font color.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This later shows a grid of colors: each column is one theme color and then the column offers various
lighter and darker variants of the color.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And the important bit: if you later change theme colors, then the color of shape text (using theme
colors) is updated, even the effects (lighter or darker variants) are preserved.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To set expectations, this only works for shape text for now, and only in Impress, as a start.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes. The first step was to
upstream work by &lt;a href="https://tomazvajngerl.blogspot.com/"&gt;Tomaž Vajngerl&lt;/a&gt; and &lt;a href="https://quwex.com/"&gt;Sarper
Akdemir&lt;/a&gt; from the &lt;code&gt;feature/themesupport2&lt;/code&gt; feature branch:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125296"&gt;https://gerrit.libreoffice.org/c/core/+/125296&lt;/a&gt; Theme color and tint/shade attribute for SvxColorItem
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125304"&gt;https://gerrit.libreoffice.org/c/core/+/125304&lt;/a&gt; Support reading back theme color from an ooxml document
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125313"&gt;https://gerrit.libreoffice.org/c/core/+/125313&lt;/a&gt; make colorsets work outside of styles and with direct formatting
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125394"&gt;https://gerrit.libreoffice.org/c/core/+/125394&lt;/a&gt; expose the SvxColorItem theme related uno for draw/impress
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125404"&gt;https://gerrit.libreoffice.org/c/core/+/125404&lt;/a&gt; implement initial pptx theme color import
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125414"&gt;https://gerrit.libreoffice.org/c/core/+/125414&lt;/a&gt; rename getSchemeName getSchemeIndex to remove ambiguity
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125426"&gt;https://gerrit.libreoffice.org/c/core/+/125426&lt;/a&gt; implement color tint or shade import for pptx
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125436"&gt;https://gerrit.libreoffice.org/c/core/+/125436&lt;/a&gt; introduce XColorSetsManager interface
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125477"&gt;https://gerrit.libreoffice.org/c/core/+/125477&lt;/a&gt; import pptx color schemes as color sets
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The rest of the work was to go through the usual stages of document model, UNO API, rendering,
ODP/PPTX filter and UI work to complete the work started on the branch:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125532"&gt;https://gerrit.libreoffice.org/c/core/+/125532&lt;/a&gt; PPTX import: handle &amp;lt;a:clrScheme name="&amp;#8230;"&amp;gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125651"&gt;https://gerrit.libreoffice.org/c/core/+/125651&lt;/a&gt; PPTX: implement native handling of &amp;lt;a:clrScheme&amp;gt; children
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125684"&gt;https://gerrit.libreoffice.org/c/core/+/125684&lt;/a&gt; PPTX import: implement native handling of a color&amp;#8217;s luminance modulation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/125749"&gt;https://gerrit.libreoffice.org/c/core/+/125749&lt;/a&gt; PPTX import: implement native handling of a color&amp;#8217;s luminance offset
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126011"&gt;https://gerrit.libreoffice.org/c/core/+/126011&lt;/a&gt; tools Color: implement MSO-style luminance modulation/offset filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126082"&gt;https://gerrit.libreoffice.org/c/core/+/126082&lt;/a&gt; svx: update objects of pages of a master page when the theme changes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126164"&gt;https://gerrit.libreoffice.org/c/core/+/126164&lt;/a&gt; PPTX export: write the theme for the master pages from the doc model
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126215"&gt;https://gerrit.libreoffice.org/c/core/+/126215&lt;/a&gt; PPTX export: handle theme colors from the doc model for shape text
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126270"&gt;https://gerrit.libreoffice.org/c/core/+/126270&lt;/a&gt; svx: consider color effects when updating objects for theme changes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126400"&gt;https://gerrit.libreoffice.org/c/core/+/126400&lt;/a&gt; PPTX export: handle theme color of shape text with effects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126466"&gt;https://gerrit.libreoffice.org/c/core/+/126466&lt;/a&gt; ODP export: write the theme of a master page
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126502"&gt;https://gerrit.libreoffice.org/c/core/+/126502&lt;/a&gt; ODP import: handle theme of master pages
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126566"&gt;https://gerrit.libreoffice.org/c/core/+/126566&lt;/a&gt; ODP import/export: refer to theme from shape text color
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126722"&gt;https://gerrit.libreoffice.org/c/core/+/126722&lt;/a&gt; ODP import/export: refer to theme from shape text color with effects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126798"&gt;https://gerrit.libreoffice.org/c/core/+/126798&lt;/a&gt; sd: add initial theme UI for master slides
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126850"&gt;https://gerrit.libreoffice.org/c/core/+/126850&lt;/a&gt; sd theme: add UI to set/get the name of a color set
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126905"&gt;https://gerrit.libreoffice.org/c/core/+/126905&lt;/a&gt; sd theme: add UI to set individual colors of a color set
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/126994"&gt;https://gerrit.libreoffice.org/c/core/+/126994&lt;/a&gt; sd theme: add a "theme" palette to the color picker
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/127135"&gt;https://gerrit.libreoffice.org/c/core/+/127135&lt;/a&gt; sd theme: allow setting the color&amp;#8217;s theme index in the chardlg
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/127211"&gt;https://gerrit.libreoffice.org/c/core/+/127211&lt;/a&gt; sd theme: allow setting color effects in the chardlg
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/127304"&gt;https://gerrit.libreoffice.org/c/core/+/127304&lt;/a&gt; sd theme: allow setting color effects in the sidebar
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.4).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 06 Jan 2022 09:07:43 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-01-06:/blog/sd-theme-shape-text.html</guid><category>libreoffice</category><category>en</category></item><item><title>Writer embedded objects: reliably update object previews</title><link>https://vmiklos.hu/blog/sw-ole-update.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Embedded objects in Writer consist of a native data part and a preview part. Until now, there was no
way to force the update of the preview part in case it was empty.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now the Tools &amp;#8594; Update &amp;#8594; Update all menu item updates such previews as well. This is especially
useful if you manipulate the ZIP/XML document directly to insert native data, then load it into
Writer to generate a preview.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://vector.com/"&gt;Vector&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Update all menu item already updates all sorts of generated content: fields, table of contents,
charts, the document layout, but not the preview of embedded objects. You could work this around by
double-clicking on the embedded object to re-generate the preview, but doing this manually for a
larger document is not efficient. This is especially useful for hand-crafted documents which have
proper native data, but no preview image yet.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how an embedded object without a preview looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-ole-update/old.png" alt="https://share.vmiklos.hu/blog/sw-ole-update/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer embedded object with no preview&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now using the Update all menu item turns a sample document into this preview:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-ole-update/new.png" alt="https://share.vmiklos.hu/blog/sw-ole-update/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Writer embedded object with a preview&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/126253"&gt;sw: update previews of OLE objects on
"update all"&lt;/a&gt; is the change implementing this small feature. It works by:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Iterating over the frame formats ("special" formats) of the document
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Filter out shapes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Filter out objects which are only reachable from the undo stack
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Filter out objects which are not embedded ("OLE") objects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Once we have access to the OLE node, jump to its &lt;code&gt;SwOLEObj&lt;/code&gt;, then to its &lt;code&gt;svt::EmbeddedObjectRef&lt;/code&gt;,
  which knows how to re-calculate the preview bitmap
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally notify the OLE node that the preview was updated, so the necessary repaint can happen
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.4).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 15 Dec 2021 09:23:28 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-12-15:/blog/sw-ole-update.html</guid><category>libreoffice</category><category>en</category></item><item><title>Start of linked paragraph and character styles in Writer</title><link>https://vmiklos.hu/blog/sw-linked-styles.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has the start of linked character and paragraph styles. This improves DOCX compatibility,
extends ODT and it&amp;#8217;ll improve the style previews and the UI in the future, hopefully.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Word allows linking paragraph and character styles together, which means only the paragraph one will
be present on the UI. Such a split has benefits if you customize the character properties on the UI
and later you want to update the paragraph properties from a template, for example.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is frequent markup in DOCX files, because Word defaults to splitting out the character
properties of a &lt;code&gt;Test&lt;/code&gt; paragraph style into a &lt;code&gt;Test Char&lt;/code&gt; character style on editing.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Saving the document in Writer and then viewing it in Word lead to loosing these links, so their
style pickers started to show unwanted &lt;code&gt;Test Char&lt;/code&gt; rows.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We used to preserve such linking information when doing DOCX &amp;#8594; DOCX conversion for a while, since
about 2013. But such preservation was in-memory, so if you saved the document to ODT, then such
information was lost. This approach also lacked a real document model, which is necessary to
incrementally build this feature into a complete solution.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the style picker in Word looks like now, after a DOCX &amp;#8594; ODT &amp;#8594; DOCX pipeline:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-linked-styles/new.png" alt="https://share.vmiklos.hu/blog/sw-linked-styles/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Word&amp;#8217;s style picker, new output: no unwanted additional character styles&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how this used to look like before the new changes (note the &lt;code&gt;Heading 1 Char&lt;/code&gt; line between
&lt;code&gt;Heading&lt;/code&gt; and &lt;code&gt;Index&lt;/code&gt;):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-linked-styles/old.png" alt="https://share.vmiklos.hu/blog/sw-linked-styles/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Word&amp;#8217;s style picker, old output: unwanted additional character styles&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here is how the input document looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-linked-styles/ref.png" alt="https://share.vmiklos.hu/blog/sw-linked-styles/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Word&amp;#8217;s style picker, reference output: no unwanted additional character styles&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/122595"&gt;sw: paragraph styles: add doc model &amp;amp; UNO
  API for a linked character style&lt;/a&gt; added the document model and API support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/122681"&gt;sw: paragraph styles: add DOCX filter for
  a linked character style&lt;/a&gt; added the DOCX filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/122753"&gt;sw: paragraph styles: add ODT filter for a
  linked character style&lt;/a&gt; added the ODT filter
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Just to set expectations, this is currently an invisible feature, but unlike the old approach from 8
years ago, this one can be extended into a full feature, incrementally. It also survives ODT
roundtrips.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 12 Nov 2021 16:19:12 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-11-12:/blog/sw-linked-styles.html</guid><category>libreoffice</category><category>en</category></item><item><title>Transparent shadow for tables from PPTX in Impress</title><link>https://vmiklos.hu/blog/sd-table-transparent-shadow.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Impress is now able to correctly render shadows for table shapes, even if the shadow itself or the
fill of the table cells have transparency. The result is now compatible with PowerPoint.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We got a PPTX document, which has a table shape with pink background and a blurry shadow. Impress
rendered a red background, making the text hard to read.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The request was to improve the shadow rendering to be PowerPoint-compatible and in general correctly
support transparency when it comes to table cell fills and table shadows.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The table shadow now looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-table-transparent-shadow/new.png" alt="https://share.vmiklos.hu/blog/sd-table-transparent-shadow/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. New render result in Impress&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Matching the reference rendering:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-table-transparent-shadow/ref.png" alt="https://share.vmiklos.hu/blog/sd-table-transparent-shadow/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Reference render result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While background was red previously:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-table-transparent-shadow/old.png" alt="https://share.vmiklos.hu/blog/sd-table-transparent-shadow/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Old render result in Impress&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that not only the background in the top center cell is pink now, but the blurry table
shadow is still correct.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of fixes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/122349"&gt;tdf#144091 svx: fix unwanted blur of shadow from
  table cell fill&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/122532"&gt;Related: tdf#144091 svx: fix interaction of transp
  cell fill and transp shadow&lt;/a&gt;
  (&lt;a href="https://git.libreoffice.org/core/+/00fa364a2403dc23a786d3f91fde06e10b3a4a9a/svx/source/sdr/primitive2d/sdrdecompositiontools.cxx#629"&gt;key
  part&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With these, it&amp;#8217;s now possible to add transparency to both table cell fills and to table shadows, and
the rendering will take both into account, correctly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 22 Oct 2021 08:48:48 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-10-22:/blog/sd-table-transparent-shadow.html</guid><category>libreoffice</category><category>en</category></item><item><title>Start of list level support in Writer paragraph styles</title><link>https://vmiklos.hu/blog/sw-parastyle-listlevel.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has the start of list level support in Writer paragraph styles. This improves ODT and
DOCX compatibility, and it&amp;#8217;ll improve the style previews and the UI in the future.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A paragraph might have an associated list in Writer and that list can have multiple levels. This is
direct formatting. When it comes to paragraph styles, referring to a list was already possible, but
defining a custom list level was not.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Loosing this information in Word documents was quite annoying, and it turned out that ODF also has
markup for this, just LibreOffice didn&amp;#8217;t implement it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This work is currently done for the document model, scripting API and file filters: style previews &amp;amp;
UI still needs finishing.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer can at the moment preserve list level info from ODT and DOCX files. Here is how a file written
by Writer looks like in Word:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-parastyle-listlevel/parastyle-listlevel.png" alt="https://share.vmiklos.hu/blog/sw-parastyle-listlevel/parastyle-listlevel.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer exporting a paragraph style with list level info&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the style preview in Word takes the list level into account. Doing the same and
applying the list level as part of applying the paragraph style on the Writer UI is still future work.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks to Justin Luth who did the follow-up work to adapt the DOC filter accordingly, and also doing
other related fixes.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/121141"&gt;tdf#137363 DOCX filter: don&amp;#8217;t loose
  &amp;lt;w:ilvl w:val="&amp;#8230;"&amp;gt; of paragraph styles&lt;/a&gt; added document model, API and DOCX import/export support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/121515"&gt;Related: tdf#137363 ODT import: handle
  style:list-level="&amp;#8230;" for para styles&lt;/a&gt; added ODT import/export support
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 29 Sep 2021 16:29:56 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-09-29:/blog/sw-parastyle-listlevel.html</guid><category>libreoffice</category><category>en</category></item><item><title>Unshare shape properties for the same type before insertion in Impress</title><link>https://vmiklos.hu/blog/sd-groupshape-unshare.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Shape properties were shared by shape type (e.g. shared between group shapes) before insertion into
a document model in Impress. This is now fixed: the property names and types are still shared to
help performance, but their values are no longer shared. This helps matching the user expectation
that separate opened documents don&amp;#8217;t share information with each other.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I was working on a testcase for
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=132696"&gt;tdf#132696&lt;/a&gt; when I noticed that the
existing CppunitTest_oox_drawingml testsuite runs fine before my changes, also a newly added
testGroupShapeSmartArt testcase runs fine in isolation, but if I run the whole testsuite, then it
breaks.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Further investigation revealed that in case testGroupShapeSmartArt is executed first, then testTdf131082 fails. This means:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
the first document is opened
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the first document is closed
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the second document is opened
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the second document is saved
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And at this point information from the first document is leaked to the second document, even if the
first document was already closed by the time we performed the save. It turns out the root cause was
&lt;a href="https://bz.apache.org/ooo/show_bug.cgi?id=114206"&gt;i#114206&lt;/a&gt; (reported in 2010), i.e. group shapes
shared their property values till they got inserted to the document model. The first document import
did not consume pending SmartArt properties on a to-be-inserted group shape, the second import was
looking for pending properties, found them. And then the second document&amp;#8217;s save wrote those pending
properties to the file, leading to this unexpected leak.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the first document looks like, containing the blue rectangles (a SmartArt):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-groupshape-unshare/first.png" alt="https://share.vmiklos.hu/blog/sd-groupshape-unshare/first.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. First document with a SmartArt&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the second document looks like, without a SmartArt:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second.png" alt="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Second document after loading, no SmartArt&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here is how the second document looks, after saving to PPTX and reloading:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second-saved.png" alt="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second-saved.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Second document after reloading, with a SmartArt&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;a href="https://git.libreoffice.org/core/commit/c6f25506b02fbd2a087b7e790283921bf8550206"&gt;fix&lt;/a&gt; is to
split out part of &lt;code&gt;SvxItemPropertySet&lt;/code&gt; to a separate class, so that we can keep sharing
&lt;code&gt;SvxItemPropertySet&lt;/code&gt; between multiple instances of the same shape type (describing the name and type
of the various properties), while introducing a new &lt;code&gt;SvxItemPropertySetUsrAnys&lt;/code&gt; that is specific to
each not-yet-inserted shape. This way each pending shape is independent, and in case they are not
inserted to the document model later, that results in no side-effects.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 30 Aug 2021 08:51:10 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-08-30:/blog/sd-groupshape-unshare.html</guid><category>libreoffice</category><category>en</category></item><item><title>Calc buttons with macros: better XLSX support</title><link>https://vmiklos.hu/blog/sc-xlsx-button-macro.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Embedding macros to Calc documents and invoking them by clicking on buttons is a common use-case.
There was also decent support for importing these from XLSX (XLSM to be precise), but the export
side was not on par with the binary XLS export.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Calc now got a series of incremental improvements to map our form controls (buttons in particular)
to OOXML&amp;#8217;s form controls, especially when macros are assigned to such buttons.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Calc as well.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Excel has both
&lt;a href="https://support.microsoft.com/en-us/office/assign-a-macro-to-a-form-or-a-control-button-d58edd7d-cb04-4964-bead-9c72c843a283"&gt;form
controls and ActiveX controls&lt;/a&gt;, and
&lt;a href="https://gerrit.libreoffice.org/c/core/+/94161"&gt;tdf#106181 XLSX export: output form controls&lt;/a&gt;
last year started adding support for form control export to XLSX.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hoping that this will be mostly shared drawingML export code fixing (benefiting DOCX and PPTX as
well), it seemed reasonable to assume that we can improve button handling from the "it&amp;#8217;s lost" state
to "it&amp;#8217;s good enough" with some effort.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now Excel shows the button and you can click on it:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/new.png" alt="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Excel consuming our XLSM output with a button and a macro&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While it used to just refuse our export result:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/old.png" alt="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Excel refusing bad XLSM output&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the end goal was reached via a set of incremental commits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118085"&gt;sc: don&amp;#8217;t require ctrl-click when clicking
  on internal links of shapes&lt;/a&gt; was a UX problem, users don&amp;#8217;t finding Ctrl-click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118168"&gt;XLSX export: improve handling of checkbox
  (form controls)&lt;/a&gt; was an improvement to the existing checkbox export code, probably today&amp;#8217;s Excel is just more strict in what it accepts
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118219"&gt;XLSX export: handle button form controls&lt;/a&gt;
  adds the initial button support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118401"&gt;XLSX import: fix handling of named ranges
  referring to PathMissing sheets&lt;/a&gt; fixes an import problem around named ranges and external references
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118485"&gt;XLSX export: handle macros on button form
  controls&lt;/a&gt; adds the macro bits of buttons
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118600"&gt;XSLX export, button form control: fix
  handling of no macros&lt;/a&gt; is a fixup for non-macro buttons
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 22 Jul 2021 10:55:43 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-07-22:/blog/sc-xlsx-button-macro.html</guid><category>libreoffice</category><category>en</category></item><item><title>Writer line heights: removing a 16bit limit</title><link>https://vmiklos.hu/blog/sw-line-height.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Line heights in Writer are typically defined in points on the UI (e.g. 12pt), though they are
measured in twips internally (1 point is 20 twips). This height was stored in a 16bit unsigned
integer, so the maximum allowed height was 65536 twips, around 116 cm.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now we track line heights with 32 bits ints, so this limitation is practically removed.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://vector.com/"&gt;Vector&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Once you insert an image to a Writer document, you can customize its anchor type. The as-char
anchor type is handy if you don&amp;#8217;t want text to flow around the image. This has the side effect that
a large image significantly increases the nominal height of a line. The problematic document had an
image height of 118.9 cm (46.81 inch), so the unsigned integer used to represent its height wrapped
around, leading to an incorrect layout.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now it looks like the way you would expect it:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-line-height/sw-line-height.png" alt="https://share.vmiklos.hu/blog/sw-line-height/sw-line-height.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer as-char image with height that is larger than 65k twips&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the end goal was reached via a set of incremental commits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The very first integer truncation was found using gdb, manually. At that point it was clear that
  some tool to catch the problematic places would accelerate development. First
  &lt;a href="https://gerrit.libreoffice.org/c/core/+/115948"&gt;sw: replace most static_cast&amp;lt;sal_uInt16&amp;gt;()
  calls with o3tl::narrowing()&lt;/a&gt; prepared Writer code so that sanitizers can flag the interesting code
  locations when using &lt;code&gt;-fsanitize=implicit-unsigned-integer-truncation
  -fsanitize=implicit-signed-integer-truncation&lt;/code&gt;. This is important, as conversion with
  &lt;code&gt;static_cast&amp;lt;&amp;gt;&lt;/code&gt; counts as an explicit integer conversion, and sanitizers can&amp;#8217;t flag such
  conversions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then &lt;a href="https://gerrit.libreoffice.org/c/core/+/115873"&gt;sw: allow the height of a line to be
  larger than 65536 twips&lt;/a&gt; took care of the height part.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally &lt;a href="https://gerrit.libreoffice.org/c/core/+/116835"&gt;sw: allow the width of a line
  portion to be larger than 65536 twips&lt;/a&gt; fixed the width part.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 10 Jun 2021 10:25:51 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-06-10:/blog/sw-line-height.html</guid><category>libreoffice</category><category>en</category></item></channel></rss>