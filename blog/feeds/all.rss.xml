<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>What is Miklos hacking</title><link>https://vmiklos.hu/blog/</link><description></description><lastBuildDate>Mon, 06 Feb 2023 08:45:24 +0100</lastBuildDate><item><title>Citation handling: plumbing in Writer for e.g. Zotero</title><link>https://vmiklos.hu/blog/sw-zotero-plumbing.html</link><description>&lt;p&gt;Writer now has a set of new automation commands and APIs that allow clients to build user interface
for citation handling that's more advanced than the default in-Writer bibliography support.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, see &lt;a href="https://www.collaboraoffice.com/code-22-05-release-notes/"&gt;the CODE
release notes&lt;/a&gt; for one possible way to
use this.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-zotero-plumbing/zotero.png"&gt;&lt;figcaption&gt;Citations and bibliography in Writer, using fieldmarks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Users frequently using scientific citations are probably familiar with the limits of Writer's
built-in bibliography support, and solutions like &lt;a href="https://www.zotero.org/"&gt;Zotero&lt;/a&gt; appeared (with a
LibreOffice extension included) to improve that situation.&lt;/p&gt;
&lt;p&gt;This means that instead of storing all your scientific notes and data locally, you can store them on
a Zotero server, then work with that from anywhere, once you provide your credentials.&lt;/p&gt;
&lt;p&gt;The trouble comes when you want to combine this with collaborative editing, which is provided by
Online, but you can't use the extension made for the desktop.&lt;/p&gt;
&lt;p&gt;The above CODE release notes explains how an end user can use this feature, this post is meant to
document what new UNO commands and LOK APIs I added that serve as a backend for this. Especially the
UNO commands are also useful in other contexts, like in macros or other extensions.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Zotero can store citations using 3 markups in documents: fields (DOCX only), bookmarks (DOCX and
ODT) and finally reference marks / sections (ODT only). The added plumbing allows several operations
for all 3 cases, to work with existing documents using any of these markups.&lt;/p&gt;
&lt;p&gt;The citation and the bibliography is handled the same way for fields (Writer's fieldmarks) and
bookmarks. The last case uses reference marks for citations, but sections for the bibliography.&lt;/p&gt;
&lt;p&gt;The following operations are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create the citation / bibliography&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read the object under the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read all objects of a given type in the document&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update the object under the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update all objects of a given type in the document&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delete all objects of a given type in the document&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reading is only available to LOK clients, you need to call the
&lt;a href="https://github.com/libreoffice/core/blob/1e92059fe95cc1ba31aab4a66926d55bc00d0684/include/LibreOfficeKit/LibreOfficeKit.hxx#L483-L492"&gt;getCommandValues()&lt;/a&gt;
API. The rest is normal &lt;a href="https://wiki.documentfoundation.org/Development/DispatchCommands"&gt;UNO
commands&lt;/a&gt; that you can invoke from
document macros or extensions as well.&lt;/p&gt;
&lt;p&gt;The added plumbing is the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Fieldmark&lt;/th&gt;
&lt;th&gt;Bookmark&lt;/th&gt;
&lt;th&gt;Refmark&lt;/th&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create&lt;/td&gt;
&lt;td&gt;.uno:TextFormField&lt;/td&gt;
&lt;td&gt;.uno:InsertBookmark&lt;/td&gt;
&lt;td&gt;.uno:InsertField&lt;/td&gt;
&lt;td&gt;.uno:InsertSection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:TextFormField")&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:Bookmark")&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:Field")&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read all&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:TextFormFields")&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:Bookmarks")&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:Fields")&lt;/td&gt;
&lt;td&gt;getCommandValues(".uno:Sections")&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update&lt;/td&gt;
&lt;td&gt;.uno:UpdateTextFormField&lt;/td&gt;
&lt;td&gt;.uno:UpdateBookmark&lt;/td&gt;
&lt;td&gt;.uno:UpdateField&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update all&lt;/td&gt;
&lt;td&gt;.uno:TextFormFields&lt;/td&gt;
&lt;td&gt;.uno:UpdateBookmarks&lt;/td&gt;
&lt;td&gt;.uno:UpdateFields&lt;/td&gt;
&lt;td&gt;.uno:UpdateSections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete all&lt;/td&gt;
&lt;td&gt;.uno:DeleteTextFormFields&lt;/td&gt;
&lt;td&gt;.uno:DeleteBookmarks&lt;/td&gt;
&lt;td&gt;.uno:DeleteFields&lt;/td&gt;
&lt;td&gt;.uno:DeleteSections&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/1ff360c29c99a570bfe59c69d8f589d4f2b59135"&gt;sw: add new FieldType parameter for the .uno:TextFormField command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6870c0c3385bf5d19e9c80bf973fca255ae38c08"&gt;sw: add new FieldCode parameter for the .uno:TextFormField command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/1c2ef850db29beb369dcc89a58fc73416ecd9c5c"&gt;sw, .uno:TextFormField command: accept HTML in the FieldResult parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/24219cc1e9829f82a533667aef0f51b6a7df6fc2"&gt;sw lok, .uno:TextFormFields: expose field code of fieldmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/1e83197fdd4263ca4817a6ac16f274aaee3e66fd"&gt;comphelper: support property values arrays in JsonToPropertyValues()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/7765b442e13048f857fd7ee49ced1731caee297e"&gt;sw: add a new .uno:TextFormFields UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/12f434277bc424f01597be83020a569c84bbee5a"&gt;sw: hide TextFormFields from the customization dialog like&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/5e8f6dcb8ce00d2d5e35b3cf5654187b3068276c"&gt;sw lok, .uno:SetDocumentProperties: expose value of custom document properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2c149dc9983317bce9116649270c3513adc35514"&gt;libreofficekit: add a way to invoke getCommandValues()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/afb362c60a18243621834dcf2b30672be6eed76f"&gt;sfx2: extend .uno:SetDocumentProperties to update custom doc props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/fa82e151d80d15eeb6dfae434f1dbb3b68907188"&gt;sw, .uno:InsertBookmark: add a new BookmarkText parameter and accept HTML there&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/c2bcbd36d1913dc1d5ca4bb64fa30740f17bf326"&gt;sw: split out some of the LOK parts of SwXTextDocument into a separate file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e0bf2712aa9e240748534e3a7498d41c8eeeb9d7"&gt;sw, lok: implement a getCommandValues(Bookmarks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/724180ec495a696c79332653cb6fb52ecfbccc29"&gt;sw: add a new .uno:UpdateBookmarks UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/16075474819696f920979969474aa8300f4af530"&gt;sw, field insert: handle the Content param for refmarks and accept HTML there&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a178a2ac6df8dc63a7ab8d4a19b90ae8a17baca4"&gt;sw UI: fix crash on inserting a fieldmark inside a fieldmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/3585d0414ffe08890856e5c09f453b9f566323df"&gt;sw, lok: implement a getCommandValues(Fields)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/babba472391d26aed68d7ac31c7a918c08e65256"&gt;sw, UpdateFields: add new TypeName, NamePrefix and Fields parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/bb20dee2ef1b0804065e1cda2c834d257fdd90ed"&gt;sw lok: expose field type &amp;amp; command of fieldmark under cursor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/471804e251b4e15b37a10920bd4b88b40f97b227"&gt;sw update of refmarks: fix handling of ignored refmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/f83c1353b94fc7dec79d05ac45c11f40f497261d"&gt;sw: UpdateFieldContents: fix typos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/337416dafb66ed8f930d2d69e83fae438fc85f3c"&gt;sw: add a new .uno:UpdateTextFormField UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/5a2ee5ba893b6b8f4e7fd6623b7f10faf0bda509"&gt;sw lok: get all refmarks: sort the refmarks array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/dd775cd630c907bc7d8bcd6f57ffd3f66115a5ba"&gt;sw, .uno:InsertSection: add a new Content parameter and accept HTML there&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/8336c61ba059551cb74df5ec53d2b45a3cf41814"&gt;sw: document FN_UPDATE_TEXT_FORMFIELD and FN_UPDATE_TEXT_FORMFIELDS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2ddd41b420cea7f1b988f0b8acbca564b2811382"&gt;sw, lok: implement a getCommandValues(Sections)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/913b399a73c4d6dfd2c9f5983f56f612f3262fa7"&gt;vcl ITiledRenderable: rename supportsCommandValues() to supportsCommand()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d2318503d559c3797965da777627e4ee45143043"&gt;sw, UpdateBookmarks: support renaming bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/71a479afb7e9762de930361e6089e23ab8d4af74"&gt;sw: add a new .uno:UpdateSections command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/c68d06dfa1498f862923eaddf3e5d247650a53d5"&gt;sw: add a new .uno:DeleteTextFormFields UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/30f6793baa5529b0594407cd0caaf3a3cde3289c"&gt;sw: fix FN_UPDATE_TEXT_FORMFIELD typo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/4bcb66ec7b417fbe113267f2615e78fe47eb55ca"&gt;sw lok: expose name of bookmark under cursor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/ea208f6004770eb4b81d28e6930cd0c7bd5d8f12"&gt;sw: add a new .uno:UpdateBookmark UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/200e2a3c28bdeec785ac389473f5fca6576071a0"&gt;sw, UpdateSections: remove not needed StateMethod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/81f690ec0cb2a6dc0d6ca0f6de3adcc07eb7bc12"&gt;sw lok: expose name of refmark under cursor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/60be9811555b935d6860157ebf26fac6b48327ac"&gt;sw, FN_DELETE_TEXT_FORMFIELDS: allow deleting all fieldmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/04d50fa627faabb9211bd9fa9eb134599fb01982"&gt;sw: rename getBookmarkFor() to getInnerBookmarkFor()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/402ab3d145a1e8e123caabf4567aef7b6631fc3c"&gt;sw: add a new .uno:UpdateField UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/40753de837b9776dd8b33e830be0cceef83f024a"&gt;sw: add a new .uno:DeleteBookmarks UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/1d6593dd799ff4eb931ffbb5338e4856fb87f77f"&gt;sw: add a new .uno:DeleteFields UNO command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2cf59dee9637dcb741806ce61e50b6be427dd7b8"&gt;sw, UpdateBookmark: address some minor performance nits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/0250d6c643f2866c4de7e3c943248ffda9205d05"&gt;sw, UpdateFieldContent: address a minor performance nit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/f41d42491528905594b9a36a3bf16998f309c702"&gt;sw: disable AutoUpdate for many new recent field/book/refmark UNO commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/ceea8f3924f26d5f10adc41b9ea587c77c2fda74"&gt;sw: .uno:TextFormField: add new Wrapper parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/43d80906c8693ca27c5b3077fbaa259df4004924"&gt;sw: .uno:TextFormField: handle Endnote as a value for the Wrapper parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/91c0e64c2f4d67c6a1073a73b1e467a3b28f0e85"&gt;sw: rename getBookmarkFor() further to getOneInnermostBookmarkFor()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e9d5ccd5a0822969412dbddf0191e28703e72e82"&gt;sw, .uno:InsertField: add a new Wrapper parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/04d988d3c368fe07ae3c44c536a4513e424f104e"&gt;sw, .uno:InsertField: handle Endnote as a value for the Wrapper parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a5a1ea2f7d784c5c6c33f332ba61aceb7af3eca4"&gt;sw: add a new .uno:DeleteSections UNO command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.6).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 06 Feb 2023 08:45:24 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2023-02-06:/blog/sw-zotero-plumbing.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improved number portion formatting in Writer</title><link>https://vmiklos.hu/blog/sw-number-portion.html</link><description>&lt;p&gt;Number portions generated when using lists/numberings/bullets in Writer now can have formatting
which is preserved in ODT files as well.&lt;/p&gt;
&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; for funding this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Word and DOCX files support explicit character properties for the paragraph marker, and these are
also used for the formatting of a number portion if the paragraph has one. This was already loaded
from / saved to DOCX, but it was lost when saving to ODT.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, we got a bug document, where the reference rendering and our rendering differed:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-number-portion/sw-number-portion-1.png"&gt;&lt;figcaption&gt;Reference (on the left) and our old (on the right) rendering, due to bookmarks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In this case, what happened was that part of the heading text was covered by a bookmark, so we first
created multiple character ranges (outside the bookmark, inside the bookmark), then as an
optimization we even unified them to be a single formatted character range, covering the entire
paragraph. This was a document model that is different from the bookmark-free version, where the
character formatting was set on the paragraph itself.&lt;/p&gt;
&lt;p&gt;This was fixed at render time and at DOCX export time to consider both full-paragraph character
ranges and in-paragraph character properties. For a while, this looked like the entire story, since
this now looks good in Writer:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-number-portion/sw-number-portion-1good.png"&gt;&lt;figcaption&gt;Our new rendering, handling bookmarks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;A bit later another, related bug was discovered. Given a reference document:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-number-portion/sw-number-portion-2-ref.png"&gt;&lt;figcaption&gt;Reference rendering of a second document&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Just opening this DOCX file in Writer, it looked like this:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-number-portion/sw-number-portion-3-import.png"&gt;&lt;figcaption&gt;Old rendering in Writer&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Note how the first number portion turned into bold! This was expected after the above layout change
to consider full-paragraph formatted character ranges, but it also meant that Word can have one
set of character formatting for the entire character range of a paragraph, and another for the
paragraph marker.&lt;/p&gt;
&lt;p&gt;To make the problem worse, this second document was showing that even the ODT export/export feature
had problems, still:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-number-portion/sw-number-portion-4-odf.png"&gt;&lt;figcaption&gt;Old rendering in Writer after ODT save + load&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The fix to solve all of the above was to undo the previous render / DOCX export change, then teach
the ODT export to explicitly save the paragraph marker formatting (as an empty span at the end of
the text node) to ODT, and also to load it back.&lt;/p&gt;
&lt;p&gt;This means that now Writer can render the second document correctly, without breaking the first
document:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-number-portion/sw-number-portion-5-good.png"&gt;&lt;figcaption&gt;New rendering in Writer&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;!-- s/\([^ ]\+\) \(.*\)/- [\2](https:\/\/git.libreoffice.org\/core\/commit\/\1)/g --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e6907bc15cfa3c561d4aafbcc92eff291dc68cdd"&gt;sw, numbering portion format: consider full-para char formats as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/dfba56830288b381eaaaf6b8f9454834301497db"&gt;DOCX export, numbering portion format: consider full-para char formats as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/585d440df98ff3b967c191908ac2d4b2f7e29326"&gt;sw, numbering portion format: ignore char formats covering the entire paragraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/3998b98749739b2c499ffc4d83188e1034b66750"&gt;sw: ODT import/export of DOCX's paragraph marker formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/4634a27dd6f762168b3d7820326611b20b7d385c"&gt;sw: fix ODT import of paragraph marker formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.6).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 03 Jan 2023 08:30:40 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2023-01-03:/blog/sw-number-portion.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improved watermark in the PDF export</title><link>https://vmiklos.hu/blog/pdf-watermark.html</link><description>&lt;p&gt;The PDF export now supports various additional properties for the optional PDF watermark.&lt;/p&gt;
&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; for funding this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/pdf-watermark/rotate-and-color.png"&gt;&lt;figcaption&gt;Rendering of a PDF watermark with custom rotation and color&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;When you hear the word "watermark", you probably have something like the above picture in mind.&lt;/p&gt;
&lt;p&gt;Instead, what the PDF export had is more like a proof of concept:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/pdf-watermark/default.png"&gt;&lt;figcaption&gt;Rendering of a PDF watermark with default settings&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The request was to add new options to control the font size, font name, rotation angle and color of
the watermark, so in case an organization already has a given style of watermarks they prefer, our
PDF export can be adapted accordingly.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, now you can specify a custom color, e.g. gray (#7f7f7f), using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;soffice --convert-to pdf:writer_pdf_Export:&amp;#39;{&amp;quot;Watermark&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;draft&amp;quot;}, &amp;quot;WatermarkColor&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;long&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;8355711&amp;quot;}}&amp;#39; test.odt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/pdf-watermark/color.png"&gt;&lt;figcaption&gt;Rendering of a PDF watermark with custom color&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Then you can also customize the font size, in case the automatic size would not fit your needs,
using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;soffice --convert-to pdf:writer_pdf_Export:&amp;#39;{&amp;quot;Watermark&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;draft&amp;quot;}, &amp;quot;WatermarkFontHeight&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;long&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;100&amp;quot;}}&amp;#39; test.odt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/pdf-watermark/font-size.png"&gt;&lt;figcaption&gt;Rendering of a PDF watermark with custom font size&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Or perhaps you want a serif font, not a sans one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;soffice --convert-to pdf:writer_pdf_Export:&amp;#39;{&amp;quot;Watermark&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;draft&amp;quot;}, &amp;quot;WatermarkFontName&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Times&amp;quot;}}&amp;#39; test.odt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/pdf-watermark/font-name.png"&gt;&lt;figcaption&gt;Rendering of a PDF watermark with custom font name&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Finally you can have a custom rotate angle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;soffice --convert-to pdf:writer_pdf_Export:&amp;#39;{&amp;quot;Watermark&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;draft&amp;quot;}, &amp;quot;WatermarkRotateAngle&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;long&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;450&amp;quot;}}&amp;#39; test.odt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/pdf-watermark/rotate.png"&gt;&lt;figcaption&gt;Rendering of a PDF watermark with custom rotation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Using these building blocks, you can also build combinations, the first screenshot above was created
using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;soffice --convert-to pdf:writer_pdf_Export:&amp;#39;{&amp;quot;Watermark&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;draft&amp;quot;}, &amp;quot;WatermarkRotateAngle&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;long&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;450&amp;quot;}, &amp;quot;WatermarkColor&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;long&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;8355711&amp;quot;}}&amp;#39; test.odt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;i.e. the configuration JSON is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Watermark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;WatermarkRotateAngle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;450&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;WatermarkColor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8355711&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;!-- s/\([^ ]\+\) \(.*\)/- [\2](https:\/\/git.libreoffice.org\/core\/commit\/\1)/g --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/21c4749d0205d1ba90494edc2527ff9d11f86f87"&gt;Related: tdf#54053 PDF export: add UNO API to customize the watermark color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/175e514c93b3696faa8c331c8b8f56e832ceb4c1"&gt;Related: tdf#54053 PDF export: add UNO API to customize the watermark font size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d1dd9b9733511ff451e264169537c08fa14c574f"&gt;Related: tdf#54053 PDF export: add UNO API to customize the watermark font name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/574db5efa9a2ab6d70faedf538be77a1eb8c597b"&gt;Related: tdf#54053 PDF export: add UNO API to customize the watermark rotation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.5).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 05 Dec 2022 17:07:21 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-12-05:/blog/pdf-watermark.html</guid><category>libreoffice</category><category>en</category></item><item><title>Content controls in Writer: titles and tags</title><link>https://vmiklos.hu/blog/sw-content-controls5.html</link><description>&lt;p&gt;Writer now supports titles and tags for content controls, which helps providing context for the
filled in text even if the placeholder text is replaced already.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, see &lt;a href="https://vmiklos.hu/blog/sw-content-controls4.html"&gt;the previous
post&lt;/a&gt; for background.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls5/content-control-alias.png"&gt;&lt;figcaption&gt;Rendering of a title for a content control&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Once several content controls are added to a document, it's easy to forget what was the exact
purpose of what content control. Think of a press release for example – those regularly start with
a location and a date, but once this information is provided, one no longer knows which content
control was for which content.&lt;/p&gt;
&lt;p&gt;Titles solve this problem for the user: similar to Writer's header/footer buttons, this button
appears when you enter the content control and reminds you what content is expected there, even if
the placeholder is already replaced.&lt;/p&gt;
&lt;p&gt;Tags serve a similar purpose, but they are unique, machine-readable keys or identifiers, so once the
form is filled in, an external consumer can easily extract the information from the document, given
a specific tag.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Titles (also known as aliases) and tags are now not only preserved, but also we have a UI to create,
show, edit and delete them. This is available in the desktop rendering and also in the LOK API.&lt;/p&gt;
&lt;p&gt;Somewhat related, in case a content control breaks into multiple lines or has formatting to break
into multiple text portions, we now only emit one PDF widget for it, taking the description of the
widget from the content control's title.&lt;/p&gt;
&lt;p&gt;The last related improvement is that now we handle data binding for date content controls, which
means that you can specify a timestamp, a language and a date format, and we'll format that
timestamp and update the content control's string value at import time from DOCX.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;!-- s/\([^ ]\+\) \(.*\)/- [\2](https:\/\/git.libreoffice.org\/core\/commit\/\1)/g --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/481a082469802ffce08cd8c110e715260015eb97"&gt;sw content controls: preserve alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/5262aab9d220675f616579720b4bb43ee03cccfb"&gt;sw content controls: preserve tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a70f5f141c1e6013abb4c1b3219e017b2eea40a8"&gt;sw content controls: emit only one PDF widget for multiple text portions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/b138d6c12aaeb0b87dce15ea52dd134cf1abf6ac"&gt;tdf#151190 sw content controls: make them read-write in protected sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/1a94cd8257ef4c462eaaa6d49bf4f26c9ac56a5e"&gt;sw content controls: add rendering for the alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/888a8c3ca70ed19309c15ff7b9f0968ece337cb5"&gt;sw content controls, alias and tag: add ODT filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/add110bad816fadeb96e7af0d4689389c04c263e"&gt;sw content controls, alias and tag: add UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e368d26a7f24dc25f3d855511baabc128bc151e6"&gt;sw content controls, alias: add LOK API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/122419be4f7bf576f7db5456b8b6b1f6f700487f"&gt;sw content controls, alias: add PDF export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/58002ab85d992c7ac44d8bb4d135246b67aa5cc7"&gt;sw content controls: enable data binding for date&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.5).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 03 Nov 2022 13:37:09 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-11-03:/blog/sw-content-controls5.html</guid><category>libreoffice</category><category>en</category></item><item><title>Content controls in Writer: PDF export and combo box type</title><link>https://vmiklos.hu/blog/sw-content-controls4.html</link><description>&lt;p&gt;Writer now supports exporting content controls to PDF and a 7th content control type: it is possible
to differentiate between drop-downs and combo boxes.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, see &lt;a href="https://vmiklos.hu/blog/sw-content-controls3.html"&gt;the previous
post&lt;/a&gt; for background.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls4/adobe-writer.png"&gt;&lt;figcaption&gt;PDF export of Writer content controls into PDF&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Writer users can create fillable forms using content controls, but the PDF export only contained the
plain text representation of them. PDF can also have fillable widgets for form filling, so it's
logical to map content controls to PDF widgets.&lt;/p&gt;
&lt;p&gt;A perfect mapping is not possible, since PDF widgets are always a single rectangle and Writer
content controls is a list of rectangles (text portions), but this doesn't cause a problem in most
cases. The size of the PDF rectangle is determined based on the placeholder's size from Writer.&lt;/p&gt;
&lt;p&gt;Benefits includes not having to insert a control shape, manually positioned to look like it's in
line with the surrounding text. An other benefit is that this way the widget's style (font name,
size, etc) can be specified using Writer styles, not with shape properties. It's also interesting
that Word itself doesn't seem to support content controls in its PDF export at the time of writing.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PDF export now automatically turns Writer content controls into fillable widgets for the rich text,
plain text, checkbox, drop-down, combo box and date types.&lt;/p&gt;
&lt;p&gt;Combo box itself is a new type: now combo box content can be either free-form or one of its list
items, while drop-down can only be one of its list items.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/82d90529dc2b3cb8359dec78852cbd910a66d275"&gt;sw content controls, rich text: add initial PDF export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/9bad5be0ffdcdee92d40162b598ed2ab2815e5d5"&gt;sw content controls, checkbox: add PDF export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6b2433f3b66c1f118dabcd40924122deb2d4f204"&gt;sw content controls, dropdown: add PDF export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/f7408cf0e472be91bdb7a4d2a4b8da3eb9a049a9"&gt;sw content controls, date: add PDF export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/493b10997053882d06803156a98ae8924bf7660d"&gt;sw content controls: add PDF export of font properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/08bce8eeb2e18c7cea4108dbfc2519ada56e8b61"&gt;sw content controls: fix getString() and setString() on SwXContentControl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/de90c192cb8f1f03a4028493d8bfe9a127a76b2a"&gt;sw content controls, plain text: enable DOCX filter with data binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/addfb3cce0f7ce8fbd0b169d467b6956ed95dbb5"&gt;sw content controls: add a11y description for PDF export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/276f3a3ce52ca422bf5ebccfa2c926d3e87d5eab"&gt;sw content controls, combo box: add doc model &amp;amp; UNO API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/37656a47d8797d45d706a17ab8843dcb8db90bbc"&gt;sw content controls, combo box: make the dropdown case read-only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/21d93d8d2ffd9c5d5cfe9064590b35e0727295c9"&gt;sw content controls, combo box: add ODT filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/01b1f57a90172a76faa1489b3b72250ee76169a6"&gt;sw content controls, combo box: add DOCX filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/49f1bf56ebfa3c96aa90835c1121eb827d713b9d"&gt;sw content controls, combo box: add insert UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/82b9ff35649cd67ca16296676d2ad1e4eff15493"&gt;sw content controls, combo box: add PDF export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.5).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 03 Oct 2022 08:25:28 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-10-03:/blog/sw-content-controls4.html</guid><category>libreoffice</category><category>en</category></item><item><title>Cropped video for media shapes in Impress</title><link>https://vmiklos.hu/blog/sd-video-crop.html</link><description>&lt;p&gt;Impress now supports cropped videos in slide edit mode and during slideshow for documents imported
from PowerPoint.&lt;/p&gt;
&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sd-video-crop/new.png"&gt;&lt;figcaption&gt;PowerPoint-style cropped video in Impress&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;PowerPoint handles videos by taking a preview bitmap from the video, and then it allows users to
apply various effects on that bitmap, like cropping. The complex aspect of this is that such filters
are also respected while playing the video as well.&lt;/p&gt;
&lt;p&gt;Impress didn't store such properties on the media shape, which lead to distorted aspect ratio when
playing some cropped videos from PPTX files. This lead to this preview in Impress before the work:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sd-video-crop/bad.png"&gt;&lt;figcaption&gt;Video with lost cropping in Impress&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first problem was that the Impress preview was picked from the 3rd second of the video
(presumably to avoid a black preview in many videos that start with a short black fade-in), while
PowerPoint can store an explicit preview from the video (seems to be the first frame), so no matter
what effects you apply, the previews were just different as the source bitmap was different. This
could be fixed by looking for an explicitly provided bitmap for the video first, and only then
asking the various &lt;code&gt;avmedia/&lt;/code&gt; backends to produce a preview.&lt;/p&gt;
&lt;p&gt;Once the preview's initial bitmap was OK, it was necessary to take cropping into account. This was
first done for the preview bitmap, and then also for the gstreamer backend (the relevant one for
Linux, as a start) of &lt;code&gt;avmedia/&lt;/code&gt;, which is responsible for the actual video playback. The gstreamer
bits were done by first creating a
&lt;a href="https://gstreamer.freedesktop.org/documentation/videocrop/videocrop.html"&gt;videocrop&lt;/a&gt; element and
then connecting that to the existing
&lt;a href="https://gstreamer.freedesktop.org/documentation/playback/playbin.html#playbin:video-filter"&gt;playbin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With these sorted out, we get rendering which matches the reference:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sd-video-crop/ref.png"&gt;&lt;figcaption&gt;Cropped video in PowerPoint&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The last step was to load/save the explicit preview and the crop from/to ODF as well, not only PPTX.
We use a markup like this to store the information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style:style&lt;/span&gt; &lt;span class="na"&gt;style:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gr1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style:graphic-properties&lt;/span&gt; &lt;span class="na"&gt;fo:clip=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rect(0cm, 1.356cm, 0cm, 1.356cm)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style:style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now that the &lt;code&gt;gr1&lt;/code&gt; automatic style is defined, we can refer to it from a media shape:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;draw:frame&lt;/span&gt; &lt;span class="na"&gt;draw:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;draw:style-name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gr1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;draw:plugin&lt;/span&gt; &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xlink:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;simple&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xlink:show=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;embed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xlink:actuate=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;onLoad&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;draw:mime-type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/vnd.sun.star.media&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/draw:plugin&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;draw:image&lt;/span&gt; &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pictures/MediaPreview1.png&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/draw:frame&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The nice property of this markup is that automatic styles are already used for other shapes and
image previews are also used for e.g. table shapes, so this is just using existing markup in a new
context, but the ODF spec already allows this markup.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/138763"&gt;Related: tdf#149971 svx: support explicitly provided snapshots for media shapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/138808"&gt;Related: tdf#149971 avmedia: add doc model and render for crop of media objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/138867"&gt;tdf#149971 avmedia: implement video crop support in the gsteamer backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/138959"&gt;avmedia: implement video crop support in the ODP filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/138971"&gt;xmloff: extract ExportGraphicPreview() from XMLShapeExport::ImpExportTableShape()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User interface to create such a crop, support for other video effects (e.g. black-and-white) and
other backends (Windows, macOS) could be done, but is future work currently.&lt;/p&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable
snapshot&lt;/a&gt;.  Collabora intends to
continue supporting and contributing to LibreOffice, the code is merged so we expect all of this
work will be available in TDF's next release too (7.5).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 01 Sep 2022 09:46:45 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-09-01:/blog/sd-video-crop.html</guid><category>libreoffice</category><category>en</category></item><item><title>Content controls in Writer: the plain text type</title><link>https://vmiklos.hu/blog/sw-content-controls3.html</link><description>&lt;p&gt;Writer now supports a 6th content control type: it is possible to insert a plain text content
control.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora
Online&lt;/a&gt;, done as a
&lt;a href="https://vmiklos.hu/blog/hackweek-2021.html"&gt;HackWeek&lt;/a&gt; project, but the feature is
fully available in desktop Writer as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls3/sw-content-control-plain-text.png"&gt;&lt;figcaption&gt;Word-style plain text content control, user interface&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Writer users can put a content control around a piece of rich text, see
&lt;a href="https://vmiklos.hu/blog/sw-content-controls2.html"&gt;Content controls in Writer: dropdown, picture and date
types&lt;/a&gt; for the first five types.&lt;/p&gt;
&lt;p&gt;The next step in this journey is plain text: even if one of the big advantages of content controls
over input fields is that they allow rich formatting, sometimes you want to restrict this. For
example, if one has to fill in their name, then it makes no sense to mark the family name as bold
while leaving the given name as non-bold. This would just lead to inconsistent look.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is now a new Form → Content Controls → Insert Plain Text Content Control
menu item to create a plain text content control. If you try to make a
selection that is a subset of the text inside the content control and you try
to format it, the whole text in the content control is formatted to maintain
the invariant that plain text has no formatting itself, just the formatting of
the whole content control.&lt;/p&gt;
&lt;p&gt;As usual, you can delete this content control later. You can also load/save it
to ODT/DOCX and it's preserved.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137263"&gt;sw content controls, plain text: add doc model &amp;amp; UNO API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137280"&gt;sw content controls, plain text: apply formatting to the entire contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137340"&gt;sw content controls, plain text: add ODT filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137349"&gt;sw: fix heap-use-after-free in SwTextNode::InsertHint()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137398"&gt;sw content controls, plain text: add DOCX export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137399"&gt;sw content controls, plain text: add DOCX import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/137447"&gt;sw content controls, plain text: add insert UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.5).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 01 Aug 2022 09:57:43 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-08-01:/blog/sw-content-controls3.html</guid><category>libreoffice</category><category>en</category></item><item><title>Document themes in Impress: shape fill</title><link>https://vmiklos.hu/blog/sd-theme-shape-fill.html</link><description>&lt;p&gt;Impress now has the next step of document theme support: it is possible to refer to the theme colors
from shape fill colors (including effects).&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Impress as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sd-theme-shape-fill/ui.png"&gt;&lt;figcaption&gt;PowerPoint-style themed shape fill, user interface&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;PowerPoint users can attach a set of colors (and fonts, etc.) to master pages, and then refer to
these in many areas, like shape text or shape fill. It was already possible to define theme colors
and refer to them from shape text (see &lt;a href="https://vmiklos.hu/blog/sd-theme-shape-text.html"&gt;Start of document themes in Impress: shape
text&lt;/a&gt; for details).&lt;/p&gt;
&lt;p&gt;The next step in this journey is shape fill: if your shape is filled with some color, it can be a
theme color, as visible on the above screenshot. One interesting aspect of this is that the default
shape fill color can now depend on the master page, and it may not be the same for all slides (this
is what would happen with styles, when not using theming).&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is a demo that shows how it works:&lt;/p&gt;
&lt;p&gt;If one opens the &lt;code&gt;svx/qa/unit/data/theme.pptx&lt;/code&gt; test file from core.git, it looks like this:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sd-theme-shape-fill/old.png"&gt;&lt;figcaption&gt;PowerPoint-style themed shape fill, after opening&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The middle row has 3 rounded rectangles: the first is filled with the 'Accent 1' color, the second is
the same, but 60% lighter and finally the last one is the same, but 25% darker.&lt;/p&gt;
&lt;p&gt;Here is how you can change what the 'Accent 1' color is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click 'Master View' on the sidebar to go to the master of the current slide.&lt;/li&gt;
&lt;li&gt;Right click -&amp;gt; 'Slide Properties' opens the 'Slide Properties' dialog.&lt;/li&gt;
&lt;li&gt;The 'Theme' page has an 'Accent 1' row, with a blue color.&lt;/li&gt;
&lt;li&gt;Change that to an orange color: click on the 'Accent 1' drop-down, then select 'Theme colors',
  finally the 6th choice is orange in the first row -- this comes from the document's theme.&lt;/li&gt;
&lt;li&gt;Click 'OK' to close the dialog, followed by 'Close Master View' on the sidebar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is how your shapes now look like:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sd-theme-shape-fill/new.png"&gt;&lt;figcaption&gt;PowerPoint-style themed shape fill, after changing the theme&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;What you can see here is that the color effect (darker, lighter, default) of the rounded rectangles'
fill color was preserved, but all the blue colors are replaced with orange.&lt;/p&gt;
&lt;p&gt;As a cherry on the cake, now if you insert a new shape, that will also have an orange fill color by
default as well.&lt;/p&gt;
&lt;p&gt;You can see how this is useful when designing templates: a designer can create something
good-looking, and all you have to do is to set the theme to the colors of your organization, and
you're done.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/128248"&gt;sd theme: fix applying new colors after theme change for group shapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/130050"&gt;sd theme: add doc model for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/130467"&gt;sd theme: add UNO API for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/130894"&gt;sd theme: add rendering for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/131268"&gt;sd theme: add PPTX import for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/131717"&gt;sd theme: add ODP import/export for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/131984"&gt;sd theme: add PPTX export for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/132327"&gt;sd theme: add UI (area dialog) for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/132646"&gt;sd theme: add UI (sidebar) for shape fill color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/132933"&gt;sd theme: add UNO API for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/133297"&gt;sd theme: add rendering for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/133525"&gt;sd theme: add PPTX import for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/133843"&gt;sd theme: add ODP import/export for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/133908"&gt;tdf#148929 sd theme: limit PPTX import for shape fill effects to lum mod/off&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/134208"&gt;tdf#148961 sd theme: add PPTX export for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/134552"&gt;sd theme: add UI (area dialog) for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/134883"&gt;tdf#149205 sd theme: fix PPTX export loosing dk1 and lt1 colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/134952"&gt;sd theme: add UI (sidebar) for shape fill color effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/136138"&gt;sd theme: consider accent1 color when inserting shape with solid fill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gerrit.libreoffice.org/c/core/+/136599"&gt;tdf#149748 sd theme: fix crash on selecting none from color bar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (7.4).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 04 Jul 2022 08:23:00 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-07-04:/blog/sd-theme-shape-fill.html</guid><category>libreoffice</category><category>en</category></item><item><title>Content controls in Writer: dropdown, picture and date types</title><link>https://vmiklos.hu/blog/sw-content-controls2.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer already had &lt;a href="https://vmiklos.hu/blog/sw-content-controls.html"&gt;rich text and checkbox content
controls&lt;/a&gt;: a new way to set properties on a piece of text, primarily for form filling purposes. This
feature now gained 3 additional types: dropdown, picture and date picker types. This improves
compatibility with the DOCX format: there are now 5 inline content control types we can now import.&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls2/feature.png" alt="https://share.vmiklos.hu/blog/sw-content-controls2/feature.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Word-style inline content controls in Writer.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to &lt;a href="https://dapsi.ngi.eu/"&gt;NGI DAPSI&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls/eu.png" alt="https://share.vmiklos.hu/blog/sw-content-controls/eu.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. This project has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 871498&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Word users expect to be able to import their document to Writer and experience a matching feature
set: form filling is not an exception. Word provides several content control kinds (inline, block,
row and cell content controls), this project focuses on inline ("run") content controls.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the scope of inline content controls, the above linked blog post already described the rich text
and checkbox types. In this post, we&amp;#8217;ll focus on the new dropdown, picture and date content
controls.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You might wonder why content controls are useful, since Writer already has form controls and
fieldmarks, which provide something similar. Here are some benefits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Dropdown content controls have a list of dropdown items. Each item is a display-text and value
  pair, allowing to differentiate between a human-readable string and a machine-readable value.
  Fieldmarks only handled (machine-readable) values, resulting in document text different from Word.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Picture content controls allow the author of a form to pre-format the image before the filler of
  the form inserts the actual image. Writer already had placeholder fields for images in the past,
  but that was just text, allowing image format only after insertion of the actual image.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Date content controls were emulated with Writer fieldmarks in the past, which created trouble
  during export, since Word itself doesn&amp;#8217;t have a date form-field.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The feature consists of menu items to insert dropdown/picture/date content controls, and then you
can interact with the inserted content controls or with their properties:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls2/menu.png" alt="https://share.vmiklos.hu/blog/sw-content-controls2/menu.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Menu items to insert drop-down, picture and date content controls.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Drop-down content controls show a dropdown button when you&amp;#8217;re inside the content control:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls2/dropdown.png" alt="https://share.vmiklos.hu/blog/sw-content-controls2/dropdown.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 4. A drop-down content control.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is similar to dropdown fields, just allows display-text and value pairs, not limited to just
values.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Picture content controls contain a single as-character image, but you can interact with them: clicking on
the content control opens the file open dialog to provide a replacement for the placeholder:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls2/picture.png" alt="https://share.vmiklos.hu/blog/sw-content-controls2/picture.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 5. Picture controls.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And these content controls can be saved to ODT and DOCX.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There is also a content control properties dialog, which allows setting if the content controls are
in placeholder mode or not:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls2/properties.png" alt="https://share.vmiklos.hu/blog/sw-content-controls2/properties.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 6. Content control properties.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It has additional widgets for dropdowns. There is UI to create, update or delete these list items:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls2/properties-inner.png" alt="https://share.vmiklos.hu/blog/sw-content-controls2/properties-inner.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 7. Content control properties inner UI for list items.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental commits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133742"&gt;https://gerrit.libreoffice.org/c/core/+/133742&lt;/a&gt; sw content controls, drop-down: add doc model &amp;amp; UNO API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133801"&gt;https://gerrit.libreoffice.org/c/core/+/133801&lt;/a&gt; sw content controls: enable indicator on the RHS of the content control end
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133874"&gt;https://gerrit.libreoffice.org/c/core/+/133874&lt;/a&gt; sw content controls, drop-down: show list items on click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133915"&gt;https://gerrit.libreoffice.org/c/core/+/133915&lt;/a&gt; sw content controls, drop-down: select list item on click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134034"&gt;https://gerrit.libreoffice.org/c/core/+/134034&lt;/a&gt; sw content controls, drop-down: add ODT filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134041"&gt;https://gerrit.libreoffice.org/c/core/+/134041&lt;/a&gt; sw content controls: only try to insert placeholders if there is no selection
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134104"&gt;https://gerrit.libreoffice.org/c/core/+/134104&lt;/a&gt; sw content controls, drop-down: add DOCX export
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134143"&gt;https://gerrit.libreoffice.org/c/core/+/134143&lt;/a&gt; sw content controls, drop-down: add DOCX import
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134151"&gt;https://gerrit.libreoffice.org/c/core/+/134151&lt;/a&gt; sw content controls: introduce a word breaking dummy char at the end
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134215"&gt;https://gerrit.libreoffice.org/c/core/+/134215&lt;/a&gt; sw content controls, dropdown: add insert UI
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134239"&gt;https://gerrit.libreoffice.org/c/core/+/134239&lt;/a&gt; sw content controls: fixes for the ending dummy char
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134256"&gt;https://gerrit.libreoffice.org/c/core/+/134256&lt;/a&gt; sw content controls, dropdown: add LOK API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134278"&gt;https://gerrit.libreoffice.org/c/core/+/134278&lt;/a&gt; sw content controls, dropdown: add an initial properties dialog
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134379"&gt;https://gerrit.libreoffice.org/c/core/+/134379&lt;/a&gt; sw content controls, dropdown: edit list items in the properties dialog
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134405"&gt;https://gerrit.libreoffice.org/c/core/+/134405&lt;/a&gt; sw content controls, dropdown: edit list items: add modify and delete
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134457"&gt;https://gerrit.libreoffice.org/c/core/+/134457&lt;/a&gt; sw content controls, picture: add doc model &amp;amp; UNO API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134511"&gt;https://gerrit.libreoffice.org/c/core/+/134511&lt;/a&gt; sw content controls, picture: replace placeholder image on click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134538"&gt;https://gerrit.libreoffice.org/c/core/+/134538&lt;/a&gt; sw content controls, dropdown: disable NOP buttons in the property dialog
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134595"&gt;https://gerrit.libreoffice.org/c/core/+/134595&lt;/a&gt; sw content controls, picture: add ODT filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134657"&gt;https://gerrit.libreoffice.org/c/core/+/134657&lt;/a&gt; sw content controls, picture: add DOCX filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134681"&gt;https://gerrit.libreoffice.org/c/core/+/134681&lt;/a&gt; sw content controls, picture: add insert UI
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134750"&gt;https://gerrit.libreoffice.org/c/core/+/134750&lt;/a&gt; sw content controls, picture: add LOK API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134847"&gt;https://gerrit.libreoffice.org/c/core/+/134847&lt;/a&gt; sw content controls, date: add doc model &amp;amp; UNO API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134926"&gt;https://gerrit.libreoffice.org/c/core/+/134926&lt;/a&gt; sw content controls, date: show a date picker on click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/134977"&gt;https://gerrit.libreoffice.org/c/core/+/134977&lt;/a&gt; sw content controls, date: add ODT filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135022"&gt;https://gerrit.libreoffice.org/c/core/+/135022&lt;/a&gt; sw content controls, picture: add LOK API testcase
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135033"&gt;https://gerrit.libreoffice.org/c/core/+/135033&lt;/a&gt; sw content controls, date: add DOCX export
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135035"&gt;https://gerrit.libreoffice.org/c/core/+/135035&lt;/a&gt; sw content controls, date: add current date handling
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135039"&gt;https://gerrit.libreoffice.org/c/core/+/135039&lt;/a&gt; sw content controls, date: preserve more properties
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135109"&gt;https://gerrit.libreoffice.org/c/core/+/135109&lt;/a&gt; sw content controls, date: add DOCX import
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135153"&gt;https://gerrit.libreoffice.org/c/core/+/135153&lt;/a&gt; sw content controls, date: add insert UI
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/135214"&gt;https://gerrit.libreoffice.org/c/core/+/135214&lt;/a&gt; sw content controls, date: add LOK API
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To make this more interesting, Rashesh Padia of Collabora continued exposing this in Collabora
Online, see the PR at &lt;a href="https://github.com/CollaboraOnline/online/pull/4803"&gt;https://github.com/CollaboraOnline/online/pull/4803&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office 22.05 and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.4).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 01 Jun 2022 09:09:20 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-06-01:/blog/sw-content-controls2.html</guid><category>libreoffice</category><category>en</category></item><item><title>Content controls in Writer</title><link>https://vmiklos.hu/blog/sw-content-controls.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has the start of content controls: a new way to set properties on a piece of text,
primarily for form filling purposes. This feature improves compatibility with the DOCX format:
inline content control types "rich text" and "checkbox" are the first two types we can now import.&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls/feature.png" alt="https://share.vmiklos.hu/blog/sw-content-controls/feature.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Word-style inline content controls in Writer.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to &lt;a href="https://dapsi.ngi.eu/"&gt;NGI DAPSI&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls/eu.png" alt="https://share.vmiklos.hu/blog/sw-content-controls/eu.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. This project has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 871498&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Word users expect to be able to import their document to Writer and experience a matching feature
set: form filling is not an exception. Word provides several content control kinds (inline, block,
row and cell content controls), this project focuses on inline ("run") content controls.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the scope of inline content controls, the plan is to support rich text, checkbox, dropdown,
picture and date content controls. This blog post presents the already implemented rich text and
checkbox types.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You might wonder why content controls are useful, since Writer already has form controls and
fieldmarks, which provide something similar. Here are some properties of content controls, which
make them incompatible with field-based fillable forms or form controls:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
inline content controls can&amp;#8217;t span over multiple paragraphs, while this is allowed for fieldmarks
  (bookmark-based fields)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
content controls must be well-formed XML elements, this allows nesting (while Writer fields can&amp;#8217;t
  be nested), but does not allow the start/end position to be a random place in the document (while
  this is allowed for fieldmarks, which have separate XML elements for start and end)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
content controls just have a set of properties, while fieldmarks are supposed to have a field
  command and a result (with a separator between the two)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
content controls can contain rich text (full set of character formatting), while Writer fields can
  only have one character formatting (e.g. half of the field can&amp;#8217;t be bold)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results"&gt;Results&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The feature consists of menu items to insert rich text or checkbox content controls, and then you
can interact with the inserted content controls:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls/menu.png" alt="https://share.vmiklos.hu/blog/sw-content-controls/menu.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Menu items to insert rich text and checkbox content controls.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Rich text content controls simply show an indicator when you&amp;#8217;re inside the content control:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls/rich-text.png" alt="https://share.vmiklos.hu/blog/sw-content-controls/rich-text.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 4. A rich text content control.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is similar to input fields, just allows rich text content, not limited to plain text.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Checkbox content controls contain a single character, but you can interact with them: clicking on
the content control toggles the checked state of the checkbox:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-content-controls/checkbox.png" alt="https://share.vmiklos.hu/blog/sw-content-controls/checkbox.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 5. Checkbox content controls.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And these content controls can be saved to ODT and DOCX.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental commits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132291"&gt;https://gerrit.libreoffice.org/c/core/+/132291&lt;/a&gt; sw content controls: add document model
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132350"&gt;https://gerrit.libreoffice.org/c/core/+/132350&lt;/a&gt; sw content controls: add UNO API to insert this
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132404"&gt;https://gerrit.libreoffice.org/c/core/+/132404&lt;/a&gt; sw content controls: add UNO API to insert this with custom props
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132491"&gt;https://gerrit.libreoffice.org/c/core/+/132491&lt;/a&gt; sw content controls: include this in the UNO API text portion enum
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132556"&gt;https://gerrit.libreoffice.org/c/core/+/132556&lt;/a&gt; sw content controls: add initial layout support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132618"&gt;https://gerrit.libreoffice.org/c/core/+/132618&lt;/a&gt; sw content controls: add overlay to render a border around the text portions
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132652"&gt;https://gerrit.libreoffice.org/c/core/+/132652&lt;/a&gt; sw content controls: select the content on click when showing placeholder
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132717"&gt;https://gerrit.libreoffice.org/c/core/+/132717&lt;/a&gt; sw content controls: add ODT export
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132804"&gt;https://gerrit.libreoffice.org/c/core/+/132804&lt;/a&gt; sw content controls: add ODT import
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132875"&gt;https://gerrit.libreoffice.org/c/core/+/132875&lt;/a&gt; sw content controls: add initial DOCX export
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/132944"&gt;https://gerrit.libreoffice.org/c/core/+/132944&lt;/a&gt; sw content controls, DOCX export: handle SDT end at para end
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133195"&gt;https://gerrit.libreoffice.org/c/core/+/133195&lt;/a&gt; sw content controls: add initial DOCX import
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133241"&gt;https://gerrit.libreoffice.org/c/core/+/133241&lt;/a&gt; sw content controls: add insert UI
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133314"&gt;https://gerrit.libreoffice.org/c/core/+/133314&lt;/a&gt; sw content controls: add LOK API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133363"&gt;https://gerrit.libreoffice.org/c/core/+/133363&lt;/a&gt; sw content controls, checkbox: add document model &amp;amp; UNO API
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133424"&gt;https://gerrit.libreoffice.org/c/core/+/133424&lt;/a&gt; sw content controls, checkbox: toggle the checkbox on click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133467"&gt;https://gerrit.libreoffice.org/c/core/+/133467&lt;/a&gt; sw content controls, checkbox: add ODT filter
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133532"&gt;https://gerrit.libreoffice.org/c/core/+/133532&lt;/a&gt; sw content controls, checkbox: add DOCX export
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133588"&gt;https://gerrit.libreoffice.org/c/core/+/133588&lt;/a&gt; sw content controls, checkbox: add DOCX import
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/133685"&gt;https://gerrit.libreoffice.org/c/core/+/133685&lt;/a&gt; sw content controls, checkbox: add insert UI
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To make this even more interesting, Rashesh Padia of Collabora started exposing this in Collabora
Online, see the PR at &lt;a href="https://github.com/CollaboraOnline/online/pull/4703"&gt;https://github.com/CollaboraOnline/online/pull/4703&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office 2022 and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.4).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 03 May 2022 08:16:54 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2022-05-03:/blog/sw-content-controls.html</guid><category>libreoffice</category><category>en</category></item></channel></rss>