<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>What is Miklos hacking - libreoffice</title><link>https://vmiklos.hu/blog/</link><description></description><lastBuildDate>Wed, 29 Sep 2021 16:29:56 +0200</lastBuildDate><item><title>Start of list level support in Writer paragraph styles</title><link>https://vmiklos.hu/blog/sw-parastyle-listlevel.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has the start of list level support in Writer paragraph styles. This improves ODT and
DOCX compatibility, and it&amp;#8217;ll improve the style previews and the UI in the future.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A paragraph might have an associated list in Writer and that list can have multiple levels. This is
direct formatting. When it comes to paragraph styles, referring to a list was already possible, but
defining a custom list level was not.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Loosing this information in Word documents was quite annoying, and it turned out that ODF also has
markup for this, just LibreOffice didn&amp;#8217;t implement it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This work is currently done for the document model, scripting API and file filters: style previews &amp;amp;
UI still needs finishing.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer can at the moment preserve list level info from ODT and DOCX files. Here is how a file written
by Writer looks like in Word:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-parastyle-listlevel/parastyle-listlevel.png" alt="https://share.vmiklos.hu/blog/sw-parastyle-listlevel/parastyle-listlevel.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer exporting a paragraph style with list level info&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the style preview in Word takes the list level into account. Doing the same and
applying the list level as part of applying the paragraph style on the Writer UI is still future work.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thanks to Justin Luth who did the follow-up work to adapt the DOC filter accordingly, and also doing
other related fixes.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/121141"&gt;tdf#137363 DOCX filter: don&amp;#8217;t loose
  &amp;lt;w:ilvl w:val="&amp;#8230;"&amp;gt; of paragraph styles&lt;/a&gt; added document model, API and DOCX import/export support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/121515"&gt;Related: tdf#137363 ODT import: handle
  style:list-level="&amp;#8230;" for para styles&lt;/a&gt; added ODT import/export support
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 29 Sep 2021 16:29:56 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-09-29:/blog/sw-parastyle-listlevel.html</guid><category>libreoffice</category><category>en</category></item><item><title>Unshare shape properties for the same type before insertion in Impress</title><link>https://vmiklos.hu/blog/sd-groupshape-unshare.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Shape properties were shared by shape type (e.g. shared between group shapes) before insertion into
a document model in Impress. This is now fixed: the property names and types are still shared to
help performance, but their values are no longer shared. This helps matching the user expectation
that separate opened documents don&amp;#8217;t share information with each other.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I was working on a testcase for
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=132696"&gt;tdf#132696&lt;/a&gt; when I noticed that the
existing CppunitTest_oox_drawingml testsuite runs fine before my changes, also a newly added
testGroupShapeSmartArt testcase runs fine in isolation, but if I run the whole testsuite, then it
breaks.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Further investigation revealed that in case testGroupShapeSmartArt is executed first, then testTdf131082 fails. This means:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
the first document is opened
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the first document is closed
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the second document is opened
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
the second document is saved
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And at this point information from the first document is leaked to the second document, even if the
first document was already closed by the time we performed the save. It turns out the root cause was
&lt;a href="https://bz.apache.org/ooo/show_bug.cgi?id=114206"&gt;i#114206&lt;/a&gt; (reported in 2010), i.e. group shapes
shared their property values till they got inserted to the document model. The first document import
did not consume pending SmartArt properties on a to-be-inserted group shape, the second import was
looking for pending properties, found them. And then the second document&amp;#8217;s save wrote those pending
properties to the file, leading to this unexpected leak.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the first document looks like, containing the blue rectangles (a SmartArt):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-groupshape-unshare/first.png" alt="https://share.vmiklos.hu/blog/sd-groupshape-unshare/first.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. First document with a SmartArt&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the second document looks like, without a SmartArt:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second.png" alt="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Second document after loading, no SmartArt&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here is how the second document looks, after saving to PPTX and reloading:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second-saved.png" alt="https://share.vmiklos.hu/blog/sd-groupshape-unshare/second-saved.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Second document after reloading, with a SmartArt&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;a href="https://git.libreoffice.org/core/commit/c6f25506b02fbd2a087b7e790283921bf8550206"&gt;fix&lt;/a&gt; is to
split out part of &lt;code&gt;SvxItemPropertySet&lt;/code&gt; to a separate class, so that we can keep sharing
&lt;code&gt;SvxItemPropertySet&lt;/code&gt; between multiple instances of the same shape type (describing the name and type
of the various properties), while introducing a new &lt;code&gt;SvxItemPropertySetUsrAnys&lt;/code&gt; that is specific to
each not-yet-inserted shape. This way each pending shape is independent, and in case they are not
inserted to the document model later, that results in no side-effects.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 30 Aug 2021 08:51:10 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-08-30:/blog/sd-groupshape-unshare.html</guid><category>libreoffice</category><category>en</category></item><item><title>Calc buttons with macros: better XLSX support</title><link>https://vmiklos.hu/blog/sc-xlsx-button-macro.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Embedding macros to Calc documents and invoking them by clicking on buttons is a common use-case.
There was also decent support for importing these from XLSX (XLSM to be precise), but the export
side was not on par with the binary XLS export.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Calc now got a series of incremental improvements to map our form controls (buttons in particular)
to OOXML&amp;#8217;s form controls, especially when macros are assigned to such buttons.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Calc as well.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Excel has both
&lt;a href="https://support.microsoft.com/en-us/office/assign-a-macro-to-a-form-or-a-control-button-d58edd7d-cb04-4964-bead-9c72c843a283"&gt;form
controls and ActiveX controls&lt;/a&gt;, and
&lt;a href="https://gerrit.libreoffice.org/c/core/+/94161"&gt;tdf#106181 XLSX export: output form controls&lt;/a&gt;
last year started adding support for form control export to XLSX.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hoping that this will be mostly shared drawingML export code fixing (benefiting DOCX and PPTX as
well), it seemed reasonable to assume that we can improve button handling from the "it&amp;#8217;s lost" state
to "it&amp;#8217;s good enough" with some effort.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now Excel shows the button and you can click on it:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/new.png" alt="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Excel consuming our XLSM output with a button and a macro&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While it used to just refuse our export result:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/old.png" alt="https://share.vmiklos.hu/blog/sc-xlsx-button-macro/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Excel refusing bad XLSM output&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the end goal was reached via a set of incremental commits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118085"&gt;sc: don&amp;#8217;t require ctrl-click when clicking
  on internal links of shapes&lt;/a&gt; was a UX problem, users don&amp;#8217;t finding Ctrl-click
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118168"&gt;XLSX export: improve handling of checkbox
  (form controls)&lt;/a&gt; was an improvement to the existing checkbox export code, probably today&amp;#8217;s Excel is just more strict in what it accepts
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118219"&gt;XLSX export: handle button form controls&lt;/a&gt;
  adds the initial button support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118401"&gt;XLSX import: fix handling of named ranges
  referring to PathMissing sheets&lt;/a&gt; fixes an import problem around named ranges and external references
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118485"&gt;XLSX export: handle macros on button form
  controls&lt;/a&gt; adds the macro bits of buttons
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/118600"&gt;XSLX export, button form control: fix
  handling of no macros&lt;/a&gt; is a fixup for non-macro buttons
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.3).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 22 Jul 2021 10:55:43 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-07-22:/blog/sc-xlsx-button-macro.html</guid><category>libreoffice</category><category>en</category></item><item><title>Writer line heights: removing a 16bit limit</title><link>https://vmiklos.hu/blog/sw-line-height.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Line heights in Writer are typically defined in points on the UI (e.g. 12pt), though they are
measured in twips internally (1 point is 20 twips). This height was stored in a 16bit unsigned
integer, so the maximum allowed height was 65536 twips, around 116 cm.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now we track line heights with 32 bits ints, so this limitation is practically removed.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://vector.com/"&gt;Vector&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Once you insert an image to a Writer document, you can customize its anchor type. The as-char
anchor type is handy if you don&amp;#8217;t want text to flow around the image. This has the side effect that
a large image significantly increases the nominal height of a line. The problematic document had an
image height of 118.9 cm (46.81 inch), so the unsigned integer used to represent its height wrapped
around, leading to an incorrect layout.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now it looks like the way you would expect it:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-line-height/sw-line-height.png" alt="https://share.vmiklos.hu/blog/sw-line-height/sw-line-height.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer as-char image with height that is larger than 65k twips&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the end goal was reached via a set of incremental commits:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The very first integer truncation was found using gdb, manually. At that point it was clear that
  some tool to catch the problematic places would accelerate development. First
  &lt;a href="https://gerrit.libreoffice.org/c/core/+/115948"&gt;sw: replace most static_cast&amp;lt;sal_uInt16&amp;gt;()
  calls with o3tl::narrowing()&lt;/a&gt; prepared Writer code so that sanitizers can flag the interesting code
  locations when using &lt;code&gt;-fsanitize=implicit-unsigned-integer-truncation
  -fsanitize=implicit-signed-integer-truncation&lt;/code&gt;. This is important, as conversion with
  &lt;code&gt;static_cast&amp;lt;&amp;gt;&lt;/code&gt; counts as an explicit integer conversion, and sanitizers can&amp;#8217;t flag such
  conversions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then &lt;a href="https://gerrit.libreoffice.org/c/core/+/115873"&gt;sw: allow the height of a line to be
  larger than 65536 twips&lt;/a&gt; took care of the height part.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally &lt;a href="https://gerrit.libreoffice.org/c/core/+/116835"&gt;sw: allow the width of a line
  portion to be larger than 65536 twips&lt;/a&gt; fixed the width part.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 10 Jun 2021 10:25:51 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-06-10:/blog/sw-line-height.html</guid><category>libreoffice</category><category>en</category></item><item><title>Bibliography improvements in LibreOffice Writer: refer to a specific page</title><link>https://vmiklos.hu/blog/sw-bibliography-page.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The bibliography feature in Writer allows authors of e.g. scientific papers to track sources: first
you can insert bibliography entry fields, then at the end you can generate a bibliography table
automatically.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer recently gained &lt;a href="https://vmiklos.hu/blog/sw-bibliography.html"&gt;two improvements in this area&lt;/a&gt;, and
now there is one more: the ability to refer to a specific page of a (potentially long) source.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://ulakbim.tubitak.gov.tr/en"&gt;TUBITAK ULAKBIM&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The same feature in normal HTML linking / citation is well-known: you can place anchors in your
document and then links can refer to not only to your page, but also can set the fragment part of
the URL to jump to a specific section directly. E.g.
&lt;a href="https://vmiklos.hu/blog/sw-bibliography.html#_motivation"&gt;this link&lt;/a&gt; will jump to the "Motivation"
section of the above referred previous post.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Wouldn&amp;#8217;t it be nice if you could also jump to a specific page of a scientific PDF?&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can add such references by choosing the Insert &amp;#8594; Table of Contents and Index &amp;#8594; Bibliography
Entry menu item.  Set Bibliography Source to Document Content and press the New button. The
appearing dialog now has widgets to set a specific page number:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-bibliography-page/page.png" alt="https://share.vmiklos.hu/blog/sw-bibliography-page/page.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Refer to a specic page of a bibliography source, user interface&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is then stored in the URL by setting its fragment to &lt;code&gt;page=...&lt;/code&gt;, and typically PDF readers
understand this syntax, so when you click on the URL, the PDF will open exactly on the cited page.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This also works the other way around: URLs with such syntax are presented to the user with the
dedicated widget to see, edit or delete the page number of the URL.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, if you refer to different pages of the same source, the bibliography text generator detects
this and lists the source in the bibliography only once.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental development steps:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/111653"&gt;sw bibliography, refer to a page: strip
  URLs in the bibliography table&lt;/a&gt; improved the bibliography table generator to not show page fragments
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/111761"&gt;sw bibliography, refer to a page:
  de-duplicate bibliography table URLs&lt;/a&gt; merged the idendical sources to a single entry in the bibliography
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/112400"&gt;sw bibliography, refer to a page: make the
  biblio field clickable&lt;/a&gt; allows opening the URL-with-page by clicking on the bibliography entry field
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/112981"&gt;sw bibliography, refer to a page: add open
  hyperlink context menu&lt;/a&gt; implemented the context menu, in case you prefer to avoid ctrl-click for hyperlink opening
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/113035"&gt;sw bibliography, refer to a page: add PDF
  export links&lt;/a&gt; improved the PDF export to have clickable bibliography entry fields
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/114059"&gt;sw bibliography, refer to a page: fix
  biblio field relative URLs&lt;/a&gt; added support for relative URLs, in case the edited document and
  referred PDFs are in the same directory, next to each other
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/114104"&gt;sw bibliography, refer to a page: also
  de-duplicate relative URLs&lt;/a&gt; made the relative URL and bibliography table row merging work together
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/114380"&gt;sw bibliography, refer to a page: edit the
  page number of individual entries&lt;/a&gt; allows editing just a single bibliography entry field for page
  number purposes, since in other cases it makes sense to update all fields of the same source (e.g.
  correcting a spelling mistake in an author name)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/114443"&gt;sw bibliography, refer to a page: add
  dedicate widget to show the page number&lt;/a&gt;,
  &lt;a href="https://gerrit.libreoffice.org/c/core/+/114664"&gt;sw bibliography, refer to a page: save
  edited page number&lt;/a&gt; and &lt;a href="https://gerrit.libreoffice.org/c/core/+/114750"&gt;sw bibliography,
  refer to a page: add insert/delete UI&lt;/a&gt; add support for creating, showing, editing and deleting page
  numbers of such URLs on the user interface
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 05 May 2021 11:25:20 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-05-05:/blog/sw-bibliography-page.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improving borders of merged table cells in Writer</title><link>https://vmiklos.hu/blog/sw-merged-border.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has better
&lt;a href="https://git.libreoffice.org/core/commit/66ac8e60896f6306bed8fbb34606fd14474f19ce"&gt;support&lt;/a&gt; for
Word-compatible border rending when it comes to vertically merged cells in tables.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Both Word and Writer allow specifying borders for any kind of table cells. When the user creates a
vertically merged cell, there is a covering cell and there is one or more covered table cells.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Writer approach is to render the cell borders according to the properties of the covering cell.
This has the benefit that each edge of the table cell has a single border style (e.g. dashed or
hairline).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Word approach is to render the cell borders as if there would be no vertical merge, according to
the properties of the covered cell. This has the benefit that merging the content of cells
vertically doesn&amp;#8217;t change the border rendering, but it also requires more complex code for painting.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer can now detect that your tables originate from Word formats and render table borders the Word way in that case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the new rendering result look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-merged-border/new.png" alt="https://share.vmiklos.hu/blog/sw-merged-border/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer rendering in compatibility mode, new output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here is how it used to look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-merged-border/old.png" alt="https://share.vmiklos.hu/blog/sw-merged-border/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Writer rendering in compatibility mode, old output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And finally the reference rendering is:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-merged-border/ref.png" alt="https://share.vmiklos.hu/blog/sw-merged-border/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Writer rendering in compatibility mode, reference output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the B4 and B5 cells are covered, they had some unwanted border on their left side
and this is now gone.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
First, some building blocks were introduced: &lt;code&gt;SwCellFrame::GetCoveredCellInRow()&lt;/code&gt; can look up a
  covered cell in a certain row, provided that this cell covers it
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Building on top of this, &lt;code&gt;SwCellFrame::GetCoveredCells()&lt;/code&gt; can provide a list of cell frames which
  are covered by the current cell, due to vertical merge. This is needed, because previously the
  layout didn&amp;#8217;t have to consider properties of covered cells, so while the document model had this
  information, it was not visible to the layout in a convenient way
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Using the above functionality, &lt;code&gt;SwTabFramePainter::Insert()&lt;/code&gt; can suppress painting of certain
  border lines in Word compatibility mode
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally, the code change can be covered with a test by recording the rendering and asserting the
  vertical positions of border points: we can check that all the positions belong to the 1st, 2nd or
  3rd rows, and not to a row below them
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 14 Apr 2021 09:00:17 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-04-14:/blog/sw-merged-border.html</guid><category>libreoffice</category><category>en</category></item><item><title>My hack week at Collabora: improvements to gutter margin in Writer</title><link>https://vmiklos.hu/blog/hackweek-2021.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As mentioned in a &lt;a href="https://vmiklos.hu/blog/hackweek-2020.html"&gt;previous&lt;/a&gt; such report, a hack week is when
we are allowed to hack on anything we want in LibreOffice / Collabora Office / Collabora Online for
a few days at &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt;. I used this time to implement core
support for RTL gutter margin in Writer.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I posted about Writer gutter margin in general &lt;a href="https://vmiklos.hu/blog/sw-gutter-margin.html"&gt;back in
February&lt;/a&gt;, and two follow-up requests accumulated around this new feature since then.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, the gutter margin could be on the left or at the top for non-mirrored documents, which
initially sounded like a complete solution, but later it turned out that right-to-left (RTL)
documents &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=140343"&gt;want it on the right&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, there was a &lt;a href="https://issues.oasis-open.org/browse/OFFICE-4105"&gt;request from the OASIS TC to&lt;/a&gt;
to implement the ODF filter differently for gutter margin.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Neither of these is simple to do, so this hackweek was a good opportunity to address these problems.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is the layout and user interface for RTL gutter looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/hackweek-2021/layout-ui.png" alt="https://share.vmiklos.hu/blog/hackweek-2021/layout-ui.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. RTL gutter margin in Writer, layout and UI&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how the gutter is on the right (not the left) and you can alter this behavior with a
dedicated checkbox on the UI.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/67e53dfeadbbc4f4ab207af0d2cd4e8f556b73d4"&gt;sw page rtl
  gutter margin: add doc model&lt;/a&gt; introduced a new RES_RTL_GUTTER page style property
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/bcbf1c245fa13cfbae2059a996006179c7f4b747"&gt;sw page rtl
  gutter margin: add UNO API&lt;/a&gt; added a new public RtlGutter UNO API property
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/c088d26578d1be352efa49bd164a8217627648de"&gt;sw page rtl
  gutter margin: add layout&lt;/a&gt; was the tricky layout piece, extending &lt;code&gt;SwBorderAttrs&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/3db477fd0e6cfc4ff77b3c911ca4ab14fd980932"&gt;sw page rtl
  gutter margin: add DOCX filter&lt;/a&gt; mapped this to DOCX&amp;#8217;s &lt;code&gt;&amp;lt;w:rtlGutter&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/fac65bb9d831a854298d6cba09ad6159d15b8323"&gt;sw page rtl
  gutter margin: add ODF import&lt;/a&gt; mapped this to &lt;code&gt;&amp;lt;style:page-layout-properties
  style:writing-mode="..."&amp;gt;&lt;/code&gt; in case the attribute value is RTL
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/8b7ff52ac87795881a4d86395885778f1da3d18b"&gt;sw page rtl
  gutter margin: add DOC filter&lt;/a&gt; mapped this to DOC&amp;#8217;s SFRTLGutter, amusingly that handling of that
  was somewhat there, but more or less broken since 2002-02-04
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/f15c6c5d2947a61e6521471b6b7541812953efc3"&gt;sw page rtl
  gutter margin: add RTF filter&lt;/a&gt; mapped this to RTF&amp;#8217;s &lt;code&gt;\rtlgutter&lt;/code&gt; section flag
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/d48a4174708ce0850577dba76dccaf85c4f6ffa1"&gt;sw page rtl
  gutter margin: add UI&lt;/a&gt; introduced a new checkbox on the UI to set/get this, and fixed up
  notifications, so that the incremental layout repaints the necessary page frames when this setting
  changes
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally I had a little bit of remaining time, so I addressed a request from the OASIS ODF TC:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/f3cf833f7079ce8d2f53681cae1b430a875cc320"&gt;sw page gutter
  margin: reimplement ODF filter&lt;/a&gt; changed the ODF markup to be more compatible with readers ignoring
  &lt;code&gt;&amp;lt;style:page-layout-properties loext:margin-gutter="..."&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 09 Apr 2021 14:48:14 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-04-09:/blog/hackweek-2021.html</guid><category>libreoffice</category><category>en</category></item><item><title>Bibliography improvements in LibreOffice Writer</title><link>https://vmiklos.hu/blog/sw-bibliography.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The bibliography feature in Writer allows authors of e.g. scientific papers to track sources: first
you can insert bibliography entry fields, then at the end you can generate a bibliography table
automatically.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has two improvements in this area: more information about these entries in the form of a
mouse tooltip and clickable URLs in the table.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://ulakbim.tubitak.gov.tr/en"&gt;TUBITAK ULAKBIM&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Generating a bibliography (table) for a document is a two-step process: first the user inserts
bibliography entry fields to refer to sources, then later the bibliography can be auto-generated. It
was not great that details of a source was only visible in the Writer edit window after generating
the bibliography table. A somewhat related shortcoming was that URLs of sources were handled as
plain text, while users expect that references are also clickable, similar to e.g. table of
contents.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how a tooltip looks like, available even if there is no bibliography table yet:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-bibliography/tooltip.png" alt="https://share.vmiklos.hu/blog/sw-bibliography/tooltip.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Tooltip for bibliography entry fields&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And URLs in the bibliography table are now clickable:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-bibliography/url.png" alt="https://share.vmiklos.hu/blog/sw-bibliography/url.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Clickable URLs in the bibliography table&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental development steps:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/110705"&gt;sw tooltip on bibliography fields: add an
  SwTOXInternational factory&lt;/a&gt; and &lt;a href="https://gerrit.libreoffice.org/c/core/+/110712"&gt;sw tooltip on
  bibliography fields: add a text factory that gives us a string&lt;/a&gt; were necessary refactors to get a
  string that looks like a row in the bibliography table, without having an empty bibliography table
  at hand
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/110765"&gt;sw tooltip on bibliography fields: add the actual
  tooltip functionality&lt;/a&gt; improved the UI to have a tooltip
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/111117"&gt;sw bibliography: make URLs in the bibliography
  table clickable&lt;/a&gt; implemented the clickable URLs feature
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 24 Mar 2021 12:18:17 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-03-24:/blog/sw-bibliography.html</guid><category>libreoffice</category><category>en</category></item><item><title>Gutter margin in Writer</title><link>https://vmiklos.hu/blog/sw-gutter-margin.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The page gutter defines the amount of extra space added to the specified margin (typically left),
above any existing margin values.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has much better support for gutter margins: not only this margin type can be specified
explicitly, it&amp;#8217;s also possible to select if the gutter should be on the left or on the top, and it
works with mirrored margins as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Writer as well.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Word has a gutter margin feature, and we saw that some UI-level
&lt;a href="https://github.com/OSSII/oxool-community/commit/a7e0dec2fad7e6c63e8951875bb28ac015f736a0"&gt;workaround&lt;/a&gt;
appeared to have something similar based on the LibreOffice technology. We thought it&amp;#8217;s much better
to impelement this properly, so that the result is interoperable with Word, and also available both
in Online and on the desktop.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how the UI looks like in Online:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/online.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/online.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. New UI in Online&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how the new render result looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/new.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. New render result in Writer&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Matching the reference rendering:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/ref.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Reference render result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While the gutter was just missing previously:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/old.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 4. Old render result in Writer&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the gutter margin is now handled properly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental development steps:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
First, we added a new "gutter" margin type (length) and a gutter position (left or top) to the
  document model &amp;amp; UNO API.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
This was followed by adding the layout, which is always the most challenging part of a new Writer
  feature. In this case the basic functionality was implemented by reducing the "print area" of page
  frames, so that the positioning of header, body and footer frames all respect the gutter margin.
  Then additional care was taken to ignore the gutter margin for page borders to be compatible with
  Word. Finally the margin position and mirrored margin support was implemented.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then we looked at import/export: this feature is now supported with the ODP, DOCX, DOC and RTF
  formats. Note that some best-effort handling was there in the DOC filter already, but the gutter
  margin was (semantically) lost on export.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You already saw the new UI above: this allows changing the amount of the gutter margin, specifying
  its position, finally the preview widget also takes the gutter margin into account.  Note that
  this dialog is shared code between Writer, Calc and Impress: we made sure to not break those other
  apps with the extended UI, which is specific to Writer.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Brief help has been added for these new UI controls and submitting an ODF extension proposal to
  OASIS is in progress to standardize the so far LO-specific markup:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;style:page-layout-properties&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;loext:margin-gutter&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"1.27cm"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With these, it&amp;#8217;s now possible to add, modify, render and delete gutter margins for your documents,
while preserving them during ODT and DOCX import/export, without introducing any weird fake line
shapes.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 12 Feb 2021 09:25:04 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-02-12:/blog/sw-gutter-margin.html</guid><category>libreoffice</category><category>en</category></item><item><title>Handling PDF digital signatures with PDFium FOSDEM talk</title><link>https://vmiklos.hu/blog/fosdem2021.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://mautic.productivity.collabora.co.uk/asset/151:fosdem21-pdfiumsig-fosdem-online-2k21pdf"&gt;
&lt;img src="https://share.vmiklos.hu/blog/fosdem2021/slides.png" alt="https://share.vmiklos.hu/blog/fosdem2021/slides.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Slides of the talk&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The next step in the recent &lt;a href="https://vmiklos.hu/blog/pdfium-sign-verify.html"&gt;PDFium-based signature
verification story&lt;/a&gt; is my &lt;a href="https://fosdem.org/2021/schedule/event/lo_pdfsignatures/"&gt;Handling PDF
digital signatures in LibreOffice with PDFium&lt;/a&gt; talk at FOSDEM 2021, in the
&lt;a href="https://fosdem.org/2021/schedule/track/libreoffice/"&gt;LibreOffice devroom&lt;/a&gt;
(&lt;a href="https://www.youtube.com/watch?v=njoHDY47mnA"&gt;pre-recorded video&lt;/a&gt;). The talk gives you an overview of
digital signing in general, all the ODF/OOXML/PDF handling, signing/verification, various other
related past Collabora projects, and then goes into details regarding how PDFium was improved and is
used to do a better PDF signature verification in LibreOffice when opening PDF files in Draw.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The virtual room had
around 150 participants and the Matrix based online conference was well-organized. Speakers even got
a free t-shirt before the event, I appreciated the "bring your own beer" joke :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An other benefit of this unusual setup was to avoid the dreaded
&lt;a href="https://daniel.haxx.se/blog/2020/01/24/coming-to-fosdem-2020/"&gt;room is full&lt;/a&gt; problems, where you
carefully selected a talk to attend and then failed to hear it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I expect quite some other slides from other Collaborans and the wider community will be available on
&lt;a href="http://planet.documentfoundation.org/"&gt;Planet&lt;/a&gt;, don&amp;#8217;t miss them.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 08 Feb 2021 17:17:13 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-02-08:/blog/fosdem2021.html</guid><category>libreoffice</category><category>en</category></item></channel></rss>