<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>What is Miklos hacking - libreoffice</title><link>https://vmiklos.hu/blog/</link><description></description><lastBuildDate>Wed, 14 Apr 2021 09:00:17 +0200</lastBuildDate><item><title>Improving borders of merged table cells in Writer</title><link>https://vmiklos.hu/blog/sw-merged-border.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has better
&lt;a href="https://git.libreoffice.org/core/commit/66ac8e60896f6306bed8fbb34606fd14474f19ce"&gt;support&lt;/a&gt; for
Word-compatible border rending when it comes to vertically merged cells in tables.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://www.docmosis.com/"&gt;Docmosis&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Both Word and Writer allow specifying borders for any kind of table cells. When the user creates a
vertically merged cell, there is a covering cell and there is one or more covered table cells.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Writer approach is to render the cell borders according to the properties of the covering cell.
This has the benefit that each edge of the table cell has a single border style (e.g. dashed or
hairline).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Word approach is to render the cell borders as if there would be no vertical merge, according to
the properties of the covered cell. This has the benefit that merging the content of cells
vertically doesn&amp;#8217;t change the border rendering, but it also requires more complex code for painting.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer can now detect that your tables originate from Word formats and render table borders the Word way in that case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is how the new rendering result look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-merged-border/new.png" alt="https://share.vmiklos.hu/blog/sw-merged-border/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Writer rendering in compatibility mode, new output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here is how it used to look like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-merged-border/old.png" alt="https://share.vmiklos.hu/blog/sw-merged-border/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Writer rendering in compatibility mode, old output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And finally the reference rendering is:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-merged-border/ref.png" alt="https://share.vmiklos.hu/blog/sw-merged-border/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Writer rendering in compatibility mode, reference output&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the B4 and B5 cells are covered, they had some unwanted border on their left side
and this is now gone.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
First, some building blocks were introduced: &lt;code&gt;SwCellFrame::GetCoveredCellInRow()&lt;/code&gt; can look up a
  covered cell in a certain row, provided that this cell covers it
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Building on top of this, &lt;code&gt;SwCellFrame::GetCoveredCells()&lt;/code&gt; can provide a list of cell frames which
  are covered by the current cell, due to vertical merge. This is needed, because previously the
  layout didn&amp;#8217;t have to consider properties of covered cells, so while the document model had this
  information, it was not visible to the layout in a convenient way
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Using the above functionality, &lt;code&gt;SwTabFramePainter::Insert()&lt;/code&gt; can suppress painting of certain
  border lines in Word compatibility mode
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally, the code change can be covered with a test by recording the rendering and asserting the
  vertical positions of border points: we can check that all the positions belong to the 1st, 2nd or
  3rd rows, and not to a row below them
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 14 Apr 2021 09:00:17 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-04-14:/blog/sw-merged-border.html</guid><category>libreoffice</category><category>en</category></item><item><title>My hack week at Collabora: improvements to gutter margin in Writer</title><link>https://vmiklos.hu/blog/hackweek-2021.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As mentioned in a &lt;a href="https://vmiklos.hu/blog/hackweek-2020.html"&gt;previous&lt;/a&gt; such report, a hack week is when
we are allowed to hack on anything we want in LibreOffice / Collabora Office / Collabora Online for
a few days at &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt;. I used this time to implement core
support for RTL gutter margin in Writer.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I posted about Writer gutter margin in general &lt;a href="https://vmiklos.hu/blog/sw-gutter-margin.html"&gt;back in
February&lt;/a&gt;, and two follow-up requests accumulated around this new feature since then.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, the gutter margin could be on the left or at the top for non-mirrored documents, which
initially sounded like a complete solution, but later it turned out that right-to-left (RTL)
documents &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=140343"&gt;want it on the right&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, there was a &lt;a href="https://issues.oasis-open.org/browse/OFFICE-4105"&gt;request from the OASIS TC to&lt;/a&gt;
to implement the ODF filter differently for gutter margin.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Neither of these is simple to do, so this hackweek was a good opportunity to address these problems.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is the layout and user interface for RTL gutter looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/hackweek-2021/layout-ui.png" alt="https://share.vmiklos.hu/blog/hackweek-2021/layout-ui.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. RTL gutter margin in Writer, layout and UI&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see how the gutter is on the right (not the left) and you can alter this behavior with a
dedicated checkbox on the UI.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/67e53dfeadbbc4f4ab207af0d2cd4e8f556b73d4"&gt;sw page rtl
  gutter margin: add doc model&lt;/a&gt; introduced a new RES_RTL_GUTTER page style property
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/bcbf1c245fa13cfbae2059a996006179c7f4b747"&gt;sw page rtl
  gutter margin: add UNO API&lt;/a&gt; added a new public RtlGutter UNO API property
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/c088d26578d1be352efa49bd164a8217627648de"&gt;sw page rtl
  gutter margin: add layout&lt;/a&gt; was the tricky layout piece, extending &lt;code&gt;SwBorderAttrs&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/3db477fd0e6cfc4ff77b3c911ca4ab14fd980932"&gt;sw page rtl
  gutter margin: add DOCX filter&lt;/a&gt; mapped this to DOCX&amp;#8217;s &lt;code&gt;&amp;lt;w:rtlGutter&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/fac65bb9d831a854298d6cba09ad6159d15b8323"&gt;sw page rtl
  gutter margin: add ODF import&lt;/a&gt; mapped this to &lt;code&gt;&amp;lt;style:page-layout-properties
  style:writing-mode="..."&amp;gt;&lt;/code&gt; in case the attribute value is RTL
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/8b7ff52ac87795881a4d86395885778f1da3d18b"&gt;sw page rtl
  gutter margin: add DOC filter&lt;/a&gt; mapped this to DOC&amp;#8217;s SFRTLGutter, amusingly that handling of that
  was somewhat there, but more or less broken since 2002-02-04
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/f15c6c5d2947a61e6521471b6b7541812953efc3"&gt;sw page rtl
  gutter margin: add RTF filter&lt;/a&gt; mapped this to RTF&amp;#8217;s &lt;code&gt;\rtlgutter&lt;/code&gt; section flag
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/d48a4174708ce0850577dba76dccaf85c4f6ffa1"&gt;sw page rtl
  gutter margin: add UI&lt;/a&gt; introduced a new checkbox on the UI to set/get this, and fixed up
  notifications, so that the incremental layout repaints the necessary page frames when this setting
  changes
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally I had a little bit of remaining time, so I addressed a request from the OASIS ODF TC:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://git.libreoffice.org/core/commit/f3cf833f7079ce8d2f53681cae1b430a875cc320"&gt;sw page gutter
  margin: reimplement ODF filter&lt;/a&gt; changed the ODF markup to be more compatible with readers ignoring
  &lt;code&gt;&amp;lt;style:page-layout-properties loext:margin-gutter="..."&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 09 Apr 2021 14:48:14 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-04-09:/blog/hackweek-2021.html</guid><category>libreoffice</category><category>en</category></item><item><title>Bibliography improvements in LibreOffice Writer</title><link>https://vmiklos.hu/blog/sw-bibliography.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The bibliography feature in Writer allows authors of e.g. scientific papers to track sources: first
you can insert bibliography entry fields, then at the end you can generate a bibliography table
automatically.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has two improvements in this area: more information about these entries in the form of a
mouse tooltip and clickable URLs in the table.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks &lt;a href="https://ulakbim.tubitak.gov.tr/en"&gt;TUBITAK ULAKBIM&lt;/a&gt; who made this work by
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Generating a bibliography (table) for a document is a two-step process: first the user inserts
bibliography entry fields to refer to sources, then later the bibliography can be auto-generated. It
was not great that details of a source was only visible in the Writer edit window after generating
the bibliography table. A somewhat related shortcoming was that URLs of sources were handled as
plain text, while users expect that references are also clickable, similar to e.g. table of
contents.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how a tooltip looks like, available even if there is no bibliography table yet:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-bibliography/tooltip.png" alt="https://share.vmiklos.hu/blog/sw-bibliography/tooltip.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Tooltip for bibliography entry fields&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And URLs in the bibliography table are now clickable:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-bibliography/url.png" alt="https://share.vmiklos.hu/blog/sw-bibliography/url.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Clickable URLs in the bibliography table&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental development steps:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/110705"&gt;sw tooltip on bibliography fields: add an
  SwTOXInternational factory&lt;/a&gt; and &lt;a href="https://gerrit.libreoffice.org/c/core/+/110712"&gt;sw tooltip on
  bibliography fields: add a text factory that gives us a string&lt;/a&gt; were necessary refactors to get a
  string that looks like a row in the bibliography table, without having an empty bibliography table
  at hand
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/110765"&gt;sw tooltip on bibliography fields: add the actual
  tooltip functionality&lt;/a&gt; improved the UI to have a tooltip
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/111117"&gt;sw bibliography: make URLs in the bibliography
  table clickable&lt;/a&gt; implemented the clickable URLs feature
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s
&lt;a href="http://dev-builds.libreoffice.org/daily/master/"&gt;next release&lt;/a&gt; (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 24 Mar 2021 12:18:17 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-03-24:/blog/sw-bibliography.html</guid><category>libreoffice</category><category>en</category></item><item><title>Gutter margin in Writer</title><link>https://vmiklos.hu/blog/sw-gutter-margin.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The page gutter defines the amount of extra space added to the specified margin (typically left),
above any existing margin values.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has much better support for gutter margins: not only this margin type can be specified
explicitly, it&amp;#8217;s also possible to select if the gutter should be on the left or on the top, and it
works with mirrored margins as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Writer as well.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Word has a gutter margin feature, and we saw that some UI-level
&lt;a href="https://github.com/OSSII/oxool-community/commit/a7e0dec2fad7e6c63e8951875bb28ac015f736a0"&gt;workaround&lt;/a&gt;
appeared to have something similar based on the LibreOffice technology. We thought it&amp;#8217;s much better
to impelement this properly, so that the result is interoperable with Word, and also available both
in Online and on the desktop.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how the UI looks like in Online:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/online.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/online.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. New UI in Online&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how the new render result looks like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/new.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. New render result in Writer&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Matching the reference rendering:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/ref.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Reference render result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While the gutter was just missing previously:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sw-gutter-margin/old.png" alt="https://share.vmiklos.hu/blog/sw-gutter-margin/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 4. Old render result in Writer&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the gutter margin is now handled properly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of incremental development steps:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
First, we added a new "gutter" margin type (length) and a gutter position (left or top) to the
  document model &amp;amp; UNO API.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
This was followed by adding the layout, which is always the most challenging part of a new Writer
  feature. In this case the basic functionality was implemented by reducing the "print area" of page
  frames, so that the positioning of header, body and footer frames all respect the gutter margin.
  Then additional care was taken to ignore the gutter margin for page borders to be compatible with
  Word. Finally the margin position and mirrored margin support was implemented.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Then we looked at import/export: this feature is now supported with the ODP, DOCX, DOC and RTF
  formats. Note that some best-effort handling was there in the DOC filter already, but the gutter
  margin was (semantically) lost on export.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You already saw the new UI above: this allows changing the amount of the gutter margin, specifying
  its position, finally the preview widget also takes the gutter margin into account.  Note that
  this dialog is shared code between Writer, Calc and Impress: we made sure to not break those other
  apps with the extended UI, which is specific to Writer.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Brief help has been added for these new UI controls and submitting an ODF extension proposal to
  OASIS is in progress to standardize the so far LO-specific markup:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;lt;style:page-layout-properties&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #009900"&gt;loext:margin-gutter&lt;/span&gt;&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"1.27cm"&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With these, it&amp;#8217;s now possible to add, modify, render and delete gutter margins for your documents,
while preserving them during ODT and DOCX import/export, without introducing any weird fake line
shapes.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 12 Feb 2021 09:25:04 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-02-12:/blog/sw-gutter-margin.html</guid><category>libreoffice</category><category>en</category></item><item><title>Handling PDF digital signatures with PDFium FOSDEM talk</title><link>https://vmiklos.hu/blog/fosdem2021.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://mautic.productivity.collabora.co.uk/asset/151:fosdem21-pdfiumsig-fosdem-online-2k21pdf"&gt;
&lt;img src="https://share.vmiklos.hu/blog/fosdem2021/slides.png" alt="https://share.vmiklos.hu/blog/fosdem2021/slides.png" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Slides of the talk&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The next step in the recent &lt;a href="https://vmiklos.hu/blog/pdfium-sign-verify.html"&gt;PDFium-based signature
verification story&lt;/a&gt; is my &lt;a href="https://fosdem.org/2021/schedule/event/lo_pdfsignatures/"&gt;Handling PDF
digital signatures in LibreOffice with PDFium&lt;/a&gt; talk at FOSDEM 2021, in the
&lt;a href="https://fosdem.org/2021/schedule/track/libreoffice/"&gt;LibreOffice devroom&lt;/a&gt;
(&lt;a href="https://www.youtube.com/watch?v=njoHDY47mnA"&gt;pre-recorded video&lt;/a&gt;). The talk gives you an overview of
digital signing in general, all the ODF/OOXML/PDF handling, signing/verification, various other
related past Collabora projects, and then goes into details regarding how PDFium was improved and is
used to do a better PDF signature verification in LibreOffice when opening PDF files in Draw.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The virtual room had
around 150 participants and the Matrix based online conference was well-organized. Speakers even got
a free t-shirt before the event, I appreciated the "bring your own beer" joke :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An other benefit of this unusual setup was to avoid the dreaded
&lt;a href="https://daniel.haxx.se/blog/2020/01/24/coming-to-fosdem-2020/"&gt;room is full&lt;/a&gt; problems, where you
carefully selected a talk to attend and then failed to hear it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I expect quite some other slides from other Collaborans and the wider community will be available on
&lt;a href="http://planet.documentfoundation.org/"&gt;Planet&lt;/a&gt;, don&amp;#8217;t miss them.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 08 Feb 2021 17:17:13 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-02-08:/blog/fosdem2021.html</guid><category>libreoffice</category><category>en</category></item><item><title>Shadow for tables from PPTX in Impress</title><link>https://vmiklos.hu/blog/sd-table-shadow.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Impress now has much better support for the shadow of table shapes: not only shape styles can result
in table shadows, but it&amp;#8217;s also possible to add this as direct formatting. Also the shadow result is
PowerPoint-compatible in the direct formatting case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, thanks to our partner &lt;a href="https://www.suse.com/"&gt;SUSE&lt;/a&gt; for working with
&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora&lt;/a&gt; to make this possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We got a PPTX document, which has a table shape with blurry shadow. The shadow was completely
missing in Impress. It was discovered that in case you configure the default shape style to have
shadow, then there is some initial table shadow support in Impress, but that was not used in the
PPTX case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The request was to improve the shadow rendering to be PowerPoint-compatible and in general support
table shadows as direct formatting as a new feature.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The table shadow now looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-table-shadow/new.png" alt="https://share.vmiklos.hu/blog/sd-table-shadow/new.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. New render result in Impress&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Matching the reference rendering:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-table-shadow/ref.png" alt="https://share.vmiklos.hu/blog/sd-table-shadow/ref.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Reference render result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While shadow was just missing previously:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://share.vmiklos.hu/blog/sd-table-shadow/old.png" alt="https://share.vmiklos.hu/blog/sd-table-shadow/old.png" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Old render result in Impress&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that not only the shadow is there, but also the cell backgrounds and the blurry shadow
is rendered properly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of small fixes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/106902"&gt;tdf#129961 svx: add doc model xml dump for
  shadow-related pool items&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/106987"&gt;tdf#129961 svx: add UNO API for table shadow as
  direct format&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/107073"&gt;tdf#129961 svx: add rendering for table shadow as
  direct format&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/107529"&gt;tdf#129961 oox: add PPTX import for table shadow as
  direct format&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/107682"&gt;tdf#129961 cui: start UI for table shadow as direct
  format&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/107781"&gt;tdf#129961 svx: finish UI for table shadow as
  direct format&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/107836"&gt;tdf#129961 oox: add PPTX export for table shadow as
  direct format&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With these, it&amp;#8217;s now possible to add, edit, render and delete these table shadows, while preserving
them during ODP and PPTX import/export.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.2).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 08 Jan 2021 09:41:33 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2021-01-08:/blog/sd-table-shadow.html</guid><category>libreoffice</category><category>en</category></item><item><title>Better PDF signature verification in Draw</title><link>https://vmiklos.hu/blog/pdfium-sign-verify.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Draw now has much better support for detecting unsigned incremental updates between signatures at
the end of PDF documents. We now also make sure that incremental updates introduced for adding
signatures really just add annotations and don&amp;#8217;t change the actual content.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There has been a recent &lt;a href="https://pdf-insecurity.org/signature-shadow/evaluation_2020.html"&gt;evaluation&lt;/a&gt;
of PDF signature verification, which included Draw. While we got a checkmark on their Shadow Hide
test, their Shadow Replace test found conditional problems and their Shadow Hide-and-Replace test
was not happy, either.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So time to look at what are those corner-cases and how the situation can be improved, so people keep
trusting that if Draw says a signature is valid, it&amp;#8217;s indeed valid.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There were 4 incremental improvements in this area:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/99361"&gt;detect unsigned incremental update between
  signatures&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/101712"&gt;fix infobar vs signature dialog inconsistency&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/101926"&gt;avoid saying OK when the signature is partial&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/102057"&gt;pdf incremental updates that are non-commenting are
  invalid&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;These were enough so that talking to the authors of that evaluation now confirmed that these
problems are all gone.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;PDF signature verification works by using a custom PDF tokenizer. You can read about that code in
the PDF tokenizer section of &lt;a href="https://vmiklos.hu/blog/pdf-sign.html"&gt;this post&lt;/a&gt;. The bottom line is that
we now have both PDFium and this custom tokenizer, somewhat duplicating the functionality.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After talking to the PDFium developers (see the relevant
&lt;a href="https://groups.google.com/g/pdfium/c/Z0fC8Fg3yek/m/IE6yD066AAAJ"&gt;mailing list thread&lt;/a&gt;), there were
open regarding adding all the high level API to allow PDF signature verification based on PDFium,
and not via our own tokenizer. See
&lt;a href="https://pdfium.googlesource.com/pdfium/+/refs/heads/master/public/fpdf_signature.h"&gt;this
header file&lt;/a&gt; for the set of relevant APIs added. A combinations of those allowed to
&lt;a href="https://gerrit.libreoffice.org/c/core/+/105766"&gt;adapt&lt;/a&gt; the code on our side and use PDFium for
signature verification, not the own tokanizer.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 11 Dec 2020 09:31:26 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-12-11:/blog/pdfium-sign-verify.html</guid><category>libreoffice</category><category>en</category></item><item><title>Better handling of cached field results in Writer</title><link>https://vmiklos.hu/blog/sw-cached-fields.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Writer now has much better support for preserving the cached result of fields in documents. This is
especially beneficial for Word formats where the input document may have a field result which is not
only a cache, but re-calculating the formula would yield a different result, even in Word.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A Collabora Office customer gave us a DOCX document, which is essentially a calendar for planned IT
maintenance windows at some organization. These calendars are tables with fields in it. The document
is halfway through towards changing it to a newer year: the formulas are already changed to
calculate a newer year, but all the cached field results are still for the old year.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The request was to keep showing these results and not throw them away during save, either. Their
primary workflow is to fill the calendar with manual entries, not to tweak the calendar layout
itself.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The calendar now looks like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/6o7pvix-dJ9QhCX65FUkWeQZ60B89sHqDpBvd7WVRLtAzBW1323odrQ13aV_CgEFvgh7Iee-ePq95oPOf1Q-jMxvX1MBsz9FhgKd9vymyrdMBIZbF459hNKE1dM4XLcwXkGYh8ksmok=w1920" alt="https://lh3.googleusercontent.com/6o7pvix-dJ9QhCX65FUkWeQZ60B89sHqDpBvd7WVRLtAzBW1323odrQ13aV_CgEFvgh7Iee-ePq95oPOf1Q-jMxvX1MBsz9FhgKd9vymyrdMBIZbF459hNKE1dM4XLcwXkGYh8ksmok=w1920" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. New render result in Writer&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Matching the reference rendering:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/GJd2zcnspXDb7Wa2p32TInf9C8MAgt92h3G6PYuUwUvpQi5f3AdRbl5yGq8FN7kUPMcZwuFpohTKmX33s8u-AxFSO9rZFgH4X-fwrg8jShtJoA1KyGws_-ymUvINmK-5xo2_hd7YmLI=w1920" alt="https://lh3.googleusercontent.com/GJd2zcnspXDb7Wa2p32TInf9C8MAgt92h3G6PYuUwUvpQi5f3AdRbl5yGq8FN7kUPMcZwuFpohTKmX33s8u-AxFSO9rZFgH4X-fwrg8jShtJoA1KyGws_-ymUvINmK-5xo2_hd7YmLI=w1920" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Reference render result&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While it looked like a broken calendar previously:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/bpOVqcZX2CcKouuADNyPx1PMyI3I6CyjIDIAnUbylsT-ZimxSkPcUaRbMDd8MzHlG3Uqw2d-TunD4m7U4DUlm_O_esJt6CAY-H7Z5tdQxZ6q_MYxgJphutr_-JRVYh8uLmspiiI532U=w1920" alt="https://lh3.googleusercontent.com/bpOVqcZX2CcKouuADNyPx1PMyI3I6CyjIDIAnUbylsT-ZimxSkPcUaRbMDd8MzHlG3Uqw2d-TunD4m7U4DUlm_O_esJt6CAY-H7Z5tdQxZ6q_MYxgJphutr_-JRVYh8uLmspiiI532U=w1920" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 3. Old render result in Writer&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that the day numbers were broken previously and now they line up properly.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As usual, the high-level problem was addressed by a series of small fixes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/105596"&gt;DOCX import: don&amp;#8217;t throw away cached value of
  SwHiddenTextField&lt;/a&gt; fixes a caching problem which was working for DOC already
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/105639"&gt;DOCX import: fix lost cached result inside an IF
  field&lt;/a&gt; fixes caching in the context of nested IF fields (Writer in general has limited support for nested fields)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/105783"&gt;DOCX import: lost cached result of fields: fix
  leading whitespace&lt;/a&gt; fixes whitespace handling while caching
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://gerrit.libreoffice.org/c/core/+/105798"&gt;DOCX export: handle conditional fields&lt;/a&gt; adds an
  initial implementation of conditional fields in the DOCX export, which was completely missing
  previously.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With these, it&amp;#8217;s now possible to edit these calendars, without breaking the fields which provide the
day numbers.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 27 Nov 2020 09:08:54 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-11-27:/blog/sw-cached-fields.html</guid><category>libreoffice</category><category>en</category></item><item><title>Detecting 0-byte files based on extension in Impress and elsewhere</title><link>https://vmiklos.hu/blog/sd-zero-byte-files.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Impress (and Writer and Calc) now has support for detecting 0-byte files on open/import based on
their extension. This builds on top of the
&lt;a href="https://vmiklos.hu/blog/sw-locale-independent-templates.html"&gt;previous language-independent template
improvements&lt;/a&gt;. This means that e.g. a 0-byte PPTX file will open as an empty Impress presentation,
not in Writer.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_motivation"&gt;Motivation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We regularly see customers wanting minimal templates, which are language independent and have no
content. Such files are handy if your workflow is to first name an empty document (create it) and
only then edit it (and not the other way around: first create the document, then save it by giving
it a name). This is easy for &lt;code&gt;.txt&lt;/code&gt; files: if it&amp;#8217;s zero bytes, it&amp;#8217;s empty. But then this approach is
also expected to work for other file formats as well, where our original approach was more
technical: if it&amp;#8217;s an empty file, that that can be only plain text, so we (almost) always opened it
in Writer, not matching the user expectations.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Instead of explaining the problem to people again and again (that a literally empty PPTX file is not
a PPTX template), there is value in just adapting the code instead to "do what I mean".&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_results_so_far"&gt;Results so far&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An empty PPTX file is now handled like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/zk3b0f2Rx3t5vFVuKiimujSJWYwPNH05PCf5Indih3OwMDeBrOUH1X7N22PO46kIbxTVzI0V3IV-bE0sMycTHGj2eRqKT6K7eQkZ0Py9QVCPIhV0pdKdGPLGH08xpw72wFQ-3eGyX4k=w1920" alt="https://lh3.googleusercontent.com/zk3b0f2Rx3t5vFVuKiimujSJWYwPNH05PCf5Indih3OwMDeBrOUH1X7N22PO46kIbxTVzI0V3IV-bE0sMycTHGj2eRqKT6K7eQkZ0Py9QVCPIhV0pdKdGPLGH08xpw72wFQ-3eGyX4k=w1920" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 1. Empty PPTX file opening in Impress&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see this is no longer opening in Writer as plain text but in Impress, which is clearly a
less surprising behavior.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Here is what happens if you open an empty DOTX (template):&lt;/p&gt;&lt;/div&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;img src="https://lh3.googleusercontent.com/cVB_kK2wDyNIJjLt9v9UcNS4AagRCifwBofp70mHfNVzopvrN1cxcsVLhWfEArhab_PwSFkAvLlMUS1witevRcKeEn9UXYtw5o4VeGSztvnNUi6YMtR3t2DUIu1k2LLOUhnpckAnrwQ=w1920" alt="https://lh3.googleusercontent.com/cVB_kK2wDyNIJjLt9v9UcNS4AagRCifwBofp70mHfNVzopvrN1cxcsVLhWfEArhab_PwSFkAvLlMUS1witevRcKeEn9UXYtw5o4VeGSztvnNUi6YMtR3t2DUIu1k2LLOUhnpckAnrwQ=w1920" /&gt;
&lt;/div&gt;
&lt;div class="title"&gt;Figure 2. Empty DOTX file creates a new Writer document&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see that it is even recognized that this is a template format, so a new document is created,
not the template itself is opened for editing.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_how_is_this_implemented"&gt;How is this implemented?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you would like to know a bit more about how this works, continue reading&amp;#8230; :-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can see the code change in
&lt;a href="https://git.libreoffice.org/core/commit/ada07f303e7cd1e39c73abe0741aefe7d9d73a57"&gt;this commit&lt;/a&gt;.
First, we restrict this trick to file URLs, and also to empty files.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, we look at the extension of the file and try to match an import filter that usually handles
that extension. This helps, because then nominally the correct filter will be used for the import,
so save will not ask for a filename (as it happens for new documents), but it will know what target
filename and export filter to use.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally we need to avoid actually invoking the import filter, because no file content is not
something an import filter has to handle if its filter detection would reject the file. (E.g. PPTX
is expected to be a valid ZIP file.) This is important, because we want to avoid touching each &amp;amp;
every file filter to not fail for empty file content&amp;#8201;&amp;#8212;&amp;#8201;instead we want to handle this centrally, at
a single place.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_want_to_start_using_this"&gt;Want to start using this?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF&amp;#8217;s next release too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 13 Nov 2020 08:50:19 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-11-13:/blog/sd-zero-byte-files.html</guid><category>libreoffice</category><category>en</category></item><item><title>OOXML / PDF Digital Signing in Draw and elsewhere conference talk</title><link>https://vmiklos.hu/blog/libocon2020.html</link><description>&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="imageblock" style="text-align:center;"&gt;
&lt;div class="content"&gt;
&lt;a class="image" href="https://files.speakerdeck.com/presentations/eae85c2ac9d443708bda7ca26b3f5a6f/pdf-visible-sign-loconf-online-2k20.pdf"&gt;
&lt;img src="https://lh3.googleusercontent.com/4cDltVS1u4m8FWC9Bb54TWILfzrFEXKNUcKKE6cxTIzsDWbX4SXPNw6JM01eLVzyqSqsyWhukcXXWmlJthx9q8tdbqO1LfO8FQECzBcEK3ZQl1lCXdpoAFGKZn_H9sNy0QLgNpPox_w=w1920" alt="https://lh3.googleusercontent.com/4cDltVS1u4m8FWC9Bb54TWILfzrFEXKNUcKKE6cxTIzsDWbX4SXPNw6JM01eLVzyqSqsyWhukcXXWmlJthx9q8tdbqO1LfO8FQECzBcEK3ZQl1lCXdpoAFGKZn_H9sNy0QLgNpPox_w=w1920" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Today I gave a &lt;a href="https://events.opensuse.org/conferences/oSLO/program/proposals/3187/"&gt;OOXML / PDF
Digital Signing in Draw and elsewhere&lt;/a&gt; talk at the LibreOffice Conference 2020. The (virtual) room
was well-crowded&amp;#8201;&amp;#8212;&amp;#8201;somehow people find digital signatures interesting. ;-)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It contains an overview of the ODF/OOXML/PDF signing feature set and also details the latest
improvements, like visible PDF signing.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I expect quite some other slides from other Collaborans and the wider community will be available on
&lt;a href="http://planet.documentfoundation.org/"&gt;Planet&lt;/a&gt;, don&amp;#8217;t miss them.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can get a snapshot / demo of Collabora Office and try the presented features out yourself right
now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try unstable snapshot&lt;/a&gt;.
Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF&amp;#8217;s next release too (7.1).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 16 Oct 2020 17:53:30 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2020-10-16:/blog/libocon2020.html</guid><category>libreoffice</category><category>en</category></item></channel></rss>