<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>What is Miklos hacking - libreoffice</title><link>https://vmiklos.hu/blog/</link><description></description><lastBuildDate>Tue, 03 Sep 2024 08:08:13 +0200</lastBuildDate><item><title>Improved interactivity for LOK clients in Writer's layout</title><link>https://vmiklos.hu/blog/sw-anyinput-lok.html</link><description>&lt;p&gt;Writer now has support for doing partial layout passes when LOK clients have pending events, which
sometimes improves interactivity a lot.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraonline.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
useful for any LOK clients.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I recently worked with a document that has relatively simple structure, but it has 300 pages, and
most of the content is part of a numbered list. Pasting a simple string (like an URL) into the end
of a paragraph resulted in a short, but annoying hang. It turns out we updated Writer's layout for
all the 300 pages before the content was repainted on the single visible page. In theory, you
could reorder events, so you first calculate the first page, you paint the first page, then you
calculate the remaining 299 pages. Is this possible in practice? Let's try!&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The relevant part of the test document is simple: just an empty numbered paragraph, so we can paste
somewhere:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-anyinput-lok/paste.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-anyinput-lok/paste.png"&gt;&lt;figcaption&gt;Bugdoc: empty paragraph, part of a numbered list and then pasting an URL there&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a good sample, because pasting into a numbered list requires invalidating all list items in that
list, since possibly the paste operation created a new list item, and then the number portion has to
be updated for all items in the rest of the list. So if you paste into a numbered list, you need to
re-calculate the entire document if all the document is just a numbered list.&lt;/p&gt;
&lt;p&gt;The first problem was that Writer tracks its visible area, but LOK needs two kinds of visible areas.
The first kind decides if invalidations are interesting for part of the document area. LOK wants to
get all invalidations, so in case we cache some document content in the client that is near the
visible area, we need to know when to throw away that cache.  On the other hand, we want to still
track the actually visible viewport of the client, so we can prioritize visible vs hidden parts of
the document. Writer in LOK mode thought that all parts of the document are a priority, but this
could improved by taking the client's viewport into account.&lt;/p&gt;
&lt;p&gt;The second problem was that even if Writer had two layout passes (first is synchronous, for the
visible area; second is async, for the rest of the document), both passes were performed before
allowing a LOK client to request tiles for the issued invalidations.&lt;/p&gt;
&lt;p&gt;This is now solved by a new &lt;code&gt;registerAnyInputCallback()&lt;/code&gt; API, which allows the LOK client to signal if
it has pending events (e.g. unprocessed callbacks, tiles to be painted) or it's OK for Writer layout
to finish its idle job first.&lt;/p&gt;
&lt;p&gt;The end result for pasting a URL into this 300 pages document, when measuring end-to-end (from
sending the paste command to getting the first updated tile) is a decrease in response time, from
963 ms to 14 ms.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e1e77b313c9fe0fff814384a67de415e33c8b27f"&gt;cool#9735 sw lok: take LOK vis area into account when deciding idle layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a22fe103e7a26270b7213448c570400a563c18ba"&gt;Related: cool#9735 vcl lok: add an AnyInput() callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/41aec3e9a088ad4e99e43e033c7653e2c25a85ba"&gt;Related: cool#9735 sw lok: handle the AnyInput() callback during idle layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/3974af7dca82f887dfdfe88f087583508c19e7ab"&gt;sfx2: fix crash in SfxObjectShell::IsHelpDocument()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tracking issue for this problem was
&lt;a href="https://github.com/CollaboraOnline/online/issues/9735"&gt;cool#9735&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a development edition of Collabora Online 24.04 and try it out yourself right now: &lt;a href="https://www.collaboraonline.com/code/"&gt;try
the development edition&lt;/a&gt;.  Collabora intends to continue
supporting and contributing to LibreOffice, the code is merged so we expect all of this work will be
available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 03 Sep 2024 08:08:13 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-09-03:/blog/sw-anyinput-lok.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improved font fallback in the DOCX import of Writer</title><link>https://vmiklos.hu/blog/sw-improved-font-falback.html</link><description>&lt;p&gt;Writer now has improved support for font fallback when you open a DOCX file that refers to fonts
which are not available currently.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Writer as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Font embedding is meant to solve the problems around missing fonts, but you can also find documents
with stub embedded fonts that are to be ignored and our code didn't have any sanity check on such
fonts, leading to unexpected glyph-level fallbacks. Additionally, once font-level fallback happened,
we didn't take the font style (e.g. sans vs serif) into account, which is expected to work when
finding a good replacement for the missing font.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is how to the original rendering looked like:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-improved-font-falback/old.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-improved-font-falback/old.png"&gt;&lt;figcaption&gt;Bugdoc, before: ugly glyph-level fallback&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the handler for the embedded fonts in ODT/DOCX was improved to ignore stub fonts where even
basic glyphs were not available, the result was a bit more consistent, but still bad. Here is a
different document to show the problem:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-improved-font-falback/first.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-improved-font-falback/first.png"&gt;&lt;figcaption&gt;Bugdoc, first improvement: no glyph fallback but the result is sans&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note how now we used the same font, but the glyphs are always sans, not serif. So the final step was
to import the font type from DOCX and consider that while deciding font fallback:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-improved-font-falback/second.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-improved-font-falback/second.png"&gt;&lt;figcaption&gt;Bugdoc, second improvement: no glyph fallback and the result is sans / serif&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With this, we ignore stub embedded fonts from DOCX, we import the font type and in general font
fallback on Linux takes the font type into account while deciding font fallback.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a9f3c11375525a7708378dd3648febc40db1ad20"&gt;tdf#162002 DOCX import: ignore subsetted embedded fonts for editing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/09da7fd9cec9b36f2e09c1105a9263b83e2c66e4"&gt;tdf#162002 DOCX import, font embed: only discard subset fonts with few glyphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6dfac38bacd449c64a13363797b56aff49cf8f52"&gt;tdf#162072 vcl, fontconfig: consider font-family-generic for substitute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d06de2e049761b7b9e8a95f17557d309812f7acc"&gt;Related: tdf#162072 DOCX import: handle font family for characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/ef1870810ec8c069e26538fd7626ad0656bed276"&gt;tdf#162280 vcl: consider font family type for glyph caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a development edition of Collabora Online 24.04 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/code/"&gt;try
the development edition&lt;/a&gt;.  Collabora intends to continue
supporting and contributing to LibreOffice, the code is merged so we expect all of this work will be
available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 07 Aug 2024 09:05:24 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-08-07:/blog/sw-improved-font-falback.html</guid><category>libreoffice</category><category>en</category></item><item><title>Fixing handling of line object transformations in the DOCX import of Writer</title><link>https://vmiklos.hu/blog/sw-drawingml-line-transform.html</link><description>&lt;p&gt;Writer now has improved support for toplevel line shapes when you import those from DOCX.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Writer as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As described in a &lt;a href="https://vmiklos.hu/blog/lo-writer-drawingml-shape-improvements.html"&gt;post from 2014&lt;/a&gt;,
Writer reads the drawingML markup for shapes in DOCX files, including line shapes. While
investigating a simple-looking problem around a horizontal vs vertical line, it turns out that there
is a deeper issue here, and it looks like now have proper fix for this bug.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine that your company template has a nice footer in two columns, and the content in the columns
are separated by a vertical line shape, but when you open your DOCX in Writer, it crosses the text
of that footer instead:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-drawingml-line-transform/diff-old.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-drawingml-line-transform/diff-old.png"&gt;&lt;figcaption&gt;Bugdoc, before: reference is red, Writer result is painted on top of it&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While researching how line shapes are represented in our document model and how ODT import works, it
turned out that the proper way to create a line shape is to only consider size / scaling when it
comes to the individual points of the line, everything else (e.g. position / translation) should go
to the transform matrix of the shape, then the render result will be as expected:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-drawingml-line-transform/diff-new.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-drawingml-line-transform/diff-new.png"&gt;&lt;figcaption&gt;Bugdoc, after: reference is red, Writer result is painted on top of it&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was also interesting to see that this also improved other, existing test documents, e.g. core.git
&lt;code&gt;sw/qa/extras/ooxmlimport/data/line-rotation.docx&lt;/code&gt; looked like this before:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/line-rotation-diff-old.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-drawingml-line-transform/line-rotation-diff-old.png"&gt;&lt;figcaption&gt;3 rotated lines, before: reference is red, Writer result is painted on top of it&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And the same fix makes it perfect:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/line-rotation-diff-new.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-drawingml-line-transform/line-rotation-diff-new.png"&gt;&lt;figcaption&gt;3 rotated lines, after: reference is red, Writer result is painted on top of it&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just stick to the rule: scaling goes to the points -- translation, rotation and horizontal shear
goes to the shape.&lt;/p&gt;
&lt;p&gt;For now, this is only there for toplevel Writer lines, but in-groupshape and Calc/Impress lines
could also follow this technique if there is a practical need.&lt;/p&gt;
&lt;p&gt;The "after" screenshots show ~no red, which means there is ~no reference output, where the Writer
output would be missing.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;The bugfix commit was &lt;a href="https://git.libreoffice.org/core/commit/6c09c85ec384e88c89bff0817e7fe9889d7ed68e"&gt;tdf#161779 DOCX import, drawingML: fix handling of translation for
lines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The tracking bug was &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=161779"&gt;tdf#161779&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a development edition of Collabora Online 24.04 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/code/"&gt;try
the development edition&lt;/a&gt;.  Collabora intends to continue
supporting and contributing to LibreOffice, the code is merged so we expect all of this work will be
available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 09 Jul 2024 14:46:01 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-07-09:/blog/sw-drawingml-line-transform.html</guid><category>libreoffice</category><category>en</category></item><item><title>Section-based continuous endnotes in Writer</title><link>https://vmiklos.hu/blog/sw-continuous-endnotes2.html</link><description>&lt;p&gt;Writer now has much better support for continuous / inline endnotes (not on a separate page) in
Writer, enabled by default for DOCX files.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Writer as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As described in a &lt;a href="https://vmiklos.hu/blog/sw-continuous-endnotes.html"&gt;previous post&lt;/a&gt;, Writer already had
minimal support for not rendering endnotes on a separate endnote page, but it was not mature enough
to enable is by default for DOCX files.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What changed from the previous "continuous endnotes" approach is that instead of trying to map
endnotes to footnotes, we now create a special endnotes section, which only exists at a layout level
(no section node is backing this one), and this hosts all endnotes at the end of the document. It
turns out this is a much more scalable technique, for example a stress-test with 72 endnotes over
several pages is now handled just fine.&lt;/p&gt;
&lt;p&gt;Here are some screenshots:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-continuous-endnotes2/old.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-continuous-endnotes2/old.png"&gt;&lt;figcaption&gt;Before: reference is red, Writer result is painted on top of it&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-continuous-endnotes2/new.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-continuous-endnotes2/new.png"&gt;&lt;figcaption&gt;After: reference is red, Writer result is rendered on top of it&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there were various differences for this document, but the most problematic one was
that the entire endnote was missing from the (originally) last page, as it was rendered on a
separate page.&lt;/p&gt;
&lt;p&gt;Now it's not only on the correct page, but also its position is correct: the endnote is after the
body text, while the footnote is at the bottom of the page, as expected. The second screenshot shows
~no red, which means there is ~no reference output, where the Writer output would be missing.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/90f19126fa405a0632eae4ee8525b66bbce12625"&gt;tdf#160984 sw continuous endnotes: introduce an endnote section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/8bae684c93bd23bbe98707ba9cf75d1a39427131"&gt;tdf#160984 sw continuous endnotes: add a way to find the endnote section start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/ab3416cad1dd4e706432f9b1a3592cec823c76b0"&gt;tdf#160984 sw continuous endnotes: fix testContinuousEndnotesMoveBackwards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/9c7acbc937b3b341c10187b837e09cc20399f04e"&gt;tdf#160984 sw continuous endnotes: fix &lt;code&gt;CppunitTest_sw_layoutwriter3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6885dcd7ec7b82a946d8344bfc27a3e88eecc44a"&gt;tdf#160984 sw continuous endnotes: switch to a section-based layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/82dd81a9d2049ac95535880fc67c1867f90e1427"&gt;tdf#161083 sw continuous endnotes: fix layout with a section at doc end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d74fb6b571304b41c13b7a6dcdd2b853bfca7210"&gt;tdf#160984 sw continuous endnotes, DOC import: enable this unconditionally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/1ae5ea3f78cca11ba18f2dd1a06f875263336a3b"&gt;tdf#160984 sw continuous endnotes: enable DOCX import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d1ddd136a1b0e452492464d58715eaec144fd811"&gt;tdf#160984 sw continuous endnotes: fix the endnote container's top margin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/f1d0b4e34a1f467e9f54baa7ac31ca28fdae3efb"&gt;tdf#160984 sw continuous endnotes: fix the endnote separator position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/755f3bebd96ec7ae43b1dcf247f907b9c15c1995"&gt;tdf#160984 sw continuous endnotes: fix the endnote separator length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/3f2d0414686a8f9a042413c47c4c8ffa5d61f436"&gt;tdf#160984 sw continuous endnotes: fix crash on loading forum-mso-en-7731.docx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2d2dd56e0b2dc708f1f758d7fc9a1263ff09b83c"&gt;tdf#160984 sw continuous endnotes: DOCX: import &lt;code&gt;&amp;lt;w:endnotePr&amp;gt;&lt;/code&gt; pos == sectEnd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/566c7017a84e3d573de85a6d986b81d3f59de0fa"&gt;tdf#160984 sw continuous endnotes: DOCX: export of &lt;code&gt;&amp;lt;w:endnotePr&amp;gt;&lt;/code&gt; pos == sectEnd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6450159e0e7c5fac9c998087e99f3fec602ff84d"&gt;tdf#160984 sw continuous endnotes: fix the endnote continuation separator len&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/8f3e11dc9a4b3fd9ad1985d88b241df7bcb66fec"&gt;tdf#160984 sw continuous endnotes: hide not functional UI in this mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tracking bug was &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=160984"&gt;tdf#160984&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a development edition of Collabora Online 24.04 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/code/"&gt;try
the development edition&lt;/a&gt;.  Collabora intends to continue
supporting and contributing to LibreOffice, the code is merged so we expect all of this work will be
available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 03 Jun 2024 16:26:52 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-06-03:/blog/sw-continuous-endnotes2.html</guid><category>libreoffice</category><category>en</category></item><item><title>Improve copy&amp;paste in Calc and elsewhere</title><link>https://vmiklos.hu/blog/sc-clipboard-paste.html</link><description>&lt;p&gt;Calc now supports much better copy&amp;amp;paste when you transfer data between Google Sheets and Calc.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but the feature is
fully available in desktop Calc as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, Collabora Online was using the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand"&gt;deprecated&lt;/a&gt;
&lt;code&gt;document.execCommand()&lt;/code&gt; API to paste text, which is problematic, as the "paste" button on the
toolbar can't behave the same way as pressing Ctrl-V on the keyboard.&lt;/p&gt;
&lt;p&gt;Second, it turns out Google Sheets came up with some additional HTML attributes to represent
spreadsheet data in HTML in a much better way, and Calc HTML import/export had no support for this,
while this is all fixable.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In short, Collabora Online now uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read"&gt;Clipboard
API&lt;/a&gt; to read from the system
clipboard -- this has to be supported by the
&lt;a href="https://sdk.collaboraonline.com/docs/advanced_integration.html#allow-the-clipboard-permission-query"&gt;integration&lt;/a&gt;,
and Calc's HTML filter now support the subset of the Google Sheets markup I figured out so far. This
subset is also
&lt;a href="https://sdk.collaboraonline.com/docs/advanced_integration.html#spreadsheet-html-extensions"&gt;documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that the default behavior is that the new Clipboard API is available in Chrome/Safari, but not
in Firefox.&lt;/p&gt;
&lt;p&gt;For the longer version, here are some screenshots:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-01-15-cool-clipboard-popup.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-01-15-cool-clipboard-popup.png"&gt;&lt;figcaption&gt;We used to show a popup when you clicked on the paste button on the notebookbar&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-01-18-cool-clipboard-image-paste.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-01-18-cool-clipboard-image-paste.png"&gt;&lt;figcaption&gt;The new paste code in action, handling an image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-01-31-sc-html-import-text-bad.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-01-31-sc-html-import-text-bad.png"&gt;&lt;figcaption&gt;Import from Google Sheets to Calc: text is auto-converted to a number, bad&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-01-sc-html-import-text-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-01-sc-html-import-text-good.png"&gt;&lt;figcaption&gt;Import from Google Sheets to Calc: text is no longer auto-converted to a number, good&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-02-sc-html-import-celledit-fix.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-02-sc-html-import-celledit-fix.png"&gt;&lt;figcaption&gt;HTML import into an active cell edit, only RTF was working there previously&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-07-sc-html-paste-text-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-07-sc-html-paste-text-good.png"&gt;&lt;figcaption&gt;Paste from Google Sheets to Calc: text is no longer auto-converted to a number, good&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-08-sc-html-paste-boolean-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-08-sc-html-paste-boolean-good.png"&gt;&lt;figcaption&gt;Paste from Google Sheets to Calc: booleans are now also preserved&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-09-sc-html-paste-numfmt-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-09-sc-html-paste-numfmt-good.png"&gt;&lt;figcaption&gt;Paste from Google Sheets to Calc: number formats are now also preserved&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-12-sc-html-paste-formula-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-12-sc-html-paste-formula-good.png"&gt;&lt;figcaption&gt;Paste from Google Sheets to Calc: formulas are now also preserved&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-13-sc-html-paste-singlecell-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-13-sc-html-paste-singlecell-good.png"&gt;&lt;figcaption&gt;Paste from Google Sheets to Calc: also handling a single cell&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-14-sc-html-copy-text-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-14-sc-html-copy-text-good.png"&gt;&lt;figcaption&gt;Copy from Calc to Google Sheets: text is now handled, no longer auto-converted to a number&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-15-sc-html-copy-bool-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-15-sc-html-copy-bool-good.png"&gt;&lt;figcaption&gt;Copy from Calc to Google Sheets: booleans are now handled&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-20-cool-cross-origin-iframe-clipboard-bad.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-02-20-cool-cross-origin-iframe-clipboard-bad.png"&gt;&lt;figcaption&gt;Cross-origin iframes also block clipboard access, now fixed&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-03-01-sc-html-copy-formatted-number-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-03-01-sc-html-copy-formatted-number-good.png"&gt;&lt;figcaption&gt;Copy from Calc to Google Sheets: number formats are now also preserved&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-03-04-sc-html-copy-formula-good.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-03-04-sc-html-copy-formula-good.png"&gt;&lt;figcaption&gt;Copy from Calc to Google Sheets: formulas are now also preserved&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-03-08-cool-plain-text-copy.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sc-clipboard-paste/2024-03-08-cool-plain-text-copy.png"&gt;&lt;figcaption&gt;Copy from COOL Writer to a text editor: much better result, new one on the right hand side&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e6e5660b726ecf3b0c39b277568568973b43c9f0"&gt;tdf#159483 sc HTML import: handle data-sheets-value attribute for the text case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/543e52481e764b8e0eea6cf0123a77cf492bdf8e"&gt;tdf#159483 sc HTML paste: handle data-sheets-value here, too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/f8c95cf93ce9ab8b9b78f3af03411d0cc2e195ba"&gt;tdf#159483 sc HTML import: handle data-sheets-value attribute for the bool case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/789964785a61daab5f8065f006dd7aaf843c7236"&gt;tdf#159483 sc HTML import: handle data-sheets-value attribute for the num case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/7812adb2ed11a3e08be24d3f2f94d14bfd740c55"&gt;tdf#159483 sc HTML paste: handle data-sheets-formula attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/c0da56cb3e9f9678cae7142dee03fb706a2aebd9"&gt;tdf#159483 sc HTML paste: handle data-sheets- attributes on a span&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/4e2a4fbeb7c44cc47b3cf803cbcc6cba63b3d481"&gt;tdf#159483 sc HTML export: handle data-sheets-value attribute for the text case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/411158832462b1077a8f5dc6379f2056f2338249"&gt;tdf#159483 sc HTML copy: handle data-sheets-value attribute for the bool case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/17581e684ca701bfd96ed2bf16aa14c3903b74d4"&gt;tdf#159483 sc HTML copy: handle data-sheets-value attribute for the num case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2efe362c99a9fa6e9a71b9b675b025c64b6c7f9d"&gt;tdf#159483 sc HTML copy: handle data-sheets-formula attribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tracking issue on the Online side was &lt;a href="https://github.com/CollaboraOnline/online/issues/8023"&gt;cool#8023&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 24.04 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Thu, 04 Apr 2024 09:50:39 +0200</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-04-04:/blog/sc-clipboard-paste.html</guid><category>libreoffice</category><category>en</category></item><item><title>Legal numbering in Writer: DOC and RTF support</title><link>https://vmiklos.hu/blog/sw-legal-numbering.html</link><description>&lt;p&gt;Writer now supports legal numbering for two more formats: DOC and RTF (ODT and DOCX were working
already.)&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, done as a
&lt;a href="https://vmiklos.hu/blog/sw-content-controls3.html"&gt;HackWeek&lt;/a&gt; project, but the feature is fully available in
desktop Writer as well.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Legal numbering is a way to influence the number format of values inherited in a multi-level
numbering. Say, the outer numbering uses Roman numerals and the inner numbering uses X.Y as the number
format, but the inner level wants to display the outer values as Arabic numerals. If this is wanted
(and guessing from the name, sometimes lawyers do want this), then the inner number portion will
expand to values like "2.01" instead of "II.01", while the outer number portions will remain values
like "II".&lt;/p&gt;
&lt;p&gt;Mike did &lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=150408"&gt;80% of the work&lt;/a&gt;, what you can
see here is just the RTF/DOC filters.&lt;/p&gt;
&lt;p&gt;Picking a smaller feature task like this looked like a good idea, since I wanted to spend some of
the time on regression fixing around last year's multi-page floating table project.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For (binary) DOC, the relevant detail is the &lt;code&gt;fLegal&lt;/code&gt; bit in the &lt;code&gt;LVLF&lt;/code&gt; structure. Here is the
result:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-legal-numbering/2024-02-29-writer-legal-numbering-doc.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-legal-numbering/2024-02-29-writer-legal-numbering-doc.png"&gt;&lt;figcaption&gt;Improved handling of legal numbering from DOC: old, new and reference rendering&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It shows how the outer "II" gets turned into "2", while it remained "II" in the past. This works for
both loading and saving.&lt;/p&gt;
&lt;p&gt;The same feature is now handled in the RTF filter as well. There the relevant detail is the
&lt;code&gt;\levellegal&lt;/code&gt; control word, which has an odd 1 default value (the default is usually 0). Here is the
result:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-legal-numbering/2024-02-29-writer-legal-numbering-rtf.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-legal-numbering/2024-02-29-writer-legal-numbering-rtf.png"&gt;&lt;figcaption&gt;Improved handling of legal numbering from RTF: old, new and reference rendering&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It shows that the RTF filter is up to speed with the DOC one by now.&lt;/p&gt;
&lt;p&gt;As for the multi-page floating tables, I looked at
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=158986"&gt;tdf#158986&lt;/a&gt; and
&lt;a href="https://bugs.documentfoundation.org/show_bug.cgi?id=158801"&gt;tdf#158801&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/397d72e582c725d162c7e0b819dc6c0bb62e42b0"&gt;Related: tdf#158986 sw floattable: fix unexpected page break with sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/b7c4c4d45f44a26283678f3dc32982b3a728c614"&gt;tdf#158986 sw floattable: fix RTF import of table followed by \sect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a73b3994fb6a2cc10b2d65cbaad201762610cecc"&gt;Related: tdf#150408 DOC filter: handle legal numbering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e8487bedb20a429565b4a0e4bd2d6806cc603b7f"&gt;Related: tdf#150408 RTF filter: handle legal numbering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/c98ff922831f56253af2a050b8e07cfc89b7a387"&gt;Related: tdf#158986 sw floattable, RTF import: use more setNeedPar()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/186de7178c6065e1de13fd216b46ac9b716e44c5"&gt;tdf#158801 sw floattable: fix crash with headers and interactive editing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 24.04 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Fri, 01 Mar 2024 08:46:39 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-03-01:/blog/sw-legal-numbering.html</guid><category>libreoffice</category><category>en</category></item><item><title>Fixing multi-view programming challenges in Calc and elsewhere</title><link>https://vmiklos.hu/blog/multi-view-programming-challenges.html</link><description>&lt;p&gt;This post describes some challenges around having multiple views of one opened document in
LibreOffice core, when those views belong to LOK views, representing different users, with their
own language, locale and other view settings.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but is useful for
all clients of the LOK API.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;LOK views are meant to represent separate users, so we need to make sure that when a user sets their
preferences and trigger an action, then the response to that action goes to the correct view, with
the correct view settings.&lt;/p&gt;
&lt;p&gt;This is different from the desktop LibreOffice use-case, where multiple windows are still meant to
share the same user name, language, undo stack and so on.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, I would like to present 4 small improvements that recently happened to the LOK API to
provide this wanted separation of views.&lt;/p&gt;
&lt;p&gt;The first was an &lt;a href="https://github.com/CollaboraOnline/online/issues/7853"&gt;issue&lt;/a&gt; where two users were
editing the same document, one busily typing and the other clicked on a link in Calc. What could
happen sometimes is the link popup appeared for the user who typed, not for the user who clicked on
the link:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2023-12-18-cool-calc-hyprelink-bad-view.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2023-12-18-cool-calc-hyprelink-bad-view.png"&gt;&lt;figcaption&gt;Link popup is actually on the left, should be on the right, now fixed&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This specific problem can be fixed by making sure that link click callbacks are invoked
synchronously (while the clicking view is still active) and not later, when the current view may or
may not be the correct one.&lt;/p&gt;
&lt;p&gt;It turns out the same problem (async command dispatch) affects not only hyperlinks, but many other
cases as well, where we want to stay async, for example, when one dialog would invoke another
dialog, like the Calc conditional format -&amp;gt; add dialog:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2024-01-02-cool-calc-condformat-wrong-view.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2024-01-02-cool-calc-condformat-wrong-view.png"&gt;&lt;figcaption&gt;Calc conditional format add dialog appearing on the left, should be on the right, now fixed&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There you don't want to change async commands into sync commands, because that may mean spinning the
main loop inside a dialog, resulting in nested main loops. This can be fixed by making sure that
async commands to be dispatched (sfx2 hints in general) are processed in a way that the current view
at dispatch &amp;amp; processing is the same, which is now the case.&lt;/p&gt;
&lt;p&gt;The third problem was around wrong language &amp;amp; locale in the status bar:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2024-01-04-cool-calc-statusbar-wrong-lang.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2024-01-04-cool-calc-statusbar-wrong-lang.png"&gt;&lt;figcaption&gt;Unexpected English strings in localized statubar UI, now fixed&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is not simply a problem of missing translation, the trouble was that the status bar update is
also async and by the time the update happened, the locale of the view on the left was used, for a
string that appears on the right.&lt;/p&gt;
&lt;p&gt;The way to fix this is to perform the update of toolbars/statusbar/etc (in general: SfxBindings) in
a way that the language at job schedule time and at UI string creation time is the same.&lt;/p&gt;
&lt;p&gt;The last problem was quite similar, still about bad language on the UI, but this time on the
sidebar:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2024-01-09-cool-calc-sidebar-wrong-lang.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/multi-view-programming-challenges/2024-01-09-cool-calc-sidebar-wrong-lang.png"&gt;&lt;figcaption&gt;Unexpected English strings in localized sidebar UI, now fixed&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is similar to the statusbar case, but the sidebar has its own executor for its async jobs, so
that needed a fix similar to what the statusbar already had, now done.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e83309d97d0bbad131a7fdfd365fb6122d6f415b"&gt;cool#7853 sc lok: fix bad view id on hyperlink click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/ee7ca8e4ea8ed93655f99e77a9e77032ac830c46"&gt;cool#7865 sfx2 lok: fix bad view id on async command dispatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/51d8a2ef54751403fa707816e27ddb4e7faa8231"&gt;cool#7492 sfx2 lok: fix bad view id / statusbar string on async binding update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/fb7b0b944741e4efae8d92a6e305036aff906c7a"&gt;cool#7492 sfx2 lok: just set language/locale on async binding update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/aaf6ce108e91b1504befe19afcee471e3316ae7a"&gt;cool#7492 sfx2 lok: set language/locale on async sidebar update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get the latest Collabora Online Development Edition 23.05 and try it out yourself right now:
&lt;a href="https://www.collaboraoffice.com/code/quick-tryout-nextcloud-docker/"&gt;try the development edition&lt;/a&gt;.
Collabora intends to continue supporting and contributing to LibreOffice, the code is merged so we
expect all of this work will be available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 06 Feb 2024 09:49:18 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-02-06:/blog/multi-view-programming-challenges.html</guid><category>libreoffice</category><category>en</category></item><item><title>Multi-page floating tables in Writer: tables wrapping tables</title><link>https://vmiklos.hu/blog/sw-floattable11.html</link><description>&lt;p&gt;This post is part of a series to describe how Writer now gets a feature to handle tables that are
both floating and span over multiple pages.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but is useful on
the desktop as well. See the &lt;a href="https://vmiklos.hu/blog/sw-floattable10.html"&gt;10th post&lt;/a&gt; for the previous part.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previous posts described the hardest part of multi-page floating tables: making sure that text can
wrap around them and they can split across pages. In this part, we'll look at a case where that
content is not just text, but the wrapping content itself is also a table.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Regarding testing of the floating table feature in general, the core.git repository has 92 files now
which are focusing on correct handling of floating tables (filenames matching
&lt;code&gt;floattable-|floating-table-&lt;/code&gt;). This doesn't count cases where the document model is built using C++
code in the memory and then we assert the result of some operation.&lt;/p&gt;
&lt;p&gt;Here are some screenshots from the improvements this month:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable11/2023-12-01-floattable-click-correct.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable11/2023-12-01-floattable-click-correct.png"&gt;&lt;figcaption&gt;Improved click handling near the first page of a floating table&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first screenshot shows a situation where the mouse cursor is near the right edge of the first
page of a floating table. What used to happen is we found this position close to the invisible
anchor of the floating table on that page, then corrected this position to be at the real anchor on
the last page. In short, the user clicked on one page and we jumped to the last page. This is now
fixed, we notice that part of the floating table is close to the click position and we correct the
cursor to be at the closest position inside the table's content.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable11/2023-12-05-floattable-tablewrap.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable11/2023-12-05-floattable-tablewrap.png"&gt;&lt;figcaption&gt;A floating table, wrapped by an inline table: old, new and reference rendering&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The next screenshot shows a floating table where the content wrapping around the table happens to be
an inline table. You can see how such wrapping didn't happen in the past, and the new rendering is
close to the reference now.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/f461853b11439c4e485a79174d34735395e5bf52"&gt;sw floattable: fix finding the nearest text in split flys on mouse click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/868140fcc1311259b9d5f666637b33d226511a53"&gt;tdf#60558 sw floattable: allow wrap of table on the right of a floattable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/0746d13365139c356eb9d297a358c486bf47d6fb"&gt;sw floattable: fix split of anchor text in 2nd half of the paragraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d852e27ed205c1a60de0979b80f3861bf93c44ae"&gt;sw floattable: fix split of anchor text at para start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/5fec60b4732bdbdb681be08e43a9be47c3bfb320"&gt;sw floattable: fix outdated text frame portions after split&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/4e8895d3d86db3776c56070c395cd727fd4b9101"&gt;sw floattable: disable UI to enable this when anchored inside TextBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/164fb25f7b2db7d833d6d0f28e49c5cac68426b3"&gt;tdf#158686 sw floattable: fix print preview crash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 23.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (24.8).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Wed, 03 Jan 2024 15:15:21 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2024-01-03:/blog/sw-floattable11.html</guid><category>libreoffice</category><category>en</category></item><item><title>Multi-page floating tables in Writer: UI improvements</title><link>https://vmiklos.hu/blog/sw-floattable10.html</link><description>&lt;p&gt;This post is part of a series to describe how Writer now gets a feature to handle tables that are
both floating and span over multiple pages.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but is useful on
the desktop as well. See the &lt;a href="https://vmiklos.hu/blog/sw-floattable9.html"&gt;9th post&lt;/a&gt; for the previous part.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previous posts described the hardest part of multi-page floating tables: reading them from
documents, so we layout and render them. In this part, you can read about UI improvements when it
comes to creating, updating and deleting them in Writer.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Regarding testing of the floating table feature in general, the core.git repository has 89 files now which are focusing on correct
handling of floating tables (filenames matching &lt;code&gt;floattable-|floating-table-&lt;/code&gt;). This doesn't count
cases where the document model is built using C++ code in the memory and then we assert the result
of some operation.&lt;/p&gt;
&lt;p&gt;Here are some screenshots from the improvements this month:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable10/2023-11-13-floattable-lok-insert-ui.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable10/2023-11-13-floattable-lok-insert-ui.png"&gt;&lt;figcaption&gt;Improved insertion of floating tables&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first screenshot shows that the underlying LibreOffice Insert Frame dialog is now async
(compatible with collaborative editing) and is now exposed in the Collabora Online notebookbar.&lt;/p&gt;
&lt;p&gt;There were other improvements as well, so in case you select a whole table and insert a new frame,
the result is close to what the DOCX import creates to floating tables. This includes a default
frame width that matches the table width, and also disabling frame borders, since the table can
already have one.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable10/2023-11-21-floattable-lok-edit-delete-ui.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable10/2023-11-21-floattable-lok-edit-delete-ui.png"&gt;&lt;figcaption&gt;Unfloating a floating table&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The next screenshot shows an inserted floating table, where the context menu allows updating the
properties of an already inserted floating table, and also allows to delete ("unfloat") it.&lt;/p&gt;
&lt;p&gt;Several of these changes are shared improvements between LibreOffice and Collabora Online, so
everyone benefits. For example, inserting a frame when a whole table was selected also cleared the
undo stack, which is now fixed. Or unfloating table was only possible if some part of the table was
clipped, but now this is always possible to do.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/35925357f86e01612df28a092d71b6e216195636"&gt;sw floattable: make Insert Frame dialog async and mark it as a jsdialog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/0bf60e32c0ac2bf79fad6c29c39c6f6a3f9ce8e8"&gt;tdf#99822 sw floattable: testcase for objects from different cells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/4f1121255ebac035a439d242b47c2f81124418c3"&gt;sw floattable, insert UI: fix default frame width when inserting a new one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/0ecb69d53864b582eb59533729ada01d85d383e6"&gt;sw floattable, insert UI: inherit fly width from selected table width&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/e306352b9ddd8bddfc37f0cfaac078d9260650d6"&gt;sw floattable, insert UI: allow direct creation of floating tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/8d973c5b9405bfa6964d3dfebd0017fd60ec3eca"&gt;sw floattable, insert UI: default to at-char for non-split flys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6c761fa3b40d296444681d8d2f991e5a6b7e5b71"&gt;sw floattable, insert UI: fix missing undo/redo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/c1a535ee2db757b2e40683dc918cbad8b7429cfa"&gt;sw floattable, insert UI: fix unexpected border and spacing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/bda066a77f4167bf83c0167afb6998c2890e60e0"&gt;sw floattable: link ODF proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/47d824dd167eb34b08e5aec7141d2d9e6e996b34"&gt;tdf#157911 sw floattable: fix inconsistent inferred bottom border on split&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2f42d8acd2d06f848c9e680c42a0f7834a9a641f"&gt;sw floattable, delete UI: fix unfloat button for cant-split frames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/871ca5dd73b34086fad1e57d4697f43a6739a11d"&gt;sw floattable, delete UI: add an uno command to unfloat frame from context menu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/45a4ed02281a7a8ca52fccf626c792e417c8ef1c"&gt;sw floattable, delete UI: fix undo/redo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/223d2fac61e061478721a7a4a89b1362f5037d8f"&gt;sw floattable: fix crash by trying harder to split tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/b1b0cc1b0bb473155b5b089199ca99bb1dc40e42"&gt;sw floattable: add per-frame wrap-on-all-pages mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/a596070f8ac11ed0cd22baf55704037a6b8d9c4d"&gt;sw floattable, per-frame wrap-on-all-pages mode: add UNO API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/272c3548c4d2362eb737947c8cbb017e2d55aae1"&gt;sw floattable, per-frame wrap-on-all-pages mode: add layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/7f58b57b47e6642cb9a7aeac48915b30148042d2"&gt;sw floattable, per-frame wrap-on-all-pages mode: add ODT filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/ce2fc5eb29b4e252993b549dee002fa8948c8386"&gt;tdf#158341 sw floattable: fix layout loop when fly is below the body frame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 23.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (24.2).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Mon, 04 Dec 2023 16:26:07 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2023-12-04:/blog/sw-floattable10.html</guid><category>libreoffice</category><category>en</category></item><item><title>Multi-page floating tables in Writer: wrap on all pages</title><link>https://vmiklos.hu/blog/sw-floattable9.html</link><description>&lt;p&gt;This post is part of a series to describe how Writer now gets a feature to handle tables that are
both floating and span over multiple pages.&lt;/p&gt;
&lt;p&gt;This work is primarily for &lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Online&lt;/a&gt;, but is useful on
the desktop as well. See the &lt;a href="https://vmiklos.hu/blog/sw-floattable8.html"&gt;8th post&lt;/a&gt; for the previous part.&lt;/p&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Multi-page floating tables always wrapped their anchor text only on the last page, to be compatible
with Word's default behavior. There is a special flag in DOCX files to wrap on all pages, though. In
this part, you can read about handling of this flag in Writer.&lt;/p&gt;
&lt;h2 id="results-so-far"&gt;Results so far&lt;a class="headerlink" href="#results-so-far" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Regarding testing of the floating table feature in general, the core.git repository has 84 files now which are focusing on correct
handling of floating tables (filenames matching &lt;code&gt;floattable-|floating-table-&lt;/code&gt;). This doesn't count
cases where the document model is built using C++ code in the memory and then we assert the result
of some operation.&lt;/p&gt;
&lt;p&gt;Here are some screenshots from the fixes this month:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable9/2023-10-03-floattable-nested3.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable9/2023-10-03-floattable-nested3.png"&gt;&lt;figcaption&gt;Old, new and reference rendering of a 3 nested, multi-page floating tables&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first screenshot shows a case where multi-page floating tables are nested. For this document, we
not only have an inner and an out table, but we also have a middle one, giving us 3 nesting tables.
Some of the inner table frames had a bad position, leading to overlapping text, now fixed.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable9/2023-10-16-floattable-wraponallpages.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable9/2023-10-16-floattable-wraponallpages.png"&gt;&lt;figcaption&gt;Old, new and reference rendering of wrapping on all pages&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The next screenshot shows the case where the magic &lt;code&gt;allowTextAfterFloatingTableBreak&lt;/code&gt; flag is set.
We used to wrap content of the anchor only on the last page, unconditionally. Now we either wrap on
the last page (default) or on all pages (when this flag is present).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://share.vmiklos.hu/blog/sw-floattable9/2023-10-24-floattable-overlap.png"&gt;&lt;figure&gt;&lt;img src="https://share.vmiklos.hu/blog/sw-floattable9/2023-10-24-floattable-overlap.png"&gt;&lt;figcaption&gt;Old, new and reference rendering of overlapping floating tables.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The last screenshot shows a document full of floating tables. These used to be inline ones, and then
they could not overlap by definition, but now extra effort was needed to position them in a way that
no overlap happens between the tables. Now our render result matches Word.&lt;/p&gt;
&lt;h2 id="how-is-this-implemented"&gt;How is this implemented?&lt;a class="headerlink" href="#how-is-this-implemented" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you would like to know a bit more about how this works, continue reading... :-)&lt;/p&gt;
&lt;p&gt;As usual, the high-level problem was addressed by a series of small changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/695390b08799af34b393c81c834d615bea330d89"&gt;tdf#126449 sw floattable: fix too small height of non-last anchors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/89a75cd194371002247d0138e759835bc673f7b0"&gt;tdf#126449 sw floattable: DOC import: handle inner floating table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/2d6f48d53674ee85179ec8cee8648830207200a2"&gt;sw floattable, crashtesting: fix PDF export of fdo56210-3.docx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d530651e4e70febb1046727e85a8edcda610d722"&gt;crashtesting: fix PDF export of fdo45193-1.docx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/4a5fb05d5e2448453477ce14862a8cf9846ecb49"&gt;tdf#157571 sw floattable: fix incorrect blank space after table-in-shape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/6b9378154f9b504b9e924fe4565df444786e7d73"&gt;sw floattable, crashtesting: fix PDF export of ooo91654-1.doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/5b9249e950165015ba57cc2c0503381df9751bf6"&gt;sw floattable: add an AllowTextAfterFloatingTableBreak compat flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/7d7ca347fafa7a06094b00e8fb0d0452c4c81366"&gt;sw floattable, wrap on all pages: add layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/33ade4171a1a443fd24e6463a9eaa279f7d778bb"&gt;sw floattable, wrap on all pages: add DOCX filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/626fe9ab5ebebc4ef36e35f4aa597c03a3564d22"&gt;tdf#157573 sw floattable: fix incorrect lack of left margin after table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/65f508b44ecbc20c8bd5172d1656639f686730ff"&gt;tdf#157573 sw floattable: add missing testcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/8e03dfd6a4bff4eabf779ace9b758b49cf80f8ba"&gt;tdf#157590 sw floattable: avoid hang in the nested + row span case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/5e7f7917fd589f661982d481a45bf84337e4c03c"&gt;sw floattable: remove now unused FloattableNomargins compat flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/612629f4a81acd7b851b7eccc97aba9a5915d13c"&gt;tdf#155040 sw floattable, RTF: fix table is overlapped by subsequent inline one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/9704f61982360ce35983a61cca3fd00bbdf51ab6"&gt;tdf#155682 sw floattable: fix DOCX with big pictures causes endless loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/d6527f127622f23ac529ce667fac5ff69ea33ea4"&gt;Related: tdf#157590 sw floattable: avoid a bit of not needed work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/8ad82fc115a337604c064d37adfffcc81440248e"&gt;sw floattable: fix nullptr deref in TableManager::endLevel()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.libreoffice.org/core/commit/435f1aadf7dd8087a8997924bedfccff0f496ba2"&gt;tdf#99822 sw floattable: allow nomimal overlap of objects from different cells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-start-using-this"&gt;Want to start using this?&lt;a class="headerlink" href="#want-to-start-using-this" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get a snapshot / demo of Collabora Office 23.05 and try it out yourself right now: &lt;a href="https://www.collaboraoffice.com/collabora-office-latest-snapshot/"&gt;try the
unstable snapshot&lt;/a&gt;.  Collabora
intends to continue supporting and contributing to LibreOffice, the code is merged so we expect all
of this work will be available in TDF's next release too (24.2).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miklos Vajna</dc:creator><pubDate>Tue, 07 Nov 2023 14:35:34 +0100</pubDate><guid isPermaLink="false">tag:vmiklos.hu,2023-11-07:/blog/sw-floattable9.html</guid><category>libreoffice</category><category>en</category></item></channel></rss>